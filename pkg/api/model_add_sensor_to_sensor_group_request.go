/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddSensorToSensorGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddSensorToSensorGroupRequest{}

// AddSensorToSensorGroupRequest struct for AddSensorToSensorGroupRequest
type AddSensorToSensorGroupRequest struct {
	// id of the sensor to add
	SensorId *float32 `json:"sensor_id,omitempty"`
}

// NewAddSensorToSensorGroupRequest instantiates a new AddSensorToSensorGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddSensorToSensorGroupRequest() *AddSensorToSensorGroupRequest {
	this := AddSensorToSensorGroupRequest{}
	return &this
}

// NewAddSensorToSensorGroupRequestWithDefaults instantiates a new AddSensorToSensorGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSensorToSensorGroupRequestWithDefaults() *AddSensorToSensorGroupRequest {
	this := AddSensorToSensorGroupRequest{}
	return &this
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *AddSensorToSensorGroupRequest) GetSensorId() float32 {
	if o == nil || IsNil(o.SensorId) {
		var ret float32
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSensorToSensorGroupRequest) GetSensorIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *AddSensorToSensorGroupRequest) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given float32 and assigns it to the SensorId field.
func (o *AddSensorToSensorGroupRequest) SetSensorId(v float32) {
	o.SensorId = &v
}

func (o AddSensorToSensorGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddSensorToSensorGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SensorId) {
		toSerialize["sensor_id"] = o.SensorId
	}
	return toSerialize, nil
}

type NullableAddSensorToSensorGroupRequest struct {
	value *AddSensorToSensorGroupRequest
	isSet bool
}

func (v NullableAddSensorToSensorGroupRequest) Get() *AddSensorToSensorGroupRequest {
	return v.value
}

func (v *NullableAddSensorToSensorGroupRequest) Set(val *AddSensorToSensorGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSensorToSensorGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSensorToSensorGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSensorToSensorGroupRequest(val *AddSensorToSensorGroupRequest) *NullableAddSensorToSensorGroupRequest {
	return &NullableAddSensorToSensorGroupRequest{value: val, isSet: true}
}

func (v NullableAddSensorToSensorGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSensorToSensorGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


