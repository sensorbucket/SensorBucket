/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UpdateWorkerRequest struct for UpdateWorkerRequest
type UpdateWorkerRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	State *string `json:"state,omitempty"`
	// base64 encoded user code
	UserCode *string `json:"user_code,omitempty"`
}

// NewUpdateWorkerRequest instantiates a new UpdateWorkerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWorkerRequest() *UpdateWorkerRequest {
	this := UpdateWorkerRequest{}
	return &this
}

// NewUpdateWorkerRequestWithDefaults instantiates a new UpdateWorkerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWorkerRequestWithDefaults() *UpdateWorkerRequest {
	this := UpdateWorkerRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateWorkerRequest) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkerRequest) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWorkerRequest) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateWorkerRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateWorkerRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateWorkerRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateWorkerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UpdateWorkerRequest) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkerRequest) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UpdateWorkerRequest) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UpdateWorkerRequest) SetState(v string) {
	o.State = &v
}

// GetUserCode returns the UserCode field value if set, zero value otherwise.
func (o *UpdateWorkerRequest) GetUserCode() string {
	if o == nil || isNil(o.UserCode) {
		var ret string
		return ret
	}
	return *o.UserCode
}

// GetUserCodeOk returns a tuple with the UserCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWorkerRequest) GetUserCodeOk() (*string, bool) {
	if o == nil || isNil(o.UserCode) {
    return nil, false
	}
	return o.UserCode, true
}

// HasUserCode returns a boolean if a field has been set.
func (o *UpdateWorkerRequest) HasUserCode() bool {
	if o != nil && !isNil(o.UserCode) {
		return true
	}

	return false
}

// SetUserCode gets a reference to the given string and assigns it to the UserCode field.
func (o *UpdateWorkerRequest) SetUserCode(v string) {
	o.UserCode = &v
}

func (o UpdateWorkerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.UserCode) {
		toSerialize["user_code"] = o.UserCode
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateWorkerRequest struct {
	value *UpdateWorkerRequest
	isSet bool
}

func (v NullableUpdateWorkerRequest) Get() *UpdateWorkerRequest {
	return v.value
}

func (v *NullableUpdateWorkerRequest) Set(val *UpdateWorkerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWorkerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWorkerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWorkerRequest(val *UpdateWorkerRequest) *NullableUpdateWorkerRequest {
	return &NullableUpdateWorkerRequest{value: val, isSet: true}
}

func (v NullableUpdateWorkerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWorkerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


