/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the Trace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trace{}

// Trace struct for Trace
type Trace struct {
	TracingId string `json:"tracing_id"`
	// id is 0 if not defined
	DeviceId int64 `json:"device_id"`
	StartTime time.Time `json:"start_time"`
	Status int32 `json:"status"`
	StatusString string `json:"status_string"`
	Steps []TraceStep `json:"steps"`
}

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace(tracingId string, deviceId int64, startTime time.Time, status int32, statusString string, steps []TraceStep) *Trace {
	this := Trace{}
	this.TracingId = tracingId
	this.DeviceId = deviceId
	this.StartTime = startTime
	this.Status = status
	this.StatusString = statusString
	this.Steps = steps
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetTracingId returns the TracingId field value
func (o *Trace) GetTracingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TracingId
}

// GetTracingIdOk returns a tuple with the TracingId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetTracingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TracingId, true
}

// SetTracingId sets field value
func (o *Trace) SetTracingId(v string) {
	o.TracingId = v
}

// GetDeviceId returns the DeviceId field value
func (o *Trace) GetDeviceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetDeviceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *Trace) SetDeviceId(v int64) {
	o.DeviceId = v
}

// GetStartTime returns the StartTime field value
func (o *Trace) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Trace) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetStatus returns the Status field value
func (o *Trace) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Trace) SetStatus(v int32) {
	o.Status = v
}

// GetStatusString returns the StatusString field value
func (o *Trace) GetStatusString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusString
}

// GetStatusStringOk returns a tuple with the StatusString field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStatusStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusString, true
}

// SetStatusString sets field value
func (o *Trace) SetStatusString(v string) {
	o.StatusString = v
}

// GetSteps returns the Steps field value
func (o *Trace) GetSteps() []TraceStep {
	if o == nil {
		var ret []TraceStep
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStepsOk() ([]TraceStep, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steps, true
}

// SetSteps sets field value
func (o *Trace) SetSteps(v []TraceStep) {
	o.Steps = v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tracing_id"] = o.TracingId
	toSerialize["device_id"] = o.DeviceId
	toSerialize["start_time"] = o.StartTime
	toSerialize["status"] = o.Status
	toSerialize["status_string"] = o.StatusString
	toSerialize["steps"] = o.Steps
	return toSerialize, nil
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


