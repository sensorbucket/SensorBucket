/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.2.5
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// Trace struct for Trace
type Trace struct {
	Id string `json:"id"`
	PipelineId string `json:"pipeline_id"`
	// id is 0 if not defined
	DeviceId int64 `json:"device_id"`
	StartTime time.Time `json:"start_time"`
	Workers []string `json:"workers"`
	WorkerTimes []time.Time `json:"worker_times"`
	Error *string `json:"error,omitempty"`
	ErrorAt *time.Time `json:"error_at,omitempty"`
}

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace(id string, pipelineId string, deviceId int64, startTime time.Time, workers []string, workerTimes []time.Time) *Trace {
	this := Trace{}
	this.Id = id
	this.PipelineId = pipelineId
	this.DeviceId = deviceId
	this.StartTime = startTime
	this.Workers = workers
	this.WorkerTimes = workerTimes
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetId returns the Id field value
func (o *Trace) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Trace) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Trace) SetId(v string) {
	o.Id = v
}

// GetPipelineId returns the PipelineId field value
func (o *Trace) GetPipelineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetPipelineIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PipelineId, true
}

// SetPipelineId sets field value
func (o *Trace) SetPipelineId(v string) {
	o.PipelineId = v
}

// GetDeviceId returns the DeviceId field value
func (o *Trace) GetDeviceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetDeviceIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *Trace) SetDeviceId(v int64) {
	o.DeviceId = v
}

// GetStartTime returns the StartTime field value
func (o *Trace) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Trace) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetWorkers returns the Workers field value
func (o *Trace) GetWorkers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Workers
}

// GetWorkersOk returns a tuple with the Workers field value
// and a boolean to check if the value has been set.
func (o *Trace) GetWorkersOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Workers, true
}

// SetWorkers sets field value
func (o *Trace) SetWorkers(v []string) {
	o.Workers = v
}

// GetWorkerTimes returns the WorkerTimes field value
func (o *Trace) GetWorkerTimes() []time.Time {
	if o == nil {
		var ret []time.Time
		return ret
	}

	return o.WorkerTimes
}

// GetWorkerTimesOk returns a tuple with the WorkerTimes field value
// and a boolean to check if the value has been set.
func (o *Trace) GetWorkerTimesOk() ([]time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.WorkerTimes, true
}

// SetWorkerTimes sets field value
func (o *Trace) SetWorkerTimes(v []time.Time) {
	o.WorkerTimes = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Trace) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Trace) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Trace) SetError(v string) {
	o.Error = &v
}

// GetErrorAt returns the ErrorAt field value if set, zero value otherwise.
func (o *Trace) GetErrorAt() time.Time {
	if o == nil || isNil(o.ErrorAt) {
		var ret time.Time
		return ret
	}
	return *o.ErrorAt
}

// GetErrorAtOk returns a tuple with the ErrorAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetErrorAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ErrorAt) {
    return nil, false
	}
	return o.ErrorAt, true
}

// HasErrorAt returns a boolean if a field has been set.
func (o *Trace) HasErrorAt() bool {
	if o != nil && !isNil(o.ErrorAt) {
		return true
	}

	return false
}

// SetErrorAt gets a reference to the given time.Time and assigns it to the ErrorAt field.
func (o *Trace) SetErrorAt(v time.Time) {
	o.ErrorAt = &v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["pipeline_id"] = o.PipelineId
	}
	if true {
		toSerialize["device_id"] = o.DeviceId
	}
	if true {
		toSerialize["start_time"] = o.StartTime
	}
	if true {
		toSerialize["workers"] = o.Workers
	}
	if true {
		toSerialize["worker_times"] = o.WorkerTimes
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.ErrorAt) {
		toSerialize["error_at"] = o.ErrorAt
	}
	return json.Marshal(toSerialize)
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


