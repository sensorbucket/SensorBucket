/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ListDatastreams200ResponseAllOf struct for ListDatastreams200ResponseAllOf
type ListDatastreams200ResponseAllOf struct {
	Data []Datastream `json:"data,omitempty"`
}

// NewListDatastreams200ResponseAllOf instantiates a new ListDatastreams200ResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDatastreams200ResponseAllOf() *ListDatastreams200ResponseAllOf {
	this := ListDatastreams200ResponseAllOf{}
	return &this
}

// NewListDatastreams200ResponseAllOfWithDefaults instantiates a new ListDatastreams200ResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDatastreams200ResponseAllOfWithDefaults() *ListDatastreams200ResponseAllOf {
	this := ListDatastreams200ResponseAllOf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListDatastreams200ResponseAllOf) GetData() []Datastream {
	if o == nil || isNil(o.Data) {
		var ret []Datastream
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatastreams200ResponseAllOf) GetDataOk() ([]Datastream, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListDatastreams200ResponseAllOf) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Datastream and assigns it to the Data field.
func (o *ListDatastreams200ResponseAllOf) SetData(v []Datastream) {
	o.Data = v
}

func (o ListDatastreams200ResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListDatastreams200ResponseAllOf struct {
	value *ListDatastreams200ResponseAllOf
	isSet bool
}

func (v NullableListDatastreams200ResponseAllOf) Get() *ListDatastreams200ResponseAllOf {
	return v.value
}

func (v *NullableListDatastreams200ResponseAllOf) Set(val *ListDatastreams200ResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableListDatastreams200ResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableListDatastreams200ResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDatastreams200ResponseAllOf(val *ListDatastreams200ResponseAllOf) *NullableListDatastreams200ResponseAllOf {
	return &NullableListDatastreams200ResponseAllOf{value: val, isSet: true}
}

func (v NullableListDatastreams200ResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDatastreams200ResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


