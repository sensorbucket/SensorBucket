/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SensorGroup struct for SensorGroup
type SensorGroup struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Sensors []int64 `json:"sensors"`
}

// NewSensorGroup instantiates a new SensorGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorGroup(id int64, name string, description string, sensors []int64) *SensorGroup {
	this := SensorGroup{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Sensors = sensors
	return &this
}

// NewSensorGroupWithDefaults instantiates a new SensorGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorGroupWithDefaults() *SensorGroup {
	this := SensorGroup{}
	return &this
}

// GetId returns the Id field value
func (o *SensorGroup) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SensorGroup) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SensorGroup) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SensorGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SensorGroup) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SensorGroup) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *SensorGroup) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SensorGroup) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SensorGroup) SetDescription(v string) {
	o.Description = v
}

// GetSensors returns the Sensors field value
func (o *SensorGroup) GetSensors() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value
// and a boolean to check if the value has been set.
func (o *SensorGroup) GetSensorsOk() ([]int64, bool) {
	if o == nil {
    return nil, false
	}
	return o.Sensors, true
}

// SetSensors sets field value
func (o *SensorGroup) SetSensors(v []int64) {
	o.Sensors = v
}

func (o SensorGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["sensors"] = o.Sensors
	}
	return json.Marshal(toSerialize)
}

type NullableSensorGroup struct {
	value *SensorGroup
	isSet bool
}

func (v NullableSensorGroup) Get() *SensorGroup {
	return v.value
}

func (v *NullableSensorGroup) Set(val *SensorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorGroup(val *SensorGroup) *NullableSensorGroup {
	return &NullableSensorGroup{value: val, isSet: true}
}

func (v NullableSensorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


