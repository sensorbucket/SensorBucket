/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.2.5
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// ArchivedIngress struct for ArchivedIngress
type ArchivedIngress struct {
	TracingId string `json:"tracing_id"`
	RawMessage string `json:"raw_message"`
	ArchivedAt time.Time `json:"archived_at"`
	ExpiresAt time.Time `json:"expires_at"`
	IngressDto *IngressDTO `json:"ingress_dto,omitempty"`
}

// NewArchivedIngress instantiates a new ArchivedIngress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivedIngress(tracingId string, rawMessage string, archivedAt time.Time, expiresAt time.Time) *ArchivedIngress {
	this := ArchivedIngress{}
	this.TracingId = tracingId
	this.RawMessage = rawMessage
	this.ArchivedAt = archivedAt
	this.ExpiresAt = expiresAt
	return &this
}

// NewArchivedIngressWithDefaults instantiates a new ArchivedIngress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivedIngressWithDefaults() *ArchivedIngress {
	this := ArchivedIngress{}
	return &this
}

// GetTracingId returns the TracingId field value
func (o *ArchivedIngress) GetTracingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TracingId
}

// GetTracingIdOk returns a tuple with the TracingId field value
// and a boolean to check if the value has been set.
func (o *ArchivedIngress) GetTracingIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TracingId, true
}

// SetTracingId sets field value
func (o *ArchivedIngress) SetTracingId(v string) {
	o.TracingId = v
}

// GetRawMessage returns the RawMessage field value
func (o *ArchivedIngress) GetRawMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawMessage
}

// GetRawMessageOk returns a tuple with the RawMessage field value
// and a boolean to check if the value has been set.
func (o *ArchivedIngress) GetRawMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RawMessage, true
}

// SetRawMessage sets field value
func (o *ArchivedIngress) SetRawMessage(v string) {
	o.RawMessage = v
}

// GetArchivedAt returns the ArchivedAt field value
func (o *ArchivedIngress) GetArchivedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value
// and a boolean to check if the value has been set.
func (o *ArchivedIngress) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ArchivedAt, true
}

// SetArchivedAt sets field value
func (o *ArchivedIngress) SetArchivedAt(v time.Time) {
	o.ArchivedAt = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *ArchivedIngress) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *ArchivedIngress) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *ArchivedIngress) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetIngressDto returns the IngressDto field value if set, zero value otherwise.
func (o *ArchivedIngress) GetIngressDto() IngressDTO {
	if o == nil || isNil(o.IngressDto) {
		var ret IngressDTO
		return ret
	}
	return *o.IngressDto
}

// GetIngressDtoOk returns a tuple with the IngressDto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivedIngress) GetIngressDtoOk() (*IngressDTO, bool) {
	if o == nil || isNil(o.IngressDto) {
    return nil, false
	}
	return o.IngressDto, true
}

// HasIngressDto returns a boolean if a field has been set.
func (o *ArchivedIngress) HasIngressDto() bool {
	if o != nil && !isNil(o.IngressDto) {
		return true
	}

	return false
}

// SetIngressDto gets a reference to the given IngressDTO and assigns it to the IngressDto field.
func (o *ArchivedIngress) SetIngressDto(v IngressDTO) {
	o.IngressDto = &v
}

func (o ArchivedIngress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tracing_id"] = o.TracingId
	}
	if true {
		toSerialize["raw_message"] = o.RawMessage
	}
	if true {
		toSerialize["archived_at"] = o.ArchivedAt
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !isNil(o.IngressDto) {
		toSerialize["ingress_dto"] = o.IngressDto
	}
	return json.Marshal(toSerialize)
}

type NullableArchivedIngress struct {
	value *ArchivedIngress
	isSet bool
}

func (v NullableArchivedIngress) Get() *ArchivedIngress {
	return v.value
}

func (v *NullableArchivedIngress) Set(val *ArchivedIngress) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivedIngress) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivedIngress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivedIngress(val *ArchivedIngress) *NullableArchivedIngress {
	return &NullableArchivedIngress{value: val, isSet: true}
}

func (v NullableArchivedIngress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivedIngress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


