/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ListSensorGroups200ResponseAllOf struct for ListSensorGroups200ResponseAllOf
type ListSensorGroups200ResponseAllOf struct {
	Data []SensorGroup `json:"data,omitempty"`
}

// NewListSensorGroups200ResponseAllOf instantiates a new ListSensorGroups200ResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSensorGroups200ResponseAllOf() *ListSensorGroups200ResponseAllOf {
	this := ListSensorGroups200ResponseAllOf{}
	return &this
}

// NewListSensorGroups200ResponseAllOfWithDefaults instantiates a new ListSensorGroups200ResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSensorGroups200ResponseAllOfWithDefaults() *ListSensorGroups200ResponseAllOf {
	this := ListSensorGroups200ResponseAllOf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListSensorGroups200ResponseAllOf) GetData() []SensorGroup {
	if o == nil || isNil(o.Data) {
		var ret []SensorGroup
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSensorGroups200ResponseAllOf) GetDataOk() ([]SensorGroup, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListSensorGroups200ResponseAllOf) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []SensorGroup and assigns it to the Data field.
func (o *ListSensorGroups200ResponseAllOf) SetData(v []SensorGroup) {
	o.Data = v
}

func (o ListSensorGroups200ResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListSensorGroups200ResponseAllOf struct {
	value *ListSensorGroups200ResponseAllOf
	isSet bool
}

func (v NullableListSensorGroups200ResponseAllOf) Get() *ListSensorGroups200ResponseAllOf {
	return v.value
}

func (v *NullableListSensorGroups200ResponseAllOf) Set(val *ListSensorGroups200ResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableListSensorGroups200ResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableListSensorGroups200ResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSensorGroups200ResponseAllOf(val *ListSensorGroups200ResponseAllOf) *NullableListSensorGroups200ResponseAllOf {
	return &NullableListSensorGroups200ResponseAllOf{value: val, isSet: true}
}

func (v NullableListSensorGroups200ResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSensorGroups200ResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


