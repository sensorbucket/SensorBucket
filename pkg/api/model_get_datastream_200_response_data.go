/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// GetDatastream200ResponseData struct for GetDatastream200ResponseData
type GetDatastream200ResponseData struct {
	Datastream *Datastream `json:"datastream,omitempty"`
	Device *Device `json:"device,omitempty"`
	Sensor *Sensor `json:"sensor,omitempty"`
	MeasurementValue *int32 `json:"measurement_value,omitempty"`
	MeasurementTimestamp *time.Time `json:"measurement_timestamp,omitempty"`
}

// NewGetDatastream200ResponseData instantiates a new GetDatastream200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDatastream200ResponseData() *GetDatastream200ResponseData {
	this := GetDatastream200ResponseData{}
	return &this
}

// NewGetDatastream200ResponseDataWithDefaults instantiates a new GetDatastream200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDatastream200ResponseDataWithDefaults() *GetDatastream200ResponseData {
	this := GetDatastream200ResponseData{}
	return &this
}

// GetDatastream returns the Datastream field value if set, zero value otherwise.
func (o *GetDatastream200ResponseData) GetDatastream() Datastream {
	if o == nil || isNil(o.Datastream) {
		var ret Datastream
		return ret
	}
	return *o.Datastream
}

// GetDatastreamOk returns a tuple with the Datastream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatastream200ResponseData) GetDatastreamOk() (*Datastream, bool) {
	if o == nil || isNil(o.Datastream) {
    return nil, false
	}
	return o.Datastream, true
}

// HasDatastream returns a boolean if a field has been set.
func (o *GetDatastream200ResponseData) HasDatastream() bool {
	if o != nil && !isNil(o.Datastream) {
		return true
	}

	return false
}

// SetDatastream gets a reference to the given Datastream and assigns it to the Datastream field.
func (o *GetDatastream200ResponseData) SetDatastream(v Datastream) {
	o.Datastream = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *GetDatastream200ResponseData) GetDevice() Device {
	if o == nil || isNil(o.Device) {
		var ret Device
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatastream200ResponseData) GetDeviceOk() (*Device, bool) {
	if o == nil || isNil(o.Device) {
    return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *GetDatastream200ResponseData) HasDevice() bool {
	if o != nil && !isNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given Device and assigns it to the Device field.
func (o *GetDatastream200ResponseData) SetDevice(v Device) {
	o.Device = &v
}

// GetSensor returns the Sensor field value if set, zero value otherwise.
func (o *GetDatastream200ResponseData) GetSensor() Sensor {
	if o == nil || isNil(o.Sensor) {
		var ret Sensor
		return ret
	}
	return *o.Sensor
}

// GetSensorOk returns a tuple with the Sensor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatastream200ResponseData) GetSensorOk() (*Sensor, bool) {
	if o == nil || isNil(o.Sensor) {
    return nil, false
	}
	return o.Sensor, true
}

// HasSensor returns a boolean if a field has been set.
func (o *GetDatastream200ResponseData) HasSensor() bool {
	if o != nil && !isNil(o.Sensor) {
		return true
	}

	return false
}

// SetSensor gets a reference to the given Sensor and assigns it to the Sensor field.
func (o *GetDatastream200ResponseData) SetSensor(v Sensor) {
	o.Sensor = &v
}

// GetMeasurementValue returns the MeasurementValue field value if set, zero value otherwise.
func (o *GetDatastream200ResponseData) GetMeasurementValue() int32 {
	if o == nil || isNil(o.MeasurementValue) {
		var ret int32
		return ret
	}
	return *o.MeasurementValue
}

// GetMeasurementValueOk returns a tuple with the MeasurementValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatastream200ResponseData) GetMeasurementValueOk() (*int32, bool) {
	if o == nil || isNil(o.MeasurementValue) {
    return nil, false
	}
	return o.MeasurementValue, true
}

// HasMeasurementValue returns a boolean if a field has been set.
func (o *GetDatastream200ResponseData) HasMeasurementValue() bool {
	if o != nil && !isNil(o.MeasurementValue) {
		return true
	}

	return false
}

// SetMeasurementValue gets a reference to the given int32 and assigns it to the MeasurementValue field.
func (o *GetDatastream200ResponseData) SetMeasurementValue(v int32) {
	o.MeasurementValue = &v
}

// GetMeasurementTimestamp returns the MeasurementTimestamp field value if set, zero value otherwise.
func (o *GetDatastream200ResponseData) GetMeasurementTimestamp() time.Time {
	if o == nil || isNil(o.MeasurementTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.MeasurementTimestamp
}

// GetMeasurementTimestampOk returns a tuple with the MeasurementTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatastream200ResponseData) GetMeasurementTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.MeasurementTimestamp) {
    return nil, false
	}
	return o.MeasurementTimestamp, true
}

// HasMeasurementTimestamp returns a boolean if a field has been set.
func (o *GetDatastream200ResponseData) HasMeasurementTimestamp() bool {
	if o != nil && !isNil(o.MeasurementTimestamp) {
		return true
	}

	return false
}

// SetMeasurementTimestamp gets a reference to the given time.Time and assigns it to the MeasurementTimestamp field.
func (o *GetDatastream200ResponseData) SetMeasurementTimestamp(v time.Time) {
	o.MeasurementTimestamp = &v
}

func (o GetDatastream200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Datastream) {
		toSerialize["datastream"] = o.Datastream
	}
	if !isNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !isNil(o.Sensor) {
		toSerialize["sensor"] = o.Sensor
	}
	if !isNil(o.MeasurementValue) {
		toSerialize["measurement_value"] = o.MeasurementValue
	}
	if !isNil(o.MeasurementTimestamp) {
		toSerialize["measurement_timestamp"] = o.MeasurementTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableGetDatastream200ResponseData struct {
	value *GetDatastream200ResponseData
	isSet bool
}

func (v NullableGetDatastream200ResponseData) Get() *GetDatastream200ResponseData {
	return v.value
}

func (v *NullableGetDatastream200ResponseData) Set(val *GetDatastream200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDatastream200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDatastream200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDatastream200ResponseData(val *GetDatastream200ResponseData) *NullableGetDatastream200ResponseData {
	return &NullableGetDatastream200ResponseData{value: val, isSet: true}
}

func (v NullableGetDatastream200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDatastream200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


