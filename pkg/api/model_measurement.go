/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Measurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Measurement{}

// Measurement struct for Measurement
type Measurement struct {
	UplinkMessageId string `json:"uplink_message_id"`
	DeviceId float32 `json:"device_id"`
	DeviceCode string `json:"device_code"`
	DeviceDescription *string `json:"device_description,omitempty"`
	DeviceLatitude *float32 `json:"device_latitude,omitempty"`
	DeviceLongitude *float32 `json:"device_longitude,omitempty"`
	DeviceAltitude *float32 `json:"device_altitude,omitempty"`
	DeviceLocationDescription *string `json:"device_location_description,omitempty"`
	DeviceProperties map[string]interface{} `json:"device_properties,omitempty"`
	DeviceState float32 `json:"device_state"`
	SensorId float32 `json:"sensor_id"`
	SensorCode string `json:"sensor_code"`
	SensorDescription *string `json:"sensor_description,omitempty"`
	SensorExternalId string `json:"sensor_external_id"`
	SensorProperties map[string]interface{} `json:"sensor_properties,omitempty"`
	SensorBrand *string `json:"sensor_brand,omitempty"`
	SensorArchiveTime *float32 `json:"sensor_archive_time,omitempty"`
	DatastreamId string `json:"datastream_id"`
	DatastreamDescription *string `json:"datastream_description,omitempty"`
	DatastreamObservedProperty string `json:"datastream_observed_property"`
	DatastreamUnitOfMeasurement string `json:"datastream_unit_of_measurement"`
	MeasurementTimestamp string `json:"measurement_timestamp"`
	MeasurementValue float32 `json:"measurement_value"`
	MeasurementLatitude *float32 `json:"measurement_latitude,omitempty"`
	MeasurementLongitude *float32 `json:"measurement_longitude,omitempty"`
	MeasurementAltitude *float32 `json:"measurement_altitude,omitempty"`
	MeasurementProperties map[string]interface{} `json:"measurement_properties,omitempty"`
	MeasurementExpiration string `json:"measurement_expiration"`
	CreatedAt *string `json:"created_at,omitempty"`
}

// NewMeasurement instantiates a new Measurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurement(uplinkMessageId string, deviceId float32, deviceCode string, deviceState float32, sensorId float32, sensorCode string, sensorExternalId string, datastreamId string, datastreamObservedProperty string, datastreamUnitOfMeasurement string, measurementTimestamp string, measurementValue float32, measurementExpiration string) *Measurement {
	this := Measurement{}
	this.UplinkMessageId = uplinkMessageId
	this.DeviceId = deviceId
	this.DeviceCode = deviceCode
	this.DeviceState = deviceState
	this.SensorId = sensorId
	this.SensorCode = sensorCode
	this.SensorExternalId = sensorExternalId
	this.DatastreamId = datastreamId
	this.DatastreamObservedProperty = datastreamObservedProperty
	this.DatastreamUnitOfMeasurement = datastreamUnitOfMeasurement
	this.MeasurementTimestamp = measurementTimestamp
	this.MeasurementValue = measurementValue
	this.MeasurementExpiration = measurementExpiration
	return &this
}

// NewMeasurementWithDefaults instantiates a new Measurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementWithDefaults() *Measurement {
	this := Measurement{}
	return &this
}

// GetUplinkMessageId returns the UplinkMessageId field value
func (o *Measurement) GetUplinkMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplinkMessageId
}

// GetUplinkMessageIdOk returns a tuple with the UplinkMessageId field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetUplinkMessageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplinkMessageId, true
}

// SetUplinkMessageId sets field value
func (o *Measurement) SetUplinkMessageId(v string) {
	o.UplinkMessageId = v
}

// GetDeviceId returns the DeviceId field value
func (o *Measurement) GetDeviceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *Measurement) SetDeviceId(v float32) {
	o.DeviceId = v
}

// GetDeviceCode returns the DeviceCode field value
func (o *Measurement) GetDeviceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceCode
}

// GetDeviceCodeOk returns a tuple with the DeviceCode field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceCode, true
}

// SetDeviceCode sets field value
func (o *Measurement) SetDeviceCode(v string) {
	o.DeviceCode = v
}

// GetDeviceDescription returns the DeviceDescription field value if set, zero value otherwise.
func (o *Measurement) GetDeviceDescription() string {
	if o == nil || IsNil(o.DeviceDescription) {
		var ret string
		return ret
	}
	return *o.DeviceDescription
}

// GetDeviceDescriptionOk returns a tuple with the DeviceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceDescription) {
		return nil, false
	}
	return o.DeviceDescription, true
}

// HasDeviceDescription returns a boolean if a field has been set.
func (o *Measurement) HasDeviceDescription() bool {
	if o != nil && !IsNil(o.DeviceDescription) {
		return true
	}

	return false
}

// SetDeviceDescription gets a reference to the given string and assigns it to the DeviceDescription field.
func (o *Measurement) SetDeviceDescription(v string) {
	o.DeviceDescription = &v
}

// GetDeviceLatitude returns the DeviceLatitude field value if set, zero value otherwise.
func (o *Measurement) GetDeviceLatitude() float32 {
	if o == nil || IsNil(o.DeviceLatitude) {
		var ret float32
		return ret
	}
	return *o.DeviceLatitude
}

// GetDeviceLatitudeOk returns a tuple with the DeviceLatitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.DeviceLatitude) {
		return nil, false
	}
	return o.DeviceLatitude, true
}

// HasDeviceLatitude returns a boolean if a field has been set.
func (o *Measurement) HasDeviceLatitude() bool {
	if o != nil && !IsNil(o.DeviceLatitude) {
		return true
	}

	return false
}

// SetDeviceLatitude gets a reference to the given float32 and assigns it to the DeviceLatitude field.
func (o *Measurement) SetDeviceLatitude(v float32) {
	o.DeviceLatitude = &v
}

// GetDeviceLongitude returns the DeviceLongitude field value if set, zero value otherwise.
func (o *Measurement) GetDeviceLongitude() float32 {
	if o == nil || IsNil(o.DeviceLongitude) {
		var ret float32
		return ret
	}
	return *o.DeviceLongitude
}

// GetDeviceLongitudeOk returns a tuple with the DeviceLongitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.DeviceLongitude) {
		return nil, false
	}
	return o.DeviceLongitude, true
}

// HasDeviceLongitude returns a boolean if a field has been set.
func (o *Measurement) HasDeviceLongitude() bool {
	if o != nil && !IsNil(o.DeviceLongitude) {
		return true
	}

	return false
}

// SetDeviceLongitude gets a reference to the given float32 and assigns it to the DeviceLongitude field.
func (o *Measurement) SetDeviceLongitude(v float32) {
	o.DeviceLongitude = &v
}

// GetDeviceAltitude returns the DeviceAltitude field value if set, zero value otherwise.
func (o *Measurement) GetDeviceAltitude() float32 {
	if o == nil || IsNil(o.DeviceAltitude) {
		var ret float32
		return ret
	}
	return *o.DeviceAltitude
}

// GetDeviceAltitudeOk returns a tuple with the DeviceAltitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceAltitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.DeviceAltitude) {
		return nil, false
	}
	return o.DeviceAltitude, true
}

// HasDeviceAltitude returns a boolean if a field has been set.
func (o *Measurement) HasDeviceAltitude() bool {
	if o != nil && !IsNil(o.DeviceAltitude) {
		return true
	}

	return false
}

// SetDeviceAltitude gets a reference to the given float32 and assigns it to the DeviceAltitude field.
func (o *Measurement) SetDeviceAltitude(v float32) {
	o.DeviceAltitude = &v
}

// GetDeviceLocationDescription returns the DeviceLocationDescription field value if set, zero value otherwise.
func (o *Measurement) GetDeviceLocationDescription() string {
	if o == nil || IsNil(o.DeviceLocationDescription) {
		var ret string
		return ret
	}
	return *o.DeviceLocationDescription
}

// GetDeviceLocationDescriptionOk returns a tuple with the DeviceLocationDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceLocationDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocationDescription) {
		return nil, false
	}
	return o.DeviceLocationDescription, true
}

// HasDeviceLocationDescription returns a boolean if a field has been set.
func (o *Measurement) HasDeviceLocationDescription() bool {
	if o != nil && !IsNil(o.DeviceLocationDescription) {
		return true
	}

	return false
}

// SetDeviceLocationDescription gets a reference to the given string and assigns it to the DeviceLocationDescription field.
func (o *Measurement) SetDeviceLocationDescription(v string) {
	o.DeviceLocationDescription = &v
}

// GetDeviceProperties returns the DeviceProperties field value if set, zero value otherwise.
func (o *Measurement) GetDeviceProperties() map[string]interface{} {
	if o == nil || IsNil(o.DeviceProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.DeviceProperties
}

// GetDevicePropertiesOk returns a tuple with the DeviceProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDevicePropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DeviceProperties) {
		return map[string]interface{}{}, false
	}
	return o.DeviceProperties, true
}

// HasDeviceProperties returns a boolean if a field has been set.
func (o *Measurement) HasDeviceProperties() bool {
	if o != nil && !IsNil(o.DeviceProperties) {
		return true
	}

	return false
}

// SetDeviceProperties gets a reference to the given map[string]interface{} and assigns it to the DeviceProperties field.
func (o *Measurement) SetDeviceProperties(v map[string]interface{}) {
	o.DeviceProperties = v
}

// GetDeviceState returns the DeviceState field value
func (o *Measurement) GetDeviceState() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeviceState
}

// GetDeviceStateOk returns a tuple with the DeviceState field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDeviceStateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceState, true
}

// SetDeviceState sets field value
func (o *Measurement) SetDeviceState(v float32) {
	o.DeviceState = v
}

// GetSensorId returns the SensorId field value
func (o *Measurement) GetSensorId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorId, true
}

// SetSensorId sets field value
func (o *Measurement) SetSensorId(v float32) {
	o.SensorId = v
}

// GetSensorCode returns the SensorCode field value
func (o *Measurement) GetSensorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorCode
}

// GetSensorCodeOk returns a tuple with the SensorCode field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorCode, true
}

// SetSensorCode sets field value
func (o *Measurement) SetSensorCode(v string) {
	o.SensorCode = v
}

// GetSensorDescription returns the SensorDescription field value if set, zero value otherwise.
func (o *Measurement) GetSensorDescription() string {
	if o == nil || IsNil(o.SensorDescription) {
		var ret string
		return ret
	}
	return *o.SensorDescription
}

// GetSensorDescriptionOk returns a tuple with the SensorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SensorDescription) {
		return nil, false
	}
	return o.SensorDescription, true
}

// HasSensorDescription returns a boolean if a field has been set.
func (o *Measurement) HasSensorDescription() bool {
	if o != nil && !IsNil(o.SensorDescription) {
		return true
	}

	return false
}

// SetSensorDescription gets a reference to the given string and assigns it to the SensorDescription field.
func (o *Measurement) SetSensorDescription(v string) {
	o.SensorDescription = &v
}

// GetSensorExternalId returns the SensorExternalId field value
func (o *Measurement) GetSensorExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorExternalId
}

// GetSensorExternalIdOk returns a tuple with the SensorExternalId field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorExternalId, true
}

// SetSensorExternalId sets field value
func (o *Measurement) SetSensorExternalId(v string) {
	o.SensorExternalId = v
}

// GetSensorProperties returns the SensorProperties field value if set, zero value otherwise.
func (o *Measurement) GetSensorProperties() map[string]interface{} {
	if o == nil || IsNil(o.SensorProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.SensorProperties
}

// GetSensorPropertiesOk returns a tuple with the SensorProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SensorProperties) {
		return map[string]interface{}{}, false
	}
	return o.SensorProperties, true
}

// HasSensorProperties returns a boolean if a field has been set.
func (o *Measurement) HasSensorProperties() bool {
	if o != nil && !IsNil(o.SensorProperties) {
		return true
	}

	return false
}

// SetSensorProperties gets a reference to the given map[string]interface{} and assigns it to the SensorProperties field.
func (o *Measurement) SetSensorProperties(v map[string]interface{}) {
	o.SensorProperties = v
}

// GetSensorBrand returns the SensorBrand field value if set, zero value otherwise.
func (o *Measurement) GetSensorBrand() string {
	if o == nil || IsNil(o.SensorBrand) {
		var ret string
		return ret
	}
	return *o.SensorBrand
}

// GetSensorBrandOk returns a tuple with the SensorBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorBrandOk() (*string, bool) {
	if o == nil || IsNil(o.SensorBrand) {
		return nil, false
	}
	return o.SensorBrand, true
}

// HasSensorBrand returns a boolean if a field has been set.
func (o *Measurement) HasSensorBrand() bool {
	if o != nil && !IsNil(o.SensorBrand) {
		return true
	}

	return false
}

// SetSensorBrand gets a reference to the given string and assigns it to the SensorBrand field.
func (o *Measurement) SetSensorBrand(v string) {
	o.SensorBrand = &v
}

// GetSensorArchiveTime returns the SensorArchiveTime field value if set, zero value otherwise.
func (o *Measurement) GetSensorArchiveTime() float32 {
	if o == nil || IsNil(o.SensorArchiveTime) {
		var ret float32
		return ret
	}
	return *o.SensorArchiveTime
}

// GetSensorArchiveTimeOk returns a tuple with the SensorArchiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetSensorArchiveTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SensorArchiveTime) {
		return nil, false
	}
	return o.SensorArchiveTime, true
}

// HasSensorArchiveTime returns a boolean if a field has been set.
func (o *Measurement) HasSensorArchiveTime() bool {
	if o != nil && !IsNil(o.SensorArchiveTime) {
		return true
	}

	return false
}

// SetSensorArchiveTime gets a reference to the given float32 and assigns it to the SensorArchiveTime field.
func (o *Measurement) SetSensorArchiveTime(v float32) {
	o.SensorArchiveTime = &v
}

// GetDatastreamId returns the DatastreamId field value
func (o *Measurement) GetDatastreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatastreamId
}

// GetDatastreamIdOk returns a tuple with the DatastreamId field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDatastreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatastreamId, true
}

// SetDatastreamId sets field value
func (o *Measurement) SetDatastreamId(v string) {
	o.DatastreamId = v
}

// GetDatastreamDescription returns the DatastreamDescription field value if set, zero value otherwise.
func (o *Measurement) GetDatastreamDescription() string {
	if o == nil || IsNil(o.DatastreamDescription) {
		var ret string
		return ret
	}
	return *o.DatastreamDescription
}

// GetDatastreamDescriptionOk returns a tuple with the DatastreamDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetDatastreamDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DatastreamDescription) {
		return nil, false
	}
	return o.DatastreamDescription, true
}

// HasDatastreamDescription returns a boolean if a field has been set.
func (o *Measurement) HasDatastreamDescription() bool {
	if o != nil && !IsNil(o.DatastreamDescription) {
		return true
	}

	return false
}

// SetDatastreamDescription gets a reference to the given string and assigns it to the DatastreamDescription field.
func (o *Measurement) SetDatastreamDescription(v string) {
	o.DatastreamDescription = &v
}

// GetDatastreamObservedProperty returns the DatastreamObservedProperty field value
func (o *Measurement) GetDatastreamObservedProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatastreamObservedProperty
}

// GetDatastreamObservedPropertyOk returns a tuple with the DatastreamObservedProperty field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDatastreamObservedPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatastreamObservedProperty, true
}

// SetDatastreamObservedProperty sets field value
func (o *Measurement) SetDatastreamObservedProperty(v string) {
	o.DatastreamObservedProperty = v
}

// GetDatastreamUnitOfMeasurement returns the DatastreamUnitOfMeasurement field value
func (o *Measurement) GetDatastreamUnitOfMeasurement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatastreamUnitOfMeasurement
}

// GetDatastreamUnitOfMeasurementOk returns a tuple with the DatastreamUnitOfMeasurement field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetDatastreamUnitOfMeasurementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatastreamUnitOfMeasurement, true
}

// SetDatastreamUnitOfMeasurement sets field value
func (o *Measurement) SetDatastreamUnitOfMeasurement(v string) {
	o.DatastreamUnitOfMeasurement = v
}

// GetMeasurementTimestamp returns the MeasurementTimestamp field value
func (o *Measurement) GetMeasurementTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementTimestamp
}

// GetMeasurementTimestampOk returns a tuple with the MeasurementTimestamp field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementTimestamp, true
}

// SetMeasurementTimestamp sets field value
func (o *Measurement) SetMeasurementTimestamp(v string) {
	o.MeasurementTimestamp = v
}

// GetMeasurementValue returns the MeasurementValue field value
func (o *Measurement) GetMeasurementValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MeasurementValue
}

// GetMeasurementValueOk returns a tuple with the MeasurementValue field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementValue, true
}

// SetMeasurementValue sets field value
func (o *Measurement) SetMeasurementValue(v float32) {
	o.MeasurementValue = v
}

// GetMeasurementLatitude returns the MeasurementLatitude field value if set, zero value otherwise.
func (o *Measurement) GetMeasurementLatitude() float32 {
	if o == nil || IsNil(o.MeasurementLatitude) {
		var ret float32
		return ret
	}
	return *o.MeasurementLatitude
}

// GetMeasurementLatitudeOk returns a tuple with the MeasurementLatitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.MeasurementLatitude) {
		return nil, false
	}
	return o.MeasurementLatitude, true
}

// HasMeasurementLatitude returns a boolean if a field has been set.
func (o *Measurement) HasMeasurementLatitude() bool {
	if o != nil && !IsNil(o.MeasurementLatitude) {
		return true
	}

	return false
}

// SetMeasurementLatitude gets a reference to the given float32 and assigns it to the MeasurementLatitude field.
func (o *Measurement) SetMeasurementLatitude(v float32) {
	o.MeasurementLatitude = &v
}

// GetMeasurementLongitude returns the MeasurementLongitude field value if set, zero value otherwise.
func (o *Measurement) GetMeasurementLongitude() float32 {
	if o == nil || IsNil(o.MeasurementLongitude) {
		var ret float32
		return ret
	}
	return *o.MeasurementLongitude
}

// GetMeasurementLongitudeOk returns a tuple with the MeasurementLongitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.MeasurementLongitude) {
		return nil, false
	}
	return o.MeasurementLongitude, true
}

// HasMeasurementLongitude returns a boolean if a field has been set.
func (o *Measurement) HasMeasurementLongitude() bool {
	if o != nil && !IsNil(o.MeasurementLongitude) {
		return true
	}

	return false
}

// SetMeasurementLongitude gets a reference to the given float32 and assigns it to the MeasurementLongitude field.
func (o *Measurement) SetMeasurementLongitude(v float32) {
	o.MeasurementLongitude = &v
}

// GetMeasurementAltitude returns the MeasurementAltitude field value if set, zero value otherwise.
func (o *Measurement) GetMeasurementAltitude() float32 {
	if o == nil || IsNil(o.MeasurementAltitude) {
		var ret float32
		return ret
	}
	return *o.MeasurementAltitude
}

// GetMeasurementAltitudeOk returns a tuple with the MeasurementAltitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementAltitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.MeasurementAltitude) {
		return nil, false
	}
	return o.MeasurementAltitude, true
}

// HasMeasurementAltitude returns a boolean if a field has been set.
func (o *Measurement) HasMeasurementAltitude() bool {
	if o != nil && !IsNil(o.MeasurementAltitude) {
		return true
	}

	return false
}

// SetMeasurementAltitude gets a reference to the given float32 and assigns it to the MeasurementAltitude field.
func (o *Measurement) SetMeasurementAltitude(v float32) {
	o.MeasurementAltitude = &v
}

// GetMeasurementProperties returns the MeasurementProperties field value if set, zero value otherwise.
func (o *Measurement) GetMeasurementProperties() map[string]interface{} {
	if o == nil || IsNil(o.MeasurementProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.MeasurementProperties
}

// GetMeasurementPropertiesOk returns a tuple with the MeasurementProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MeasurementProperties) {
		return map[string]interface{}{}, false
	}
	return o.MeasurementProperties, true
}

// HasMeasurementProperties returns a boolean if a field has been set.
func (o *Measurement) HasMeasurementProperties() bool {
	if o != nil && !IsNil(o.MeasurementProperties) {
		return true
	}

	return false
}

// SetMeasurementProperties gets a reference to the given map[string]interface{} and assigns it to the MeasurementProperties field.
func (o *Measurement) SetMeasurementProperties(v map[string]interface{}) {
	o.MeasurementProperties = v
}

// GetMeasurementExpiration returns the MeasurementExpiration field value
func (o *Measurement) GetMeasurementExpiration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementExpiration
}

// GetMeasurementExpirationOk returns a tuple with the MeasurementExpiration field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetMeasurementExpirationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementExpiration, true
}

// SetMeasurementExpiration sets field value
func (o *Measurement) SetMeasurementExpiration(v string) {
	o.MeasurementExpiration = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Measurement) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Measurement) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Measurement) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o Measurement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Measurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uplink_message_id"] = o.UplinkMessageId
	toSerialize["device_id"] = o.DeviceId
	toSerialize["device_code"] = o.DeviceCode
	if !IsNil(o.DeviceDescription) {
		toSerialize["device_description"] = o.DeviceDescription
	}
	if !IsNil(o.DeviceLatitude) {
		toSerialize["device_latitude"] = o.DeviceLatitude
	}
	if !IsNil(o.DeviceLongitude) {
		toSerialize["device_longitude"] = o.DeviceLongitude
	}
	if !IsNil(o.DeviceAltitude) {
		toSerialize["device_altitude"] = o.DeviceAltitude
	}
	if !IsNil(o.DeviceLocationDescription) {
		toSerialize["device_location_description"] = o.DeviceLocationDescription
	}
	if !IsNil(o.DeviceProperties) {
		toSerialize["device_properties"] = o.DeviceProperties
	}
	toSerialize["device_state"] = o.DeviceState
	toSerialize["sensor_id"] = o.SensorId
	toSerialize["sensor_code"] = o.SensorCode
	if !IsNil(o.SensorDescription) {
		toSerialize["sensor_description"] = o.SensorDescription
	}
	toSerialize["sensor_external_id"] = o.SensorExternalId
	if !IsNil(o.SensorProperties) {
		toSerialize["sensor_properties"] = o.SensorProperties
	}
	if !IsNil(o.SensorBrand) {
		toSerialize["sensor_brand"] = o.SensorBrand
	}
	if !IsNil(o.SensorArchiveTime) {
		toSerialize["sensor_archive_time"] = o.SensorArchiveTime
	}
	toSerialize["datastream_id"] = o.DatastreamId
	if !IsNil(o.DatastreamDescription) {
		toSerialize["datastream_description"] = o.DatastreamDescription
	}
	toSerialize["datastream_observed_property"] = o.DatastreamObservedProperty
	toSerialize["datastream_unit_of_measurement"] = o.DatastreamUnitOfMeasurement
	toSerialize["measurement_timestamp"] = o.MeasurementTimestamp
	toSerialize["measurement_value"] = o.MeasurementValue
	if !IsNil(o.MeasurementLatitude) {
		toSerialize["measurement_latitude"] = o.MeasurementLatitude
	}
	if !IsNil(o.MeasurementLongitude) {
		toSerialize["measurement_longitude"] = o.MeasurementLongitude
	}
	if !IsNil(o.MeasurementAltitude) {
		toSerialize["measurement_altitude"] = o.MeasurementAltitude
	}
	if !IsNil(o.MeasurementProperties) {
		toSerialize["measurement_properties"] = o.MeasurementProperties
	}
	toSerialize["measurement_expiration"] = o.MeasurementExpiration
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableMeasurement struct {
	value *Measurement
	isSet bool
}

func (v NullableMeasurement) Get() *Measurement {
	return v.value
}

func (v *NullableMeasurement) Set(val *Measurement) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurement) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurement(val *Measurement) *NullableMeasurement {
	return &NullableMeasurement{value: val, isSet: true}
}

func (v NullableMeasurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


