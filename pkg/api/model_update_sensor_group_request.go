/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UpdateSensorGroupRequest struct for UpdateSensorGroupRequest
type UpdateSensorGroupRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewUpdateSensorGroupRequest instantiates a new UpdateSensorGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSensorGroupRequest() *UpdateSensorGroupRequest {
	this := UpdateSensorGroupRequest{}
	return &this
}

// NewUpdateSensorGroupRequestWithDefaults instantiates a new UpdateSensorGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSensorGroupRequestWithDefaults() *UpdateSensorGroupRequest {
	this := UpdateSensorGroupRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateSensorGroupRequest) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateSensorGroupRequest) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateSensorGroupRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateSensorGroupRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorGroupRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateSensorGroupRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateSensorGroupRequest) SetDescription(v string) {
	o.Description = &v
}

func (o UpdateSensorGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateSensorGroupRequest struct {
	value *UpdateSensorGroupRequest
	isSet bool
}

func (v NullableUpdateSensorGroupRequest) Get() *UpdateSensorGroupRequest {
	return v.value
}

func (v *NullableUpdateSensorGroupRequest) Set(val *UpdateSensorGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSensorGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSensorGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSensorGroupRequest(val *UpdateSensorGroupRequest) *NullableUpdateSensorGroupRequest {
	return &NullableUpdateSensorGroupRequest{value: val, isSet: true}
}

func (v NullableUpdateSensorGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSensorGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


