/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GetSensorGroup200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSensorGroup200Response{}

// GetSensorGroup200Response struct for GetSensorGroup200Response
type GetSensorGroup200Response struct {
	Message *string `json:"message,omitempty"`
	Data *SensorGroup `json:"data,omitempty"`
}

// NewGetSensorGroup200Response instantiates a new GetSensorGroup200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSensorGroup200Response() *GetSensorGroup200Response {
	this := GetSensorGroup200Response{}
	return &this
}

// NewGetSensorGroup200ResponseWithDefaults instantiates a new GetSensorGroup200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSensorGroup200ResponseWithDefaults() *GetSensorGroup200Response {
	this := GetSensorGroup200Response{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetSensorGroup200Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSensorGroup200Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetSensorGroup200Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GetSensorGroup200Response) SetMessage(v string) {
	o.Message = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetSensorGroup200Response) GetData() SensorGroup {
	if o == nil || IsNil(o.Data) {
		var ret SensorGroup
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSensorGroup200Response) GetDataOk() (*SensorGroup, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetSensorGroup200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given SensorGroup and assigns it to the Data field.
func (o *GetSensorGroup200Response) SetData(v SensorGroup) {
	o.Data = &v
}

func (o GetSensorGroup200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSensorGroup200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableGetSensorGroup200Response struct {
	value *GetSensorGroup200Response
	isSet bool
}

func (v NullableGetSensorGroup200Response) Get() *GetSensorGroup200Response {
	return v.value
}

func (v *NullableGetSensorGroup200Response) Set(val *GetSensorGroup200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSensorGroup200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSensorGroup200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSensorGroup200Response(val *GetSensorGroup200Response) *NullableGetSensorGroup200Response {
	return &NullableGetSensorGroup200Response{value: val, isSet: true}
}

func (v NullableGetSensorGroup200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSensorGroup200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


