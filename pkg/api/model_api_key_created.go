/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApiKeyCreated struct for ApiKeyCreated
type ApiKeyCreated struct {
	ApiKey string `json:"api_key"`
}

// NewApiKeyCreated instantiates a new ApiKeyCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyCreated(apiKey string) *ApiKeyCreated {
	this := ApiKeyCreated{}
	this.ApiKey = apiKey
	return &this
}

// NewApiKeyCreatedWithDefaults instantiates a new ApiKeyCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyCreatedWithDefaults() *ApiKeyCreated {
	this := ApiKeyCreated{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *ApiKeyCreated) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *ApiKeyCreated) GetApiKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *ApiKeyCreated) SetApiKey(v string) {
	o.ApiKey = v
}

func (o ApiKeyCreated) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_key"] = o.ApiKey
	}
	return json.Marshal(toSerialize)
}

type NullableApiKeyCreated struct {
	value *ApiKeyCreated
	isSet bool
}

func (v NullableApiKeyCreated) Get() *ApiKeyCreated {
	return v.value
}

func (v *NullableApiKeyCreated) Set(val *ApiKeyCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyCreated(val *ApiKeyCreated) *NullableApiKeyCreated {
	return &NullableApiKeyCreated{value: val, isSet: true}
}

func (v NullableApiKeyCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


