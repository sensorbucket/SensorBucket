/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// Device struct for Device
type Device struct {
	Id int64 `json:"id"`
	Code string `json:"code"`
	State int32 `json:"state"`
	Description string `json:"description"`
	Organisation string `json:"organisation"`
	Properties map[string]interface{} `json:"properties"`
	Altitude *float64 `json:"altitude,omitempty"`
	Latitude *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
	LocationDescription *string `json:"location_description,omitempty"`
	Sensors []Sensor `json:"sensors"`
	CreatedAt time.Time `json:"created_at"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(id int64, code string, state int32, description string, organisation string, properties map[string]interface{}, sensors []Sensor, createdAt time.Time) *Device {
	this := Device{}
	this.Id = id
	this.Code = code
	this.State = state
	this.Description = description
	this.Organisation = organisation
	this.Properties = properties
	this.Sensors = sensors
	this.CreatedAt = createdAt
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetId returns the Id field value
func (o *Device) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v int64) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *Device) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Device) GetCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Device) SetCode(v string) {
	o.Code = v
}

// GetState returns the State field value
func (o *Device) GetState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Device) GetStateOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Device) SetState(v int32) {
	o.State = v
}

// GetDescription returns the Description field value
func (o *Device) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Device) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Device) SetDescription(v string) {
	o.Description = v
}

// GetOrganisation returns the Organisation field value
func (o *Device) GetOrganisation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organisation
}

// GetOrganisationOk returns a tuple with the Organisation field value
// and a boolean to check if the value has been set.
func (o *Device) GetOrganisationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Organisation, true
}

// SetOrganisation sets field value
func (o *Device) SetOrganisation(v string) {
	o.Organisation = v
}

// GetProperties returns the Properties field value
func (o *Device) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *Device) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *Device) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *Device) GetAltitude() float64 {
	if o == nil || isNil(o.Altitude) {
		var ret float64
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetAltitudeOk() (*float64, bool) {
	if o == nil || isNil(o.Altitude) {
    return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *Device) HasAltitude() bool {
	if o != nil && !isNil(o.Altitude) {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float64 and assigns it to the Altitude field.
func (o *Device) SetAltitude(v float64) {
	o.Altitude = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *Device) GetLatitude() float64 {
	if o == nil || isNil(o.Latitude) {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLatitudeOk() (*float64, bool) {
	if o == nil || isNil(o.Latitude) {
    return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *Device) HasLatitude() bool {
	if o != nil && !isNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *Device) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *Device) GetLongitude() float64 {
	if o == nil || isNil(o.Longitude) {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLongitudeOk() (*float64, bool) {
	if o == nil || isNil(o.Longitude) {
    return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *Device) HasLongitude() bool {
	if o != nil && !isNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *Device) SetLongitude(v float64) {
	o.Longitude = &v
}

// GetLocationDescription returns the LocationDescription field value if set, zero value otherwise.
func (o *Device) GetLocationDescription() string {
	if o == nil || isNil(o.LocationDescription) {
		var ret string
		return ret
	}
	return *o.LocationDescription
}

// GetLocationDescriptionOk returns a tuple with the LocationDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetLocationDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.LocationDescription) {
    return nil, false
	}
	return o.LocationDescription, true
}

// HasLocationDescription returns a boolean if a field has been set.
func (o *Device) HasLocationDescription() bool {
	if o != nil && !isNil(o.LocationDescription) {
		return true
	}

	return false
}

// SetLocationDescription gets a reference to the given string and assigns it to the LocationDescription field.
func (o *Device) SetLocationDescription(v string) {
	o.LocationDescription = &v
}

// GetSensors returns the Sensors field value
func (o *Device) GetSensors() []Sensor {
	if o == nil {
		var ret []Sensor
		return ret
	}

	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value
// and a boolean to check if the value has been set.
func (o *Device) GetSensorsOk() ([]Sensor, bool) {
	if o == nil {
    return nil, false
	}
	return o.Sensors, true
}

// SetSensors sets field value
func (o *Device) SetSensors(v []Sensor) {
	o.Sensors = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Device) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Device) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["organisation"] = o.Organisation
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.Altitude) {
		toSerialize["altitude"] = o.Altitude
	}
	if !isNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !isNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !isNil(o.LocationDescription) {
		toSerialize["location_description"] = o.LocationDescription
	}
	if true {
		toSerialize["sensors"] = o.Sensors
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


