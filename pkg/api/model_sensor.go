/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the Sensor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sensor{}

// Sensor struct for Sensor
type Sensor struct {
	Id *float32 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"external_id,omitempty"`
	Brand *string `json:"brand,omitempty"`
	ArchiveTime *float32 `json:"archive_time,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSensor instantiates a new Sensor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensor() *Sensor {
	this := Sensor{}
	return &this
}

// NewSensorWithDefaults instantiates a new Sensor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorWithDefaults() *Sensor {
	this := Sensor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sensor) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sensor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *Sensor) SetId(v float32) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Sensor) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Sensor) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Sensor) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Sensor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Sensor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Sensor) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Sensor) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Sensor) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Sensor) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *Sensor) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *Sensor) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *Sensor) SetBrand(v string) {
	o.Brand = &v
}

// GetArchiveTime returns the ArchiveTime field value if set, zero value otherwise.
func (o *Sensor) GetArchiveTime() float32 {
	if o == nil || IsNil(o.ArchiveTime) {
		var ret float32
		return ret
	}
	return *o.ArchiveTime
}

// GetArchiveTimeOk returns a tuple with the ArchiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetArchiveTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ArchiveTime) {
		return nil, false
	}
	return o.ArchiveTime, true
}

// HasArchiveTime returns a boolean if a field has been set.
func (o *Sensor) HasArchiveTime() bool {
	if o != nil && !IsNil(o.ArchiveTime) {
		return true
	}

	return false
}

// SetArchiveTime gets a reference to the given float32 and assigns it to the ArchiveTime field.
func (o *Sensor) SetArchiveTime(v float32) {
	o.ArchiveTime = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Sensor) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Sensor) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *Sensor) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Sensor) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Sensor) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Sensor) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o Sensor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sensor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.ArchiveTime) {
		toSerialize["archive_time"] = o.ArchiveTime
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableSensor struct {
	value *Sensor
	isSet bool
}

func (v NullableSensor) Get() *Sensor {
	return v.value
}

func (v *NullableSensor) Set(val *Sensor) {
	v.value = val
	v.isSet = true
}

func (v NullableSensor) IsSet() bool {
	return v.isSet
}

func (v *NullableSensor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensor(val *Sensor) *NullableSensor {
	return &NullableSensor{value: val, isSet: true}
}

func (v NullableSensor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


