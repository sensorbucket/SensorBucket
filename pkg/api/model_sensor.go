/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// Sensor struct for Sensor
type Sensor struct {
	Id int64 `json:"id"`
	DeviceId int64 `json:"device_id"`
	Code string `json:"code"`
	Description string `json:"description"`
	ExternalId string `json:"external_id"`
	Brand string `json:"brand"`
	ArchiveTime *int32 `json:"archive_time,omitempty"`
	Properties map[string]interface{} `json:"properties"`
	CreatedAt time.Time `json:"created_at"`
}

// NewSensor instantiates a new Sensor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensor(id int64, deviceId int64, code string, description string, externalId string, brand string, properties map[string]interface{}, createdAt time.Time) *Sensor {
	this := Sensor{}
	this.Id = id
	this.DeviceId = deviceId
	this.Code = code
	this.Description = description
	this.ExternalId = externalId
	this.Brand = brand
	this.Properties = properties
	this.CreatedAt = createdAt
	return &this
}

// NewSensorWithDefaults instantiates a new Sensor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorWithDefaults() *Sensor {
	this := Sensor{}
	return &this
}

// GetId returns the Id field value
func (o *Sensor) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Sensor) SetId(v int64) {
	o.Id = v
}

// GetDeviceId returns the DeviceId field value
func (o *Sensor) GetDeviceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetDeviceIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *Sensor) SetDeviceId(v int64) {
	o.DeviceId = v
}

// GetCode returns the Code field value
func (o *Sensor) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Sensor) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value
func (o *Sensor) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Sensor) SetDescription(v string) {
	o.Description = v
}

// GetExternalId returns the ExternalId field value
func (o *Sensor) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetExternalIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *Sensor) SetExternalId(v string) {
	o.ExternalId = v
}

// GetBrand returns the Brand field value
func (o *Sensor) GetBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brand
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetBrandOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Brand, true
}

// SetBrand sets field value
func (o *Sensor) SetBrand(v string) {
	o.Brand = v
}

// GetArchiveTime returns the ArchiveTime field value if set, zero value otherwise.
func (o *Sensor) GetArchiveTime() int32 {
	if o == nil || isNil(o.ArchiveTime) {
		var ret int32
		return ret
	}
	return *o.ArchiveTime
}

// GetArchiveTimeOk returns a tuple with the ArchiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetArchiveTimeOk() (*int32, bool) {
	if o == nil || isNil(o.ArchiveTime) {
    return nil, false
	}
	return o.ArchiveTime, true
}

// HasArchiveTime returns a boolean if a field has been set.
func (o *Sensor) HasArchiveTime() bool {
	if o != nil && !isNil(o.ArchiveTime) {
		return true
	}

	return false
}

// SetArchiveTime gets a reference to the given int32 and assigns it to the ArchiveTime field.
func (o *Sensor) SetArchiveTime(v int32) {
	o.ArchiveTime = &v
}

// GetProperties returns the Properties field value
func (o *Sensor) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *Sensor) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Sensor) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Sensor) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Sensor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["device_id"] = o.DeviceId
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["external_id"] = o.ExternalId
	}
	if true {
		toSerialize["brand"] = o.Brand
	}
	if !isNil(o.ArchiveTime) {
		toSerialize["archive_time"] = o.ArchiveTime
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSensor struct {
	value *Sensor
	isSet bool
}

func (v NullableSensor) Get() *Sensor {
	return v.value
}

func (v *NullableSensor) Set(val *Sensor) {
	v.value = val
	v.isSet = true
}

func (v NullableSensor) IsSet() bool {
	return v.isSet
}

func (v *NullableSensor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensor(val *Sensor) *NullableSensor {
	return &NullableSensor{value: val, isSet: true}
}

func (v NullableSensor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


