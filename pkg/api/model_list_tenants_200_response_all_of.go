/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ListTenants200ResponseAllOf struct for ListTenants200ResponseAllOf
type ListTenants200ResponseAllOf struct {
	Data []Tenant `json:"data,omitempty"`
}

// NewListTenants200ResponseAllOf instantiates a new ListTenants200ResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTenants200ResponseAllOf() *ListTenants200ResponseAllOf {
	this := ListTenants200ResponseAllOf{}
	return &this
}

// NewListTenants200ResponseAllOfWithDefaults instantiates a new ListTenants200ResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTenants200ResponseAllOfWithDefaults() *ListTenants200ResponseAllOf {
	this := ListTenants200ResponseAllOf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ListTenants200ResponseAllOf) GetData() []Tenant {
	if o == nil || isNil(o.Data) {
		var ret []Tenant
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTenants200ResponseAllOf) GetDataOk() ([]Tenant, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ListTenants200ResponseAllOf) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Tenant and assigns it to the Data field.
func (o *ListTenants200ResponseAllOf) SetData(v []Tenant) {
	o.Data = v
}

func (o ListTenants200ResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListTenants200ResponseAllOf struct {
	value *ListTenants200ResponseAllOf
	isSet bool
}

func (v NullableListTenants200ResponseAllOf) Get() *ListTenants200ResponseAllOf {
	return v.value
}

func (v *NullableListTenants200ResponseAllOf) Set(val *ListTenants200ResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableListTenants200ResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableListTenants200ResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTenants200ResponseAllOf(val *ListTenants200ResponseAllOf) *NullableListTenants200ResponseAllOf {
	return &NullableListTenants200ResponseAllOf{value: val, isSet: true}
}

func (v NullableListTenants200ResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTenants200ResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


