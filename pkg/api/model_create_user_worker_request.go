/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.0
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// CreateUserWorkerRequest struct for CreateUserWorkerRequest
type CreateUserWorkerRequest struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	// base64 encoded user code
	UserCode *string `json:"user_code,omitempty"`
}

// NewCreateUserWorkerRequest instantiates a new CreateUserWorkerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserWorkerRequest(name string) *CreateUserWorkerRequest {
	this := CreateUserWorkerRequest{}
	this.Name = name
	return &this
}

// NewCreateUserWorkerRequestWithDefaults instantiates a new CreateUserWorkerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserWorkerRequestWithDefaults() *CreateUserWorkerRequest {
	this := CreateUserWorkerRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateUserWorkerRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateUserWorkerRequest) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateUserWorkerRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateUserWorkerRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserWorkerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUserWorkerRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateUserWorkerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetUserCode returns the UserCode field value if set, zero value otherwise.
func (o *CreateUserWorkerRequest) GetUserCode() string {
	if o == nil || isNil(o.UserCode) {
		var ret string
		return ret
	}
	return *o.UserCode
}

// GetUserCodeOk returns a tuple with the UserCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserWorkerRequest) GetUserCodeOk() (*string, bool) {
	if o == nil || isNil(o.UserCode) {
    return nil, false
	}
	return o.UserCode, true
}

// HasUserCode returns a boolean if a field has been set.
func (o *CreateUserWorkerRequest) HasUserCode() bool {
	if o != nil && !isNil(o.UserCode) {
		return true
	}

	return false
}

// SetUserCode gets a reference to the given string and assigns it to the UserCode field.
func (o *CreateUserWorkerRequest) SetUserCode(v string) {
	o.UserCode = &v
}

func (o CreateUserWorkerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.UserCode) {
		toSerialize["user_code"] = o.UserCode
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserWorkerRequest struct {
	value *CreateUserWorkerRequest
	isSet bool
}

func (v NullableCreateUserWorkerRequest) Get() *CreateUserWorkerRequest {
	return v.value
}

func (v *NullableCreateUserWorkerRequest) Set(val *CreateUserWorkerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserWorkerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserWorkerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserWorkerRequest(val *CreateUserWorkerRequest) *NullableCreateUserWorkerRequest {
	return &NullableCreateUserWorkerRequest{value: val, isSet: true}
}

func (v NullableCreateUserWorkerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserWorkerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


