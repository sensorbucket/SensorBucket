/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Tenant struct for Tenant
type Tenant struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Address string `json:"address"`
	ZipCode string `json:"zip_code"`
	City string `json:"city"`
	ChamberOfCommerceId *string `json:"chamber_of_commerce_id,omitempty"`
	HeadquarterId *string `json:"headquarter_id,omitempty"`
}

// NewTenant instantiates a new Tenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenant(id int64, name string, address string, zipCode string, city string) *Tenant {
	this := Tenant{}
	this.Id = id
	this.Name = name
	this.Address = address
	this.ZipCode = zipCode
	this.City = city
	return &this
}

// NewTenantWithDefaults instantiates a new Tenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantWithDefaults() *Tenant {
	this := Tenant{}
	return &this
}

// GetId returns the Id field value
func (o *Tenant) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tenant) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Tenant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tenant) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Tenant) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetAddressOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Tenant) SetAddress(v string) {
	o.Address = v
}

// GetZipCode returns the ZipCode field value
func (o *Tenant) GetZipCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetZipCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ZipCode, true
}

// SetZipCode sets field value
func (o *Tenant) SetZipCode(v string) {
	o.ZipCode = v
}

// GetCity returns the City field value
func (o *Tenant) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *Tenant) GetCityOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *Tenant) SetCity(v string) {
	o.City = v
}

// GetChamberOfCommerceId returns the ChamberOfCommerceId field value if set, zero value otherwise.
func (o *Tenant) GetChamberOfCommerceId() string {
	if o == nil || isNil(o.ChamberOfCommerceId) {
		var ret string
		return ret
	}
	return *o.ChamberOfCommerceId
}

// GetChamberOfCommerceIdOk returns a tuple with the ChamberOfCommerceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetChamberOfCommerceIdOk() (*string, bool) {
	if o == nil || isNil(o.ChamberOfCommerceId) {
    return nil, false
	}
	return o.ChamberOfCommerceId, true
}

// HasChamberOfCommerceId returns a boolean if a field has been set.
func (o *Tenant) HasChamberOfCommerceId() bool {
	if o != nil && !isNil(o.ChamberOfCommerceId) {
		return true
	}

	return false
}

// SetChamberOfCommerceId gets a reference to the given string and assigns it to the ChamberOfCommerceId field.
func (o *Tenant) SetChamberOfCommerceId(v string) {
	o.ChamberOfCommerceId = &v
}

// GetHeadquarterId returns the HeadquarterId field value if set, zero value otherwise.
func (o *Tenant) GetHeadquarterId() string {
	if o == nil || isNil(o.HeadquarterId) {
		var ret string
		return ret
	}
	return *o.HeadquarterId
}

// GetHeadquarterIdOk returns a tuple with the HeadquarterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetHeadquarterIdOk() (*string, bool) {
	if o == nil || isNil(o.HeadquarterId) {
    return nil, false
	}
	return o.HeadquarterId, true
}

// HasHeadquarterId returns a boolean if a field has been set.
func (o *Tenant) HasHeadquarterId() bool {
	if o != nil && !isNil(o.HeadquarterId) {
		return true
	}

	return false
}

// SetHeadquarterId gets a reference to the given string and assigns it to the HeadquarterId field.
func (o *Tenant) SetHeadquarterId(v string) {
	o.HeadquarterId = &v
}

func (o Tenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["zip_code"] = o.ZipCode
	}
	if true {
		toSerialize["city"] = o.City
	}
	if !isNil(o.ChamberOfCommerceId) {
		toSerialize["chamber_of_commerce_id"] = o.ChamberOfCommerceId
	}
	if !isNil(o.HeadquarterId) {
		toSerialize["headquarter_id"] = o.HeadquarterId
	}
	return json.Marshal(toSerialize)
}

type NullableTenant struct {
	value *Tenant
	isSet bool
}

func (v NullableTenant) Get() *Tenant {
	return v.value
}

func (v *NullableTenant) Set(val *Tenant) {
	v.value = val
	v.isSet = true
}

func (v NullableTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenant(val *Tenant) *NullableTenant {
	return &NullableTenant{value: val, isSet: true}
}

func (v NullableTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


