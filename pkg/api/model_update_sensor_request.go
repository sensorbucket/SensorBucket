/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.2.5
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UpdateSensorRequest struct for UpdateSensorRequest
type UpdateSensorRequest struct {
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"external_id,omitempty"`
	Brand *string `json:"brand,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	ArchiveTime *int32 `json:"archive_time,omitempty"`
}

// NewUpdateSensorRequest instantiates a new UpdateSensorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSensorRequest() *UpdateSensorRequest {
	this := UpdateSensorRequest{}
	return &this
}

// NewUpdateSensorRequestWithDefaults instantiates a new UpdateSensorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSensorRequestWithDefaults() *UpdateSensorRequest {
	this := UpdateSensorRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateSensorRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateSensorRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateSensorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UpdateSensorRequest) GetExternalId() string {
	if o == nil || isNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || isNil(o.ExternalId) {
    return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UpdateSensorRequest) HasExternalId() bool {
	if o != nil && !isNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UpdateSensorRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *UpdateSensorRequest) GetBrand() string {
	if o == nil || isNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorRequest) GetBrandOk() (*string, bool) {
	if o == nil || isNil(o.Brand) {
    return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *UpdateSensorRequest) HasBrand() bool {
	if o != nil && !isNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *UpdateSensorRequest) SetBrand(v string) {
	o.Brand = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *UpdateSensorRequest) GetProperties() map[string]interface{} {
	if o == nil || isNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorRequest) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Properties) {
    return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UpdateSensorRequest) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *UpdateSensorRequest) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetArchiveTime returns the ArchiveTime field value if set, zero value otherwise.
func (o *UpdateSensorRequest) GetArchiveTime() int32 {
	if o == nil || isNil(o.ArchiveTime) {
		var ret int32
		return ret
	}
	return *o.ArchiveTime
}

// GetArchiveTimeOk returns a tuple with the ArchiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSensorRequest) GetArchiveTimeOk() (*int32, bool) {
	if o == nil || isNil(o.ArchiveTime) {
    return nil, false
	}
	return o.ArchiveTime, true
}

// HasArchiveTime returns a boolean if a field has been set.
func (o *UpdateSensorRequest) HasArchiveTime() bool {
	if o != nil && !isNil(o.ArchiveTime) {
		return true
	}

	return false
}

// SetArchiveTime gets a reference to the given int32 and assigns it to the ArchiveTime field.
func (o *UpdateSensorRequest) SetArchiveTime(v int32) {
	o.ArchiveTime = &v
}

func (o UpdateSensorRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !isNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.ArchiveTime) {
		toSerialize["archive_time"] = o.ArchiveTime
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateSensorRequest struct {
	value *UpdateSensorRequest
	isSet bool
}

func (v NullableUpdateSensorRequest) Get() *UpdateSensorRequest {
	return v.value
}

func (v *NullableUpdateSensorRequest) Set(val *UpdateSensorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSensorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSensorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSensorRequest(val *UpdateSensorRequest) *NullableUpdateSensorRequest {
	return &NullableUpdateSensorRequest{value: val, isSet: true}
}

func (v NullableUpdateSensorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSensorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


