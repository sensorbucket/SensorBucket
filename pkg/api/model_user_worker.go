/*
Sensorbucket API

SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex' 

API version: 1.1-rc1
Contact: info@pollex.nl
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// UserWorker struct for UserWorker
type UserWorker struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	State string `json:"state"`
	Language string `json:"language"`
	Organisation int64 `json:"organisation"`
	Revision int32 `json:"revision"`
	Status string `json:"status"`
}

// NewUserWorker instantiates a new UserWorker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWorker(id string, name string, description string, state string, language string, organisation int64, revision int32, status string) *UserWorker {
	this := UserWorker{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.State = state
	this.Language = language
	this.Organisation = organisation
	this.Revision = revision
	this.Status = status
	return &this
}

// NewUserWorkerWithDefaults instantiates a new UserWorker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWorkerWithDefaults() *UserWorker {
	this := UserWorker{}
	return &this
}

// GetId returns the Id field value
func (o *UserWorker) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserWorker) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UserWorker) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserWorker) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *UserWorker) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UserWorker) SetDescription(v string) {
	o.Description = v
}

// GetState returns the State field value
func (o *UserWorker) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetStateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *UserWorker) SetState(v string) {
	o.State = v
}

// GetLanguage returns the Language field value
func (o *UserWorker) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetLanguageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *UserWorker) SetLanguage(v string) {
	o.Language = v
}

// GetOrganisation returns the Organisation field value
func (o *UserWorker) GetOrganisation() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Organisation
}

// GetOrganisationOk returns a tuple with the Organisation field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetOrganisationOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Organisation, true
}

// SetOrganisation sets field value
func (o *UserWorker) SetOrganisation(v int64) {
	o.Organisation = v
}

// GetRevision returns the Revision field value
func (o *UserWorker) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetRevisionOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *UserWorker) SetRevision(v int32) {
	o.Revision = v
}

// GetStatus returns the Status field value
func (o *UserWorker) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UserWorker) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UserWorker) SetStatus(v string) {
	o.Status = v
}

func (o UserWorker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["organisation"] = o.Organisation
	}
	if true {
		toSerialize["revision"] = o.Revision
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableUserWorker struct {
	value *UserWorker
	isSet bool
}

func (v NullableUserWorker) Get() *UserWorker {
	return v.value
}

func (v *NullableUserWorker) Set(val *UserWorker) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWorker) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWorker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWorker(val *UserWorker) *NullableUserWorker {
	return &NullableUserWorker{value: val, isSet: true}
}

func (v NullableUserWorker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWorker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


