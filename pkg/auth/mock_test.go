// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"github.com/go-jose/go-jose/v3"
	"net/http"
	"sync"
)

// Ensure, that jwksClientMock does implement jwksClient.
// If this is not the case, regenerate this file with moq.
var _ jwksClient = &jwksClientMock{}

// jwksClientMock is a mock implementation of jwksClient.
//
//	func TestSomethingThatUsesjwksClient(t *testing.T) {
//
//		// make and configure a mocked jwksClient
//		mockedjwksClient := &jwksClientMock{
//			GetFunc: func() (jose.JSONWebKeySet, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedjwksClient in code that requires jwksClient
//		// and then make assertions.
//
//	}
type jwksClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func() (jose.JSONWebKeySet, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *jwksClientMock) Get() (jose.JSONWebKeySet, error) {
	if mock.GetFunc == nil {
		panic("jwksClientMock.GetFunc: method is nil but jwksClient.Get was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedjwksClient.GetCalls())
func (mock *jwksClientMock) GetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ http.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			ServeHTTPFunc: func(responseWriter http.ResponseWriter, request *http.Request)  {
//				panic("mock out the ServeHTTP method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// ServeHTTPFunc mocks the ServeHTTP method.
	ServeHTTPFunc func(responseWriter http.ResponseWriter, request *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// ServeHTTP holds details about calls to the ServeHTTP method.
		ServeHTTP []struct {
			// ResponseWriter is the responseWriter argument value.
			ResponseWriter http.ResponseWriter
			// Request is the request argument value.
			Request *http.Request
		}
	}
	lockServeHTTP sync.RWMutex
}

// ServeHTTP calls ServeHTTPFunc.
func (mock *HandlerMock) ServeHTTP(responseWriter http.ResponseWriter, request *http.Request) {
	if mock.ServeHTTPFunc == nil {
		panic("HandlerMock.ServeHTTPFunc: method is nil but Handler.ServeHTTP was just called")
	}
	callInfo := struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}{
		ResponseWriter: responseWriter,
		Request:        request,
	}
	mock.lockServeHTTP.Lock()
	mock.calls.ServeHTTP = append(mock.calls.ServeHTTP, callInfo)
	mock.lockServeHTTP.Unlock()
	mock.ServeHTTPFunc(responseWriter, request)
}

// ServeHTTPCalls gets all the calls that were made to ServeHTTP.
// Check the length with:
//
//	len(mockedHandler.ServeHTTPCalls())
func (mock *HandlerMock) ServeHTTPCalls() []struct {
	ResponseWriter http.ResponseWriter
	Request        *http.Request
} {
	var calls []struct {
		ResponseWriter http.ResponseWriter
		Request        *http.Request
	}
	mock.lockServeHTTP.RLock()
	calls = mock.calls.ServeHTTP
	mock.lockServeHTTP.RUnlock()
	return calls
}
