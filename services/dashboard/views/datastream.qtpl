{% import "sensorbucket.nl/sensorbucket/pkg/api" %}
{% import "time" %}

{% func (p *DatastreamPage) Body() %}
<header class="flex justify-between items-center">
    <div class="flex gap-3 text-sm my-4 italic items-center" hx-target="main">
        <a href="{%s U("/overview") %}" class="hover:underline text-sky-600">Devices</a>
        <span>/</span>
        <a href="{%s U("/overview/devices/%d", p.Device.GetId()) %}" class="hover:underline text-sky-600">{%s p.Device.Code %}</a>
        <span>/</span>
        <a href="{%s U("/overview/devices/%d/sensors/%s", p.Device.GetId(), p.Sensor.Code) %}" class="hover:underline text-sky-600">{%s p.Sensor.Code %}</a>
        <span>/</span>
        <span>{%s p.Datastream.Id %}</span>
    </div>

    <script type="text/javascript">
        function updateQueryParam(name, value) {
            let urlParams = new URLSearchParams(window.location.search)
            urlParams.set(name, value)
            window.history.replaceState({}, '', '?' + urlParams.toString())
        }

        function downloadCsv() {

            // Find the plot on the page
            const target = htmx.find("#chart");
            const plot = target.plot;
            if (plot == undefined || plot == null) {

                // couldn't find plot
                return;
            }

            // Map the data in the plot to a format easily converted to a csv
            const x = plot.data[0];
            const y = plot.data[1]
            const rows = x.map((xVal, index) => {
                // Conver the UTC date to a readable local format
                var local = new Date(0);
                local.setUTCSeconds(xVal);
                return [xVal, local.toLocaleString(), y[index]];
            });


            // Create the csv with download
            const csvContent = "Time(Epoch UTC),Time(Local),{%s p.Datastream.UnitOfMeasurement %}\n" + rows.map(row => row.join(",")).join("\n");
            const blob = new Blob([csvContent], { type: "text/csv" });

            const downloadLink = document.createElement("a");
            downloadLink.href = URL.createObjectURL(blob);

            const summary = ('{%s p.Device.Code %}-{%s p.Sensor.Code %}-{%s p.Datastream.ObservedProperty %}').replace(/\s/g, '').toLowerCase();
            let start = document.querySelector('input[name="start"]').valueAsDate
            let startStr = start.toISOString().split('T')[0]
            let end = new Date(document.querySelector('input[name="end"]').valueAsDate.getTime()) // +1 day ommitted as the title is interpreted as inclusive
            let endStr = end.toISOString().split('T')[0]
            const title = `${summary}-${startStr}-${endStr}.csv`

            downloadLink.download = title;
            downloadLink.click();
        }
    </script>
    <div class="flex gap-2 text-sm">
            <fieldset class="relative col-span-2">
                <button onclick="downloadCsv()" class="bg-transparent hover:bg-gray-500 text-gray-700 font-normal hover:text-white py-1 px-2 border border-gray-600 hover:border-transparent rounded">
                    Export
                </button>
            </fieldset>
            <fieldset class="relative col-span-2">
                <label for="start" class="absolute bottom-full ml-1 -mb-1 block"><small class="text-xs text-slate-500">Start</small></label>
                <input type="date" name="start" value="{%s p.Start.Format("2006-01-02") %}" 
                    class="border px-2 py-1 rounded-md bg-white text-slate-700"
                    _="on change debounced at 500ms call updateQueryParam(me.name, me.value) then trigger updateDatastream on body"
                />
            </fieldset>
            <fieldset class="relative col-span-2">
                <label for="end" class="absolute bottom-full ml-1 -mb-1 block"><small class="text-xs text-slate-500">End</small></label>
                <input type="date" name="end" value="{%s p.End.Format("2006-01-02") %}" 
                    class="border px-2 py-1 rounded-md bg-white text-slate-700"
                    _="on change debounced at 500ms call updateQueryParam(me.name, me.value) then trigger updateDatastream on body"
                />
            </fieldset>
    </div>
</header>
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-1 xl:grid-cols-3 gap-6">
    <div class="bg-white rounded-md border col-span-full">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Datastream
        </header>
        <div class="h-96 p-4">
            <header class="flex justify-between text-sm text-slate-600">
                <small>{%s p.Device.Code %} - {%s p.Sensor.Code %} - {%s p.Datastream.ObservedProperty %}</small>
                <small>{%s p.Datastream.Description %}</small>
                <small>{%s p.Datastream.Id %}</small>
            </header>
            {%= renderDataStream(p.Datastream, p.Start, p.End) %}
        </div>
    </div>
    <div class="bg-white rounded-md border" id="map">
        {%= renderDeviceMap(p.Device) %}
    </div>
    <div class="bg-white rounded-md border" id="device">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Device details
        </header>
        <div class="p-4">
            {%= DeviceDetailBlock(p.Device) %}
        </div>
    </div>
    <div class="bg-white rounded-md border" id="sensor">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Sensor details
        </header>
        <div class="p-4">
            {%= SensorDetailBlock(p.Sensor) %}
        </div>
    </div>
</div>
{% endfunc %}

{% func renderDataStream(ds api.Datastream, start, end time.Time) %}
    <div id="chart" class="w-full h-full">
    </div>
    <script type="text/javascript">
    {
        function getWebSocketURL(path) {
            const loc = window.location;
            let newUri;

            if (loc.protocol === "https:") {
                newUri = "wss:";
            } else {
                newUri = "ws:";
            }
            
            newUri += "//" + loc.host + path;
            
            return newUri;
        }
        let plot;
        let ws;
        function updateDatastream() {
            let x = [];
            let y = [];
            let start = document.querySelector('input[name="start"]').valueAsDate
            let end = new Date(document.querySelector('input[name="end"]').valueAsDate.getTime() + (24*60*60*1000))
            let min = start.getTime()/1000
            let max = end.getTime()/1000
            plot.setScale('x', {min, max})

            if (ws) {
                ws.close()
            }

            ws = new WebSocket(getWebSocketURL(`{%s= U("/overview/datastreams/%s/stream?start=${start.toISOString()}&end=${end.toISOString()}", ds.Id) %}`))
            ws.onmessage = (event) => {
                const reader = new FileReader();
                reader.onload = function() {
                    const buffer = this.result;
                    const view = new DataView(buffer);
                    
                    // Determine the number of points in the message
                    const pointSize = 8 + 8; // 8 bytes for timestamp and 8 bytes for value
                    const numPoints = buffer.byteLength / pointSize;
                    
                    // Loop through each point in the message
                    for (let i = 0; i < numPoints; i++) {
                        const offset = i * pointSize;
                        
                        // Get the timestamp and value
                        const ts = Number(view.getBigUint64(offset, false)) / 1000; // get timestamp from the first 8 bytes
                        const val = view.getFloat64(offset + 8, false); // get float64 value from the next 8 bytes
                        
                        // Prepend to the existing arrays
                        x.unshift(ts);
                        y.unshift(val);
                    }

                    plot.setData([x, y]);
                };
                reader.readAsArrayBuffer(event.data);
            };
        }

        function init() {
            const target = htmx.find("#chart")
            target.innerHTML = ""
            const x = [];
            const y = [];

            const opts = {
                width: target.clientWidth,
                height: target.clientHeight - 60,
                hooks: {
                    init: [
						u => {
							u.over.ondblclick = e => {
                                let start = document.querySelector('input[name="start"').valueAsDate
                                let end = new Date(document.querySelector('input[name="end"]').valueAsDate.getTime() + (24*60*60*1000))
                                let min = start.getTime()/1000
                                let max = end.getTime()/1000
                                u.setScale('x', {min,max})
							}
						}
					],
                },
                scales: {
                    x: {
                        time: true,
                        auto: false,
                    },
                    y: {
                    }
                },
                series: [
                    {},
                    {
                        stroke: "red",
                        label: "{%s ds.ObservedProperty %} ({%s ds.UnitOfMeasurement%})"
                    }
                ]
            };

            if (plot == undefined) {
                plot = new uPlot(opts, [x,y], target)
                target.plot = plot;
                console.log(plot)
            }
            htmx.on(document.body, "updateDatastream", () => updateDatastream())
            updateDatastream()
        }
        (() => init())()
    }
    </script>
{% endfunc %}

{% code
type DatastreamPage struct {
    BasePage
    Device api.Device
    Sensor api.Sensor
    Datastream api.Datastream
    Start time.Time
    End time.Time
}
%}
