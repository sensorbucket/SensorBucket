{% import "sensorbucket.nl/sensorbucket/services/core/devices" %}
{% import "sensorbucket.nl/sensorbucket/services/core/measurements" %}
{% import "time" %}

{% func (p *DatastreamPage) Body() %}
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-1 xl:grid-cols-3 gap-6">
    <div class="bg-white rounded-md border" id="map">
        {%= renderDeviceMap(p.Device) %}
    </div>
    <div class="bg-white rounded-md border" id="device">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Device details
        </header>
        <div class="p-4">
            {%= DeviceDetailBlock(p.Device) %}
        </div>
    </div>
    <div class="bg-white rounded-md border" id="sensor">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Sensor details
        </header>
        <div class="p-4">
            {%= DeviceDetailBlock(p.Device) %}
        </div>
    </div>
    <div class="bg-white rounded-md border col-span-full">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Datastream
        </header>
        <div class="px-4 pt-4 pb-10">
            {%= renderDataStream(p.Datastream) %}
        </div>
    </div>
</div>
{% endfunc %}

{% func renderDataStream(ds measurements.Datastream) %}
    <div id="chart" class="w-full h-80"></div>
    <script type="text/javascript">
    {
        function getWebSocketURL(path) {
            const loc = window.location;
            let newUri;

            if (loc.protocol === "https:") {
                newUri = "wss:";
            } else {
                newUri = "ws:";
            }
            
            newUri += "//" + loc.host + path;
            
            return newUri;
        }
        function init() {
            const target = htmx.find("#chart")
            const x = [];
            const y = [];

            const opts = {
                width: target.clientWidth,
                height: target.clientHeight,
                title: "",
                scales: {
                    x: {
                        time: true,
                    },
                    y: {                    
                    }
                },
                series: [
                    {},
                    {
                        stroke: "red",
                        label: "{%s ds.ObservedProperty %} ({%s ds.UnitOfMeasurement%})"
                    }
                ]
            };

            const plot = new uPlot(opts, [x,y], target)

            const ws = new WebSocket(getWebSocketURL("/overview/datastreams/{%s ds.ID.String() %}/stream?start={%s time.Now().Format(time.RFC3339) %}"))
            ws.onmessage = (event) => {
                const reader = new FileReader();
                reader.onload = function() {
                    const buffer = this.result;
                    const view = new DataView(buffer);

                    // Get the timestamp and value
                    const ts = Number(view.getBigUint64(0, false))/1000; // get timestamp from the first 8 bytes
                    const val = view.getFloat64(8, false);  // get float64 value from the next 8 bytes

                    // Prepend to the existing arrays
                    x.unshift(ts);
                    y.unshift(val);

                    plot.setData([x, y]);
                };
                reader.readAsArrayBuffer(event.data);
            }
        }
        (() => init())()
    }
    </script>
{% endfunc %}

{% code
type DatastreamPage struct {
    BasePage
    Device devices.Device
    Sensor devices.Sensor
    Datastream measurements.Datastream
}
%}
