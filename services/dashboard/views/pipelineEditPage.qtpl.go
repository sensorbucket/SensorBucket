// Code generated by qtc from "pipelineEditPage.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// <!--
//     Pipeline model
//     Workers with pagination
//  -->
//

//line views/pipelineEditPage.qtpl:6
package views

//line views/pipelineEditPage.qtpl:6
import "sensorbucket.nl/sensorbucket/pkg/api"

//line views/pipelineEditPage.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/pipelineEditPage.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/pipelineEditPage.qtpl:7
func (p *PipelineEditPage) StreamBody(qw422016 *qt422016.Writer) {
//line views/pipelineEditPage.qtpl:7
	qw422016.N().S(`
<div class="w-full grid grid-rows-3 grid-cols-5 gap-6">
    <div class="row-span-2 col-span-2 bg-white border rounded-md">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Pipeline details
        </header>
        <div class="p-4">
            `)
//line views/pipelineEditPage.qtpl:14
	StreamPipelineDetailBlock(qw422016, p.Pipeline)
//line views/pipelineEditPage.qtpl:14
	qw422016.N().S(`
        </div>
    </div>
    <div class="row-span-2 col-span-3 bg-white border rounded-md">
        <div class="row-span-2 col-span-2 bg-white border rounded-md">
            <header class="border-b py-2 px-4 text-sm text-slate-700">
                Pipeline steps
            </header>
            <div class="p-4">
                `)
//line views/pipelineEditPage.qtpl:23
	StreamRenderPipelineSteps(qw422016, p.Pipeline)
//line views/pipelineEditPage.qtpl:23
	qw422016.N().S(`
            </div>
        </div>
    </div>
    <div class="row-span-1 col-span-5 bg-white border rounded-md">
        `)
//line views/pipelineEditPage.qtpl:28
	StreamRenderWorkerTable(qw422016, p.Workers, p.WorkersNextPage)
//line views/pipelineEditPage.qtpl:28
	qw422016.N().S(`
    </div>
</div>
`)
//line views/pipelineEditPage.qtpl:31
}

//line views/pipelineEditPage.qtpl:31
func (p *PipelineEditPage) WriteBody(qq422016 qtio422016.Writer) {
//line views/pipelineEditPage.qtpl:31
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:31
	p.StreamBody(qw422016)
//line views/pipelineEditPage.qtpl:31
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:31
}

//line views/pipelineEditPage.qtpl:31
func (p *PipelineEditPage) Body() string {
//line views/pipelineEditPage.qtpl:31
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:31
	p.WriteBody(qb422016)
//line views/pipelineEditPage.qtpl:31
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:31
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:31
	return qs422016
//line views/pipelineEditPage.qtpl:31
}

//line views/pipelineEditPage.qtpl:33
func StreamRenderPipelineSteps(qw422016 *qt422016.Writer, pipeline api.Pipeline) {
//line views/pipelineEditPage.qtpl:33
	qw422016.N().S(`
    <script>
        htmx.onLoad(function(content) {
        let sortables = content.querySelectorAll(".sortable");
        const ghostStyles = ['border-dashed', 'border-2', 'border-sky-500', 'bg-white', 'shadow-lg', 'shadow-cyan-500/50'];
        for (var i = 0; i < sortables.length; i++) {
                let sortable = sortables[i];
                let sort = new Sortable(sortable, {
                    animation: 150,

                    // Unfortunately the Sortable JS library does not offer support for multiple classes as the ghost class.
                    // To style it using Tailwind a small hack is required
                    onStart: function(evt) {
                        ghostStyles.forEach((item) => evt.item.classList.add(item));
                    },
                    onEnd: function(evt) {
                        ghostStyles.forEach((item) => evt.item.classList.remove(item));

                        // Update the index for each input item
                        let inputs = sortable.querySelectorAll("input");
                        inputs.forEach((ix, input) => input.value = "stuyffff");
                        for (let i = 0; i < inputs.length; i++) {
                            inputs[i].value = i;
                        }

                        // Now fire the event triggering HTMX to update the pipeline in the backend
                        sortable.dispatchEvent(new Event("steps-updated"));
                    }
                });
            }
        })
    </script>
     <div id="stepsIndicator" class="htmx-indicator w-full h-full flex justify-center">
        <iconify-icon icon="eos-icons:loading" width="15" class="text-secondary-600"></iconify-icon>
    </div>
    <form class="sortable" hx-indicator="#stepsIndicator" hx-post="/pipelines/`)
//line views/pipelineEditPage.qtpl:68
	qw422016.E().S(pipeline.Id)
//line views/pipelineEditPage.qtpl:68
	qw422016.N().S(`/steps" hx-trigger="steps-updated">
        `)
//line views/pipelineEditPage.qtpl:69
	StreamRenderPipelineStepsSortable(qw422016, pipeline.Steps)
//line views/pipelineEditPage.qtpl:69
	qw422016.N().S(`
    </form>
`)
//line views/pipelineEditPage.qtpl:71
}

//line views/pipelineEditPage.qtpl:71
func WriteRenderPipelineSteps(qq422016 qtio422016.Writer, pipeline api.Pipeline) {
//line views/pipelineEditPage.qtpl:71
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:71
	StreamRenderPipelineSteps(qw422016, pipeline)
//line views/pipelineEditPage.qtpl:71
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:71
}

//line views/pipelineEditPage.qtpl:71
func RenderPipelineSteps(pipeline api.Pipeline) string {
//line views/pipelineEditPage.qtpl:71
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:71
	WriteRenderPipelineSteps(qb422016, pipeline)
//line views/pipelineEditPage.qtpl:71
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:71
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:71
	return qs422016
//line views/pipelineEditPage.qtpl:71
}

//line views/pipelineEditPage.qtpl:73
func StreamRenderPipelineStepsSortable(qw422016 *qt422016.Writer, steps []string) {
//line views/pipelineEditPage.qtpl:73
	qw422016.N().S(`
    `)
//line views/pipelineEditPage.qtpl:74
	for ix, step := range steps {
//line views/pipelineEditPage.qtpl:74
		qw422016.N().S(`
        <div class="p-4 w-2/4 mt-1.5 text-center mx-auto text-white bg-secondary-600 rounded-lg flex justify-start">
            <input type="hidden" name="`)
//line views/pipelineEditPage.qtpl:76
		qw422016.E().S(step)
//line views/pipelineEditPage.qtpl:76
		qw422016.N().S(`" value="`)
//line views/pipelineEditPage.qtpl:76
		qw422016.N().D(ix)
//line views/pipelineEditPage.qtpl:76
		qw422016.N().S(`" />
            <p>`)
//line views/pipelineEditPage.qtpl:77
		qw422016.E().S(step)
//line views/pipelineEditPage.qtpl:77
		qw422016.N().S(`</p>
        </div>
    `)
//line views/pipelineEditPage.qtpl:79
	}
//line views/pipelineEditPage.qtpl:79
	qw422016.N().S(`
`)
//line views/pipelineEditPage.qtpl:80
}

//line views/pipelineEditPage.qtpl:80
func WriteRenderPipelineStepsSortable(qq422016 qtio422016.Writer, steps []string) {
//line views/pipelineEditPage.qtpl:80
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:80
	StreamRenderPipelineStepsSortable(qw422016, steps)
//line views/pipelineEditPage.qtpl:80
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:80
}

//line views/pipelineEditPage.qtpl:80
func RenderPipelineStepsSortable(steps []string) string {
//line views/pipelineEditPage.qtpl:80
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:80
	WriteRenderPipelineStepsSortable(qb422016, steps)
//line views/pipelineEditPage.qtpl:80
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:80
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:80
	return qs422016
//line views/pipelineEditPage.qtpl:80
}

//line views/pipelineEditPage.qtpl:83
type PipelineEditPage struct {
	BasePage
	Pipeline        api.Pipeline
	Workers         []api.UserWorker
	WorkersNextPage string
}
