// Code generated by qtc from "pipelineEditPage.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// <!--
//     Pipeline model
//     Workers with pagination
//  -->
//

//line views/pipelineEditPage.qtpl:6
package views

//line views/pipelineEditPage.qtpl:6
import "sensorbucket.nl/sensorbucket/pkg/api"

//line views/pipelineEditPage.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/pipelineEditPage.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/pipelineEditPage.qtpl:7
func (p *PipelineEditPage) StreamBody(qw422016 *qt422016.Writer) {
//line views/pipelineEditPage.qtpl:7
	qw422016.N().S(`
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-3 xl:grid-cols-3 gap-6">
    <div class="bg-white border rounded-md lg:col-span-3 xl:col-span-1">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Pipeline details
        </header>
        <form id="pipelineEditForm" class="p-4 gap-4 grid lg:grid-cols-1"
                `)
//line views/pipelineEditPage.qtpl:14
	if p.Pipeline != nil {
//line views/pipelineEditPage.qtpl:14
		qw422016.N().S(`
                    hx-patch="`)
//line views/pipelineEditPage.qtpl:15
		qw422016.E().S(u("/pipelines/edit/%s", p.Pipeline.Id))
//line views/pipelineEditPage.qtpl:15
		qw422016.N().S(`" hx-trigger="form-updated"
                `)
//line views/pipelineEditPage.qtpl:16
	} else {
//line views/pipelineEditPage.qtpl:16
		qw422016.N().S(`
                    hx-post="`)
//line views/pipelineEditPage.qtpl:17
		qw422016.E().S(u("/pipelines/create"))
//line views/pipelineEditPage.qtpl:17
		qw422016.N().S(`"
                `)
//line views/pipelineEditPage.qtpl:18
	}
//line views/pipelineEditPage.qtpl:18
	qw422016.N().S(`
                hx-vals="js:{steps: getSteps()}"
                hx-target="#sortableForm">
            <fieldset>
                <label for="pipeline-id" class="ml-1 -mb-1 block"><small class="text-xs text-slate-500">Pipeline ID</small></label>
                <input
                    type="text" name="pipeline-id" id="pipeline-id"
                    class="block w-full px-2 py-1 border rounded-md bg-white text-slate-600"
                    `)
//line views/pipelineEditPage.qtpl:26
	if p.Pipeline != nil {
//line views/pipelineEditPage.qtpl:26
		qw422016.N().S(`
                        value="`)
//line views/pipelineEditPage.qtpl:27
		qw422016.E().S(p.Pipeline.Id)
//line views/pipelineEditPage.qtpl:27
		qw422016.N().S(`"
                    `)
//line views/pipelineEditPage.qtpl:28
	}
//line views/pipelineEditPage.qtpl:28
	qw422016.N().S(`
                    disabled
                />
            </fieldset>
            <fieldset>
                <label for="pipeline-descr" class="ml-1 -mb-1 block"><small class="text-xs text-slate-500">Pipeline Description</small></label>
                <input
                    type="text" name="pipeline-descr" id="pipeline-descr"
                    class="block w-full px-2 py-1 border rounded-md bg-white placeholder:text-slate-600"
                    `)
//line views/pipelineEditPage.qtpl:37
	if p.Pipeline != nil {
//line views/pipelineEditPage.qtpl:37
		qw422016.N().S(`
                        value="`)
//line views/pipelineEditPage.qtpl:38
		qw422016.E().S(p.Pipeline.Description)
//line views/pipelineEditPage.qtpl:38
		qw422016.N().S(`"
                    `)
//line views/pipelineEditPage.qtpl:39
	} else {
//line views/pipelineEditPage.qtpl:39
		qw422016.N().S(`
                        value="New pipeline"
                    `)
//line views/pipelineEditPage.qtpl:41
	}
//line views/pipelineEditPage.qtpl:41
	qw422016.N().S(`
                />
            </fieldset>
            <div class="col-span-full">
                `)
//line views/pipelineEditPage.qtpl:45
	if p.Pipeline != nil {
//line views/pipelineEditPage.qtpl:45
		qw422016.N().S(`
                    <button
                        type="button"
                        onclick="notify()"
                        class="text-sm bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                    Save
                    </button>
                `)
//line views/pipelineEditPage.qtpl:52
	} else {
//line views/pipelineEditPage.qtpl:52
		qw422016.N().S(`
                    <button
                        class="text-sm bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                        Create
                    </button>
                `)
//line views/pipelineEditPage.qtpl:57
	}
//line views/pipelineEditPage.qtpl:57
	qw422016.N().S(`
            </div>
        </form>
    </div>
    <div class="bg-white lg:col-span-3 xl:col-span-2">
        <div class="bg-white border rounded-md">
            <header class="border-b py-2 px-4 text-sm text-slate-700">
                Pipeline steps
            </header>
            <div class="p-4">
                `)
//line views/pipelineEditPage.qtpl:67
	StreamRenderPipelineSteps(qw422016, p.Pipeline, p.WorkersInPipeline)
//line views/pipelineEditPage.qtpl:67
	qw422016.N().S(`
            </div>
        </div>
    </div>
    <div id="workerTable" class="bg-white border rounded-md lg:col-span-3 xl:col-span-3">
        `)
//line views/pipelineEditPage.qtpl:72
	StreamRenderPipelineEditWorkerTable(qw422016, p.Workers, p.WorkersNextPage)
//line views/pipelineEditPage.qtpl:72
	qw422016.N().S(`
    </div>
    <div id="sortable-item-staging-template" class="p-2 w-2/4 mt-1.5 mx-auto text-white bg-orange-400 rounded-lg flex justify-between items-center">
        <input type="hidden"/>
        <div>
            <p class="sortable-title text-lg"></p>
            <p class="sortable-descr text-sm font-thin"></p>
        </div>
        <div class="trash-can cursor-pointer h-full w-1/12">
            <iconify-icon icon="basil:trash-solid" width="100%" height="100%" class="text-white"></iconify-icon>
        </div>
    </div>
</div>
`)
//line views/pipelineEditPage.qtpl:85
}

//line views/pipelineEditPage.qtpl:85
func (p *PipelineEditPage) WriteBody(qq422016 qtio422016.Writer) {
//line views/pipelineEditPage.qtpl:85
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:85
	p.StreamBody(qw422016)
//line views/pipelineEditPage.qtpl:85
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:85
}

//line views/pipelineEditPage.qtpl:85
func (p *PipelineEditPage) Body() string {
//line views/pipelineEditPage.qtpl:85
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:85
	p.WriteBody(qb422016)
//line views/pipelineEditPage.qtpl:85
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:85
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:85
	return qs422016
//line views/pipelineEditPage.qtpl:85
}

//line views/pipelineEditPage.qtpl:87
func StreamRenderPipelineSteps(qw422016 *qt422016.Writer, pipeline *api.Pipeline, workers *[]api.UserWorker) {
//line views/pipelineEditPage.qtpl:87
	qw422016.N().S(`
    <script>
        htmx.onLoad(function(content) {
            // Make the steps list sortable
            let sortables = content.querySelectorAll(".sortable");
           
            const ghostStyles = ['border-dashed', 'border-2', 'border-sky-500', 'bg-white', 'shadow-lg', 'shadow-cyan-500/50'];
            for (var i = 0; i < sortables.length; i++) {
                    let sortable = sortables[i];
                    let sort = new Sortable(sortable, {
                        animation: 150,

                        // Unfortunately the Sortable JS library does not offer support for multiple classes as the ghost class.
                        // To style it using Tailwind a small hack is required
                        onStart: function(evt) {
                            ghostStyles.forEach((item) => evt.item.classList.add(item));
                        },
                        onEnd: function(evt) {
                            ghostStyles.forEach((item) => evt.item.classList.remove(item));

                            reorderSortables();
                        }
                    });
                }
        })

        function reorderSortables() {
            let sortables = document.querySelectorAll(".sortable");
            for (var i = 0; i < sortables.length; i++) {
                // Update the index for each input item
                let values = [];
                let inputs = sortables[i].querySelectorAll("input");
                for (let i = 0; i < inputs.length; i++) {
                    inputs[i].value = i;
                    values.push(inputs[i].name);
                }
                
            }
            notify();
        }

        function addSortable(workerName, workerId) {
            // Clone the template element and remove the 'hidden' class
            const template = document.getElementById("sortable-item-staging-template");
            const newItem = template.cloneNode(true);
            newItem.classList.remove("hidden");
            newItem.id = "sortable-item-" + workerId;

            const titleElement = newItem.querySelector(".sortable-title");
            titleElement.textContent = workerName;

            const trashCanElement = newItem.querySelector(".trash-can");
            trashCanElement.onclick = function(){ removeFromSortable(workerId); };

            const sortableForm = document.getElementById("sortableForm");
            const inputElement = newItem.querySelector("input[type='hidden']");
            inputElement.value = sortableForm.querySelectorAll("input").length;
            inputElement.name = workerId;

            sortableForm.appendChild(newItem);

            notify();
        }

        function removeFromSortable(name) {
            const el = document.getElementById("sortable-item-" + name);
            el.remove();
            
            reorderSortables();
            
            notify();
        }

        function getSteps() {
            const form = document.getElementById('sortableForm');
            console.log(form);

            // Create a FormData object from the form
            const formData = new FormData(form);
            console.log(form.elements);
            console.log(formData.entries());
            for (var [key, value] of formData.entries()) { 
            console.log(key, value);
            }

            let data = {}
            for (var [key, value] of formData.entries()) { 
                if(!data[key]) {
                    data[key] = [];
                }
                data[key].push(value);
                console.log(key, value, data[key]);
            }
            console.log(data);



            return data;
        }

        function notify() {
            const sortableForm = document.getElementById('sortableForm');
            const mainForm = document.getElementById('pipelineEditForm');

            // Now fire the event triggering HTMX to update the pipeline in the backend
            mainForm.dispatchEvent(new Event("form-updated"));
            sortableForm.dispatchEvent(new Event("form-updated"));
        }
    </script>
     <div id="stepsIndicator" class="htmx-indicator w-full h-full flex justify-center">
        <iconify-icon icon="eos-icons:loading" width="15" class="text-secondary-600"></iconify-icon>
    </div>
    <form id="sortableForm" name="sortable" class="sortable" hx-indicator="#stepsIndicator" hx-vals="js:{steps: getSteps()}"
        `)
//line views/pipelineEditPage.qtpl:200
	if pipeline == nil {
//line views/pipelineEditPage.qtpl:200
		qw422016.N().S(`
            hx-patch="`)
//line views/pipelineEditPage.qtpl:201
		qw422016.E().S(u("/pipelines/validate"))
//line views/pipelineEditPage.qtpl:201
		qw422016.N().S(`" hx-trigger="form-updated"
        `)
//line views/pipelineEditPage.qtpl:202
	}
//line views/pipelineEditPage.qtpl:202
	qw422016.N().S(`>
        `)
//line views/pipelineEditPage.qtpl:203
	if workers != nil {
//line views/pipelineEditPage.qtpl:203
		qw422016.N().S(`
            `)
//line views/pipelineEditPage.qtpl:204
		StreamRenderPipelineStepsSortable(qw422016, *workers)
//line views/pipelineEditPage.qtpl:204
		qw422016.N().S(`
        `)
//line views/pipelineEditPage.qtpl:205
	}
//line views/pipelineEditPage.qtpl:205
	qw422016.N().S(`
    </form>
`)
//line views/pipelineEditPage.qtpl:207
}

//line views/pipelineEditPage.qtpl:207
func WriteRenderPipelineSteps(qq422016 qtio422016.Writer, pipeline *api.Pipeline, workers *[]api.UserWorker) {
//line views/pipelineEditPage.qtpl:207
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:207
	StreamRenderPipelineSteps(qw422016, pipeline, workers)
//line views/pipelineEditPage.qtpl:207
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:207
}

//line views/pipelineEditPage.qtpl:207
func RenderPipelineSteps(pipeline *api.Pipeline, workers *[]api.UserWorker) string {
//line views/pipelineEditPage.qtpl:207
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:207
	WriteRenderPipelineSteps(qb422016, pipeline, workers)
//line views/pipelineEditPage.qtpl:207
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:207
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:207
	return qs422016
//line views/pipelineEditPage.qtpl:207
}

//line views/pipelineEditPage.qtpl:209
func StreamRenderPipelineStepsSortable(qw422016 *qt422016.Writer, steps []api.UserWorker) {
//line views/pipelineEditPage.qtpl:209
	qw422016.N().S(`
    `)
//line views/pipelineEditPage.qtpl:210
	for ix, step := range steps {
//line views/pipelineEditPage.qtpl:210
		qw422016.N().S(`
        <div id="sortable-item-`)
//line views/pipelineEditPage.qtpl:211
		qw422016.E().S(step.Id)
//line views/pipelineEditPage.qtpl:211
		qw422016.N().S(`" class="p-2 w-2/4 mt-1.5 mx-auto text-white bg-secondary-600 rounded-lg flex justify-between items-center">
            <input type="hidden" name="`)
//line views/pipelineEditPage.qtpl:212
		qw422016.E().S(step.Id)
//line views/pipelineEditPage.qtpl:212
		qw422016.N().S(`" value="`)
//line views/pipelineEditPage.qtpl:212
		qw422016.N().D(ix)
//line views/pipelineEditPage.qtpl:212
		qw422016.N().S(`" />
            <div>
                <p class="text-lg">`)
//line views/pipelineEditPage.qtpl:214
		qw422016.E().S(step.Name)
//line views/pipelineEditPage.qtpl:214
		qw422016.N().S(` v`)
//line views/pipelineEditPage.qtpl:214
		qw422016.E().V(step.Revision)
//line views/pipelineEditPage.qtpl:214
		qw422016.N().S(`</p>
                <p class="text-sm font-thin">`)
//line views/pipelineEditPage.qtpl:215
		qw422016.E().S(step.Description)
//line views/pipelineEditPage.qtpl:215
		qw422016.N().S(`</p>
            </div>
            <div class="cursor-pointer h-full w-1/12" onclick="removeFromSortable('`)
//line views/pipelineEditPage.qtpl:217
		qw422016.E().S(step.Id)
//line views/pipelineEditPage.qtpl:217
		qw422016.N().S(`')">
                <iconify-icon icon="basil:trash-solid" width="100%" height="100%" class="text-white"></iconify-icon>
            </div>
        </div>
    `)
//line views/pipelineEditPage.qtpl:221
	}
//line views/pipelineEditPage.qtpl:221
	qw422016.N().S(`
`)
//line views/pipelineEditPage.qtpl:222
}

//line views/pipelineEditPage.qtpl:222
func WriteRenderPipelineStepsSortable(qq422016 qtio422016.Writer, steps []api.UserWorker) {
//line views/pipelineEditPage.qtpl:222
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:222
	StreamRenderPipelineStepsSortable(qw422016, steps)
//line views/pipelineEditPage.qtpl:222
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:222
}

//line views/pipelineEditPage.qtpl:222
func RenderPipelineStepsSortable(steps []api.UserWorker) string {
//line views/pipelineEditPage.qtpl:222
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:222
	WriteRenderPipelineStepsSortable(qb422016, steps)
//line views/pipelineEditPage.qtpl:222
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:222
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:222
	return qs422016
//line views/pipelineEditPage.qtpl:222
}

//line views/pipelineEditPage.qtpl:224
func StreamRenderPipelineDetailEditor(qw422016 *qt422016.Writer) {
//line views/pipelineEditPage.qtpl:224
	qw422016.N().S(`
 // TODO
`)
//line views/pipelineEditPage.qtpl:226
}

//line views/pipelineEditPage.qtpl:226
func WriteRenderPipelineDetailEditor(qq422016 qtio422016.Writer) {
//line views/pipelineEditPage.qtpl:226
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:226
	StreamRenderPipelineDetailEditor(qw422016)
//line views/pipelineEditPage.qtpl:226
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:226
}

//line views/pipelineEditPage.qtpl:226
func RenderPipelineDetailEditor() string {
//line views/pipelineEditPage.qtpl:226
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:226
	WriteRenderPipelineDetailEditor(qb422016)
//line views/pipelineEditPage.qtpl:226
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:226
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:226
	return qs422016
//line views/pipelineEditPage.qtpl:226
}

//line views/pipelineEditPage.qtpl:228
func StreamRenderPipelineEditWorkerTable(qw422016 *qt422016.Writer, workers []api.UserWorker, nextPage string) {
//line views/pipelineEditPage.qtpl:228
	qw422016.N().S(`
    <table class="w-full text-sm border-separate border-spacing-0" id="device-table">
        <thead class="text-left text-slate-500 sticky top-0 bg-white">
            <tr class="h-10">
                <th class="font-normal border-b align-middle px-4">
                    Name
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Revision
                </th>
                <th class="font-normal border-b align-middle px-4">
                    ID
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Description
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Language
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            `)
//line views/pipelineEditPage.qtpl:253
	StreamRenderPipelineEditWorkerTableRows(qw422016, workers, nextPage)
//line views/pipelineEditPage.qtpl:253
	qw422016.N().S(`
        </tbody>
    </table>
`)
//line views/pipelineEditPage.qtpl:256
}

//line views/pipelineEditPage.qtpl:256
func WriteRenderPipelineEditWorkerTable(qq422016 qtio422016.Writer, workers []api.UserWorker, nextPage string) {
//line views/pipelineEditPage.qtpl:256
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:256
	StreamRenderPipelineEditWorkerTable(qw422016, workers, nextPage)
//line views/pipelineEditPage.qtpl:256
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:256
}

//line views/pipelineEditPage.qtpl:256
func RenderPipelineEditWorkerTable(workers []api.UserWorker, nextPage string) string {
//line views/pipelineEditPage.qtpl:256
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:256
	WriteRenderPipelineEditWorkerTable(qb422016, workers, nextPage)
//line views/pipelineEditPage.qtpl:256
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:256
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:256
	return qs422016
//line views/pipelineEditPage.qtpl:256
}

//line views/pipelineEditPage.qtpl:258
func StreamRenderPipelineEditWorkerTableRows(qw422016 *qt422016.Writer, workers []api.UserWorker, nextPage string) {
//line views/pipelineEditPage.qtpl:258
	qw422016.N().S(`
    `)
//line views/pipelineEditPage.qtpl:259
	for ix, worker := range workers {
//line views/pipelineEditPage.qtpl:259
		qw422016.N().S(`
    <tr
        class="hover:bg-slate-50 group"
        `)
//line views/pipelineEditPage.qtpl:262
		if nextPage != "" && ix == len(workers)-1 {
//line views/pipelineEditPage.qtpl:262
			qw422016.N().S(`
        hx-trigger="revealed"
        hx-target="this"
        hx-swap="afterend"
        hx-get="`)
//line views/pipelineEditPage.qtpl:266
			qw422016.E().S(nextPage)
//line views/pipelineEditPage.qtpl:266
			qw422016.N().S(`"
        `)
//line views/pipelineEditPage.qtpl:267
		}
//line views/pipelineEditPage.qtpl:267
		qw422016.N().S(`
    >
        <td class="border-b"><a
            class="flex items-center px-4 h-10 text-primary-700 group-hover:underline"
            href="`)
//line views/pipelineEditPage.qtpl:271
		qw422016.E().S(u("/workers/%s", worker.Id))
//line views/pipelineEditPage.qtpl:271
		qw422016.N().S(`"
            hx-target="main"
        >`)
//line views/pipelineEditPage.qtpl:273
		qw422016.E().S(worker.Name)
//line views/pipelineEditPage.qtpl:273
		qw422016.N().S(`</a></td>
        <td class="px-4 h-10 border-b">`)
//line views/pipelineEditPage.qtpl:274
		qw422016.N().D(int(worker.Revision))
//line views/pipelineEditPage.qtpl:274
		qw422016.N().S(`</td>
        <td class="px-4 h-10 border-b">`)
//line views/pipelineEditPage.qtpl:275
		qw422016.E().S(worker.Id)
//line views/pipelineEditPage.qtpl:275
		qw422016.N().S(`</td>
        <td class="px-4 h-10 border-b">`)
//line views/pipelineEditPage.qtpl:276
		qw422016.E().S(worker.Description)
//line views/pipelineEditPage.qtpl:276
		qw422016.N().S(`</td>
        <td class="px-4 h-10 border-b">Python</td>
        <td class="px-4 h-10 border-b">
            <button onclick="addSortable('`)
//line views/pipelineEditPage.qtpl:279
		qw422016.E().S(worker.Name)
//line views/pipelineEditPage.qtpl:279
		qw422016.N().S(`', '`)
//line views/pipelineEditPage.qtpl:279
		qw422016.E().S(worker.Id)
//line views/pipelineEditPage.qtpl:279
		qw422016.N().S(`')" class="text-xs bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                Add
            </button>              
        </td>
        <!-- opacity-50 cursor-not-allowed pointer-events-none  -->
    </tr>
    `)
//line views/pipelineEditPage.qtpl:285
	}
//line views/pipelineEditPage.qtpl:285
	qw422016.N().S(`
`)
//line views/pipelineEditPage.qtpl:286
}

//line views/pipelineEditPage.qtpl:286
func WriteRenderPipelineEditWorkerTableRows(qq422016 qtio422016.Writer, workers []api.UserWorker, nextPage string) {
//line views/pipelineEditPage.qtpl:286
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/pipelineEditPage.qtpl:286
	StreamRenderPipelineEditWorkerTableRows(qw422016, workers, nextPage)
//line views/pipelineEditPage.qtpl:286
	qt422016.ReleaseWriter(qw422016)
//line views/pipelineEditPage.qtpl:286
}

//line views/pipelineEditPage.qtpl:286
func RenderPipelineEditWorkerTableRows(workers []api.UserWorker, nextPage string) string {
//line views/pipelineEditPage.qtpl:286
	qb422016 := qt422016.AcquireByteBuffer()
//line views/pipelineEditPage.qtpl:286
	WriteRenderPipelineEditWorkerTableRows(qb422016, workers, nextPage)
//line views/pipelineEditPage.qtpl:286
	qs422016 := string(qb422016.B)
//line views/pipelineEditPage.qtpl:286
	qt422016.ReleaseByteBuffer(qb422016)
//line views/pipelineEditPage.qtpl:286
	return qs422016
//line views/pipelineEditPage.qtpl:286
}

//line views/pipelineEditPage.qtpl:289
type PipelineEditPage struct {
	BasePage
	Pipeline          *api.Pipeline
	WorkersInPipeline *[]api.UserWorker
	Workers           []api.UserWorker
	WorkersNextPage   string
}
