{% import "sensorbucket.nl/sensorbucket/pkg/api" %}

{% func (p *DeviceListPage) Body() %}
    <div class="mx-auto w-full xl:w-2/3 flex flex-col gap-6">
        <div class="grid lg:grid-cols-4 gap-x-4 gap-y-1">
            {%= RenderFilters(p.SensorGroup, false) %}
        </div>

        <div class="bg-white border rounded-md" >
            {%= RenderMap(p.SensorGroup) %}
        </div>

        <div class="bg-white border rounded-md min-h-96 max-h-[90vh] lg:max-h-[50vh] overflow-y-auto">
            {%= RenderDeviceTable(p.Devices, p.DevicesNextPage) %}
        </div>
    </div>
{% endfunc %}

{% func RenderFilters(sensorGroup *api.SensorGroup, oob bool) %}
    <fieldset
        id="filters"
        class="relative col-span-2"
        {% if oob %}
            hx-swap-oob="true"
        {% endif %}
    >
        <label for="sensor-group-search" class="ml-1 -mb-1 block"><small class="text-xs text-slate-500">Sensor group</small></label>
        {% if sensorGroup == nil %}
            <input
                type="text" name="search" id="sensor-group-search"

                class="block w-full px-2 py-1 border rounded-md bg-white placeholder:text-slate-600"
                hx-trigger="keyup changed delay:500ms, search"
                hx-get="/overview/sensor-groups"
                hx-target="next ul"
                _="on blur wait 50ms add .hidden to next <ul/> on focus remove .hidden from next <ul/>"
            />
            <ul class="absolute top-full left-0 right-0 block rounded-md rounded-t-none bg-white z-[4000]
                        text-sm">
                
            </ul>
        {% else %}
            <a
                href="/overview"
                hx-delete="/overview/sensor-groups"
                hx-target="#device-table"
                class="w-full px-2 py-1 border rounded-md text-primary-600 flex justify-between items-center"
            >
                {%s sensorGroup.Name %}
                <iconify-icon icon="charm:cross" class="text-rose-500"></iconify-icon>
            </a>
        {% endif %}
    </fieldset>
{% endfunc %}

{% func SensorGroupSearch(sgs []api.SensorGroup) %}
    {% for _, sg := range sgs %}
        <li>
            <a
                href="?sensor_group={%dl sg.Id %}"
                hx-post="/overview/sensor-groups?sensor_group={%dl sg.Id %}"
                hx-target="#device-table"
                class="block hover:bg-primary-100 p-2"
            >{%s sg.Name %}</a>
        </li>
    {% endfor %}
{% endfunc %}

{% func RenderDeviceTable(devices []api.Device, nextPage string) %}
    <table class="w-full text-sm border-separate border-spacing-0" id="device-table">
        <thead class="text-left text-slate-500 sticky top-0 bg-white">
            <tr class="h-10">
                <th class="font-normal border-b align-middle px-4">
                    Device ID
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Device Code
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Device Description
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Device Location Description
                </th>
            </tr>
        </thead>
        <tbody>
            {%= RenderDeviceTableRows(devices, nextPage) %}
        </tbody>
    </table>
{% endfunc %}

{% func RenderDeviceTableRows(devices []api.Device, nextPage string) %}
    {% for ix, dev := range devices %}
    <tr
        class="hover:bg-slate-50 group"
        {% if nextPage != "" && ix == len(devices)-1 %}
        hx-trigger="revealed"
        hx-target="this"
        hx-swap="afterend"
        hx-get="{%s nextPage %}"
        {% endif %}
    >
        <td class="px-4 h-10 border-b">{%dl dev.Id %}</td>
        <td class="border-b"><a
            class="flex items-center px-4 h-10 text-primary-700 group-hover:underline"
            href="/overview/devices/{%dl dev.Id %}"
            hx-target="main"
        >{%s dev.Code %}</a></td>
        <td class="px-4 h-10 border-b">{%s dev.Description %}</td>
        <td class="px-4 h-10 border-b">{%s dev.GetLocationDescription() %}</td>
    </tr>
    {% endfor %}
{% endfunc %}

{% func RenderMap(sensorGroup *api.SensorGroup) %}
    <div 
        hx-ext="leaflet"
        class="w-full h-96"
        id="device-map"
    >
        <script type="text/javascript">
        function getWebSocketURL(path) {
            const loc = window.location;
            let newUri;

            if (loc.protocol === "https:") {
                newUri = "wss:";
            } else {
                newUri = "ws:";
            }
            
            newUri += "//" + loc.host + path;
            
            return newUri;
        }
        (() => {
            const devmap = htmx.find("#device-map")
            let map;
            let markerLayer;
            let ws;

            function replaceDevices() {
                // Remove old
                if (ws != undefined) ws.close();
                if (markerLayer != undefined) markerLayer.remove()

                // New layer
                markerLayer = L.markerClusterGroup()
                map.addLayer(markerLayer);

                // Fetch news
                ws = new WebSocket(getWebSocketURL("/overview/devices/stream-map" + location.search))
                ws.onmessage = (event) => {
                    const data = JSON.parse(event.data)
                    const marker = L.marker(data.coordinates).addTo(markerLayer)
                    marker.on('click', evt => {
                        const url = "/overview/devices/" + data.device_id;
                        htmx.ajax("GET", url, "main").then(() => {
                            window.history.pushState({}, null, url)
                        })
                    })
                    marker.bindTooltip(data.device_code)
                }
            }
            htmx.on(document.body, "newDeviceList", () => {
                replaceDevices()
            })
            async function init() {
                map = devmap.leaflet;
                replaceDevices()
            }

            if (devmap.leaflet !== undefined) {
                init()
            } else {
                devmap.addEventListener('leaflet:init', () => init())
            }
        })()
    </script>
    </div>
{% endfunc %}

{% code
type DeviceListPage struct {
    BasePage
    Devices []api.Device
    DevicesNextPage string
    SensorGroup *api.SensorGroup
}
%}
