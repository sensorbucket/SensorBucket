<!-- 
    Pipeline model
    Workers with pagination
 -->

{% import "sensorbucket.nl/sensorbucket/pkg/api" %}
{% func (p *PipelineEditPage) Body() %}
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-3 xl:grid-cols-3 gap-6">
    <div class="bg-white border rounded-md lg:col-span-3 xl:col-span-1">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Pipeline details
        </header>
        <form id="pipelineEditForm" class="p-4 gap-4 grid lg:grid-cols-1"
                {% if p.Pipeline != nil %}
                    hx-patch="{%s U("/pipelines/edit/%s", p.Pipeline.Id) %}" hx-trigger="form-updated"
                {% else %}
                    hx-post="{%s U("/pipelines/create") %}"
                {% endif %}
                hx-vals="js:{steps: getSteps()}"
                hx-target="#sortableForm">
            {%= p.renderCSRFToken() %}
            <fieldset>
                <label for="pipeline-id" class="ml-1 -mb-1 block"><small class="text-xs text-slate-500">Pipeline ID</small></label>
                <input
                    type="text" name="pipeline-id" id="pipeline-id"
                    class="block w-full px-2 py-1 border rounded-md bg-white text-slate-600"
                    {% if p.Pipeline != nil %}
                        value="{%s p.Pipeline.Id %}"
                    {% endif %}
                    disabled
                />
            </fieldset>
            <fieldset>
                <label for="pipeline-descr" class="ml-1 -mb-1 block"><small class="text-xs text-slate-500">Pipeline Description</small></label>
                <input
                    type="text" name="pipeline-descr" id="pipeline-descr"
                    class="block w-full px-2 py-1 border rounded-md bg-white placeholder:text-slate-600"
                    {% if p.Pipeline != nil %}
                        value="{%s p.Pipeline.Description %}"
                    {% else %}
                        value="New pipeline"
                    {% endif %}
                />
            </fieldset>
            <div class="col-span-full">
                {% if p.Pipeline != nil %}
                    <button
                        type="button"
                        onclick="notify()"
                        class="text-sm bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                    Save
                    </button>
                {% else %}
                    <button
                        class="text-sm bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                        Create
                    </button>
                {% endif %}
            </div>
        </form>
    </div>
    <div class="bg-white lg:col-span-3 xl:col-span-2">
        <div class="bg-white border rounded-md">
            <header class="border-b py-2 px-4 text-sm text-slate-700">
                Pipeline steps
            </header>
            <div class="p-4">
                {%= p.RenderPipelineSteps(p.Pipeline, p.WorkersInPipeline) %}
            </div>
        </div>
    </div>
    <div id="workerTable" class="bg-white border rounded-md lg:col-span-3 xl:col-span-3">
        {%= RenderPipelineEditWorkerTable(p.Workers, p.WorkersNextPage) %}
    </div>
    <template id="sortable-item-staging-template">
        <div class="p-2 w-2/4 mt-1.5 mx-auto text-white bg-orange-400 rounded-lg flex justify-between items-center hidden">
            <input type="hidden" data-worker />
            <div>
                <p class="sortable-title text-lg"></p>
                <p class="sortable-descr text-sm font-thin"></p>
            </div>
            <div class="cursor-pointer w-10 p-2">
                <iconify-icon icon="basil:trash-solid" width="100%" height="100%" class="text-white"></iconify-icon>
            </div>
        </div>
    </template>
</div>
{% endfunc %}

{% func (p *PipelineEditPage) RenderPipelineSteps(pipeline *api.Pipeline, workers *[]api.UserWorker) %}
    <script type="module">
        import '{%s U("/static/sortable.js") %}';
        htmx.onLoad(function(content) {
            // Make the steps list sortable
            let sortables = content.querySelectorAll(".sortable");
           
            const ghostStyles = ['border-dashed', 'border-2', 'border-sky-500', 'bg-white', 'shadow-lg', 'shadow-cyan-500/50'];
            for (var i = 0; i < sortables.length; i++) {
                    let sortable = sortables[i];
                    let sort = new Sortable(sortable, {
                        animation: 150,

                        // Unfortunately the Sortable JS library does not offer support for multiple classes as the ghost class.
                        // To style it using Tailwind a small hack is required
                        onStart: function(evt) {
                            ghostStyles.forEach((item) => evt.item.classList.add(item));
                        },
                        onEnd: function(evt) {
                            ghostStyles.forEach((item) => evt.item.classList.remove(item));
                            reorderSortables();
                        }
                    });
                }
        })

        function reorderSortables() {
            let sortables = document.querySelectorAll(".sortable");
            for (var i = 0; i < sortables.length; i++) {
                // Update the index for each input item
                let values = [];
                let inputs = sortables[i].querySelectorAll("input[data-worker]");
                for (let i = 0; i < inputs.length; i++) {
                    inputs[i].value = i;
                    values.push(inputs[i].name);
                }
                
            }
            notify();
        }

        function addSortable(workerName, workerId) {
            // Clone the template element and remove the 'hidden' class
            const template = document.getElementById("sortable-item-staging-template");
            const newItem = template.content.cloneNode(true);
            newItem.children[0].classList.remove("hidden");
            newItem.children[0].id = "sortable-item-" + workerId;

            const titleElement = newItem.querySelector(".sortable-title");
            titleElement.textContent = workerName;

            const sortableForm = document.getElementById("sortableForm");
            const inputElement = newItem.querySelector("input[type='hidden'][data-worker]");
            inputElement.value = sortableForm.querySelectorAll("input[data-worker]").length;
            inputElement.name = workerId;

            sortableForm.appendChild(newItem);

            notify();
        }
        window.addSortable = addSortable

        function removeFromSortable(name) {
            const el = document.getElementById("sortable-item-" + name);
            el.remove();
            
            reorderSortables();
            
            notify();
        }
        window.removeFromSortable = removeFromSortable

        function getSteps() {
            const form = document.getElementById('sortableForm');

            // Create a FormData object from the form
            const formData = new FormData(form);
            let data = []
            for (var [key, value] of formData.entries()) { 
                if (key == "csrf_token") continue;
                data.push(key)
            }

            return data;
        }
        window.getSteps = getSteps

        function notify() {
            const sortableForm = document.getElementById('sortableForm');
            const mainForm = document.getElementById('pipelineEditForm');

            // Now fire the event triggering HTMX to update the pipeline in the backend
            mainForm.dispatchEvent(new Event("form-updated"));
            sortableForm.dispatchEvent(new Event("form-updated"));
        }
    </script>
     <div id="stepsIndicator" class="htmx-indicator w-full h-full flex justify-center">
        <iconify-icon icon="eos-icons:loading" width="15" class="text-secondary-600"></iconify-icon>
    </div>
    <form id="sortableForm" name="sortable" class="sortable" hx-indicator="#stepsIndicator" hx-vals="js:{steps: getSteps()}"
        {% if pipeline == nil %}
            hx-patch="{%s U("/pipelines/validate") %}" hx-trigger="form-updated"
        {% endif %}>
        {% if workers != nil %}
            {%= RenderPipelineStepsSortable(p.CSRFToken, *workers) %}
        {% else %}
            {%= p.renderCSRFToken() %}
        {% endif %}
    </form>
{% endfunc %}

{% func RenderPipelineStepsSortable(csrfToken string, steps []api.UserWorker) %}
    {%= renderCSRFToken(csrfToken) %}
    {% for ix, step := range steps %}
        <div id="sortable-item-{%s step.Id %}" class="p-2 w-2/4 mt-1.5 mx-auto text-white bg-secondary-600 rounded-lg flex justify-between items-center">
            <input type="hidden" name="{%s step.Id %}" value="{%d ix %}" />
            <div>
                <p class="text-lg">{%s step.Name %} v{%v step.Revision %}</p>
                <p class="text-sm font-thin">{%s step.Description %}</p>
            </div>
            <div class="cursor-pointer w-10 p-2" onclick="removeFromSortable('{%s step.Id %}')">
                <iconify-icon icon="basil:trash-solid" width="100%" height="100%" class="text-white"></iconify-icon>
            </div>
        </div>
    {% endfor %}
{% endfunc %}

{% func RenderPipelineDetailEditor() %}
 // TODO
{% endfunc %}

{% func RenderPipelineEditWorkerTable(workers []api.UserWorker, nextPage string) %}
    <table class="w-full text-sm border-separate border-spacing-0" id="device-table">
        <thead class="text-left text-slate-500 sticky top-0 bg-white">
            <tr class="h-10">
                <th class="font-normal border-b align-middle px-4">
                    Name
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Revision
                </th>
                <th class="font-normal border-b align-middle px-4">
                    ID
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Description
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Language
                </th>
                <th class="font-normal border-b align-middle px-4">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            {%= RenderPipelineEditWorkerTableRows(workers, nextPage) %}
        </tbody>
    </table>
{% endfunc %}

{% func RenderPipelineEditWorkerTableRows(workers []api.UserWorker, nextPage string) %}
    {% for ix, worker := range workers %}
    <tr
        class="hover:bg-slate-50 group"
        {% if nextPage != "" && ix == len(workers)-1 %}
        hx-trigger="revealed"
        hx-target="this"
        hx-swap="afterend"
        hx-get="{%s nextPage %}"
        {% endif %}
    >
        <td class="border-b"><a
            class="flex items-center px-4 h-10 text-primary-700 group-hover:underline"
            href="{%s U("/workers/%s", worker.Id) %}"
            hx-target="main"
        >{%s worker.Name %}</a></td>
        <td class="px-4 h-10 border-b">{%d int(worker.Revision) %}</td>
        <td class="px-4 h-10 border-b">{%s worker.Id %}</td>
        <td class="px-4 h-10 border-b">{%s worker.Description %}</td>
        <td class="px-4 h-10 border-b">Python</td>
        <td class="px-4 h-10 border-b">
            <button onclick="addSortable('{%s worker.Name %}', '{%s worker.Id %}')" class="text-xs bg-emerald-400 hover:bg-emerald-500 text-white border border-emerald-500 rounded px-2 py-1">
                Add
            </button>              
        </td>
        <!-- opacity-50 cursor-not-allowed pointer-events-none  -->
    </tr>
    {% endfor %}
{% endfunc %}

{% code
type PipelineEditPage struct {
BasePage
Pipeline *api.Pipeline
WorkersInPipeline *[]api.UserWorker
Workers []api.UserWorker
WorkersNextPage string
}
%}
