// Code generated by qtc from "datastream.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line services/dashboard/views/datastream.qtpl:1
package views

//line services/dashboard/views/datastream.qtpl:1
import "sensorbucket.nl/sensorbucket/services/core/devices"

//line services/dashboard/views/datastream.qtpl:2
import "sensorbucket.nl/sensorbucket/services/core/measurements"

//line services/dashboard/views/datastream.qtpl:3
import "time"

//line services/dashboard/views/datastream.qtpl:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line services/dashboard/views/datastream.qtpl:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line services/dashboard/views/datastream.qtpl:5
func (p *DatastreamPage) StreamBody(qw422016 *qt422016.Writer) {
//line services/dashboard/views/datastream.qtpl:5
	qw422016.N().S(`
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-1 xl:grid-cols-3 gap-6">
    <div class="bg-white rounded-md border" id="map">
        `)
//line services/dashboard/views/datastream.qtpl:8
	streamrenderDeviceMap(qw422016, p.Device)
//line services/dashboard/views/datastream.qtpl:8
	qw422016.N().S(`
    </div>
    <div class="bg-white rounded-md border" id="device">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Device details
        </header>
        <div class="p-4">
            `)
//line services/dashboard/views/datastream.qtpl:15
	StreamDeviceDetailBlock(qw422016, p.Device)
//line services/dashboard/views/datastream.qtpl:15
	qw422016.N().S(`
        </div>
    </div>
    <div class="bg-white rounded-md border" id="sensor">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Sensor details
        </header>
        <div class="p-4">
            `)
//line services/dashboard/views/datastream.qtpl:23
	StreamDeviceDetailBlock(qw422016, p.Device)
//line services/dashboard/views/datastream.qtpl:23
	qw422016.N().S(`
        </div>
    </div>
    <div class="bg-white rounded-md border col-span-full">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Datastream
        </header>
        <div class="px-4 pt-4 pb-10">
            `)
//line services/dashboard/views/datastream.qtpl:31
	streamrenderDataStream(qw422016, p.Datastream)
//line services/dashboard/views/datastream.qtpl:31
	qw422016.N().S(`
        </div>
    </div>
</div>
`)
//line services/dashboard/views/datastream.qtpl:35
}

//line services/dashboard/views/datastream.qtpl:35
func (p *DatastreamPage) WriteBody(qq422016 qtio422016.Writer) {
//line services/dashboard/views/datastream.qtpl:35
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services/dashboard/views/datastream.qtpl:35
	p.StreamBody(qw422016)
//line services/dashboard/views/datastream.qtpl:35
	qt422016.ReleaseWriter(qw422016)
//line services/dashboard/views/datastream.qtpl:35
}

//line services/dashboard/views/datastream.qtpl:35
func (p *DatastreamPage) Body() string {
//line services/dashboard/views/datastream.qtpl:35
	qb422016 := qt422016.AcquireByteBuffer()
//line services/dashboard/views/datastream.qtpl:35
	p.WriteBody(qb422016)
//line services/dashboard/views/datastream.qtpl:35
	qs422016 := string(qb422016.B)
//line services/dashboard/views/datastream.qtpl:35
	qt422016.ReleaseByteBuffer(qb422016)
//line services/dashboard/views/datastream.qtpl:35
	return qs422016
//line services/dashboard/views/datastream.qtpl:35
}

//line services/dashboard/views/datastream.qtpl:37
func streamrenderDataStream(qw422016 *qt422016.Writer, ds measurements.Datastream) {
//line services/dashboard/views/datastream.qtpl:37
	qw422016.N().S(`
    <div id="chart" class="w-full h-80"></div>
    <script type="text/javascript">
    {
        function getWebSocketURL(path) {
            const loc = window.location;
            let newUri;

            if (loc.protocol === "https:") {
                newUri = "wss:";
            } else {
                newUri = "ws:";
            }
            
            newUri += "//" + loc.host + path;
            
            return newUri;
        }
        function init() {
            const target = htmx.find("#chart")
            const x = [];
            const y = [];

            const opts = {
                width: target.clientWidth,
                height: target.clientHeight,
                title: "",
                scales: {
                    x: {
                        time: true,
                    },
                    y: {                    
                    }
                },
                series: [
                    {},
                    {
                        stroke: "red",
                        label: "`)
//line services/dashboard/views/datastream.qtpl:75
	qw422016.E().S(ds.ObservedProperty)
//line services/dashboard/views/datastream.qtpl:75
	qw422016.N().S(` (`)
//line services/dashboard/views/datastream.qtpl:75
	qw422016.E().S(ds.UnitOfMeasurement)
//line services/dashboard/views/datastream.qtpl:75
	qw422016.N().S(`)"
                    }
                ]
            };

            const plot = new uPlot(opts, [x,y], target)

            const ws = new WebSocket(getWebSocketURL("/overview/datastreams/`)
//line services/dashboard/views/datastream.qtpl:82
	qw422016.E().S(ds.ID.String())
//line services/dashboard/views/datastream.qtpl:82
	qw422016.N().S(`/stream?start=`)
//line services/dashboard/views/datastream.qtpl:82
	qw422016.E().S(time.Now().Format(time.RFC3339))
//line services/dashboard/views/datastream.qtpl:82
	qw422016.N().S(`"))
            ws.onmessage = (event) => {
                const reader = new FileReader();
                reader.onload = function() {
                    const buffer = this.result;
                    const view = new DataView(buffer);

                    // Get the timestamp and value
                    const ts = Number(view.getBigUint64(0, false))/1000; // get timestamp from the first 8 bytes
                    const val = view.getFloat64(8, false);  // get float64 value from the next 8 bytes

                    // Prepend to the existing arrays
                    x.unshift(ts);
                    y.unshift(val);

                    plot.setData([x, y]);
                };
                reader.readAsArrayBuffer(event.data);
            }
        }
        (() => init())()
    }
    </script>
`)
//line services/dashboard/views/datastream.qtpl:105
}

//line services/dashboard/views/datastream.qtpl:105
func writerenderDataStream(qq422016 qtio422016.Writer, ds measurements.Datastream) {
//line services/dashboard/views/datastream.qtpl:105
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services/dashboard/views/datastream.qtpl:105
	streamrenderDataStream(qw422016, ds)
//line services/dashboard/views/datastream.qtpl:105
	qt422016.ReleaseWriter(qw422016)
//line services/dashboard/views/datastream.qtpl:105
}

//line services/dashboard/views/datastream.qtpl:105
func renderDataStream(ds measurements.Datastream) string {
//line services/dashboard/views/datastream.qtpl:105
	qb422016 := qt422016.AcquireByteBuffer()
//line services/dashboard/views/datastream.qtpl:105
	writerenderDataStream(qb422016, ds)
//line services/dashboard/views/datastream.qtpl:105
	qs422016 := string(qb422016.B)
//line services/dashboard/views/datastream.qtpl:105
	qt422016.ReleaseByteBuffer(qb422016)
//line services/dashboard/views/datastream.qtpl:105
	return qs422016
//line services/dashboard/views/datastream.qtpl:105
}

//line services/dashboard/views/datastream.qtpl:108
type DatastreamPage struct {
	BasePage
	Device     devices.Device
	Sensor     devices.Sensor
	Datastream measurements.Datastream
}
