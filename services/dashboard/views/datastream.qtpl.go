// Code generated by qtc from "datastream.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line services/dashboard/views/datastream.qtpl:1
package views

//line services/dashboard/views/datastream.qtpl:1
import "sensorbucket.nl/sensorbucket/services/core/devices"

//line services/dashboard/views/datastream.qtpl:2
import "sensorbucket.nl/sensorbucket/services/core/measurements"

//line services/dashboard/views/datastream.qtpl:3
import "time"

//line services/dashboard/views/datastream.qtpl:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line services/dashboard/views/datastream.qtpl:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line services/dashboard/views/datastream.qtpl:5
func (p *DatastreamPage) StreamBody(qw422016 *qt422016.Writer) {
//line services/dashboard/views/datastream.qtpl:5
	qw422016.N().S(`
<header class="flex justify-between items-center">
    <div class="flex gap-3 text-sm my-4 italic items-center">
        <a href="/overview" class="hover:underline text-sky-600">Devices</a>
        <span>/</span>
        <a href="/overview/devices/`)
//line services/dashboard/views/datastream.qtpl:10
	qw422016.N().DL(p.Device.ID)
//line services/dashboard/views/datastream.qtpl:10
	qw422016.N().S(`" class="hover:underline text-sky-600">`)
//line services/dashboard/views/datastream.qtpl:10
	qw422016.E().S(p.Device.Code)
//line services/dashboard/views/datastream.qtpl:10
	qw422016.N().S(`</a>
        <span>/</span>
        <a href="/overview/devices/`)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.N().DL(p.Device.ID)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.N().S(`/sensors/`)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.E().S(p.Sensor.Code)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.N().S(`" class="hover:underline text-sky-600">`)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.E().S(p.Sensor.Code)
//line services/dashboard/views/datastream.qtpl:12
	qw422016.N().S(`</a>
        <span>/</span>
        <span>`)
//line services/dashboard/views/datastream.qtpl:14
	qw422016.E().S(p.Datastream.ID.String())
//line services/dashboard/views/datastream.qtpl:14
	qw422016.N().S(`</span>
    </div>

    <script type="text/javascript">
    function updateQueryParam(name, value) {
        let urlParams = new URLSearchParams(window.location.search)
        urlParams.set(name, value)
        window.history.replaceState({}, '', '?' + urlParams.toString())
    }
    </script>
    <div class="flex gap-2 text-sm">
            <fieldset class="relative col-span-2">
                <label for="start" class="absolute bottom-full ml-1 -mb-1 block"><small class="text-xs text-slate-500">Start</small></label>
                <input type="date" name="start" value="`)
//line services/dashboard/views/datastream.qtpl:27
	qw422016.E().S(p.Start.Format("2006-01-02"))
//line services/dashboard/views/datastream.qtpl:27
	qw422016.N().S(`" 
                    class="border px-2 py-1 rounded-md bg-white text-slate-700"
                    _="on change debounced at 500ms call updateQueryParam(me.name, me.value) then trigger updateDatastream on body"
                />
            </fieldset>
            <fieldset class="relative col-span-2">
                <label for="end" class="absolute bottom-full ml-1 -mb-1 block"><small class="text-xs text-slate-500">End</small></label>
                <input type="date" name="end" value="`)
//line services/dashboard/views/datastream.qtpl:34
	qw422016.E().S(p.End.Format("2006-01-02"))
//line services/dashboard/views/datastream.qtpl:34
	qw422016.N().S(`" 
                    class="border px-2 py-1 rounded-md bg-white text-slate-700"
                    _="on change debounced at 500ms call updateQueryParam(me.name, me.value) then trigger updateDatastream on body"
                />
            </fieldset>
    </div>
</header>
<div class="mx-auto flex flex-col lg:grid lg:grid-cols-1 xl:grid-cols-3 gap-6">
    <div class="bg-white rounded-md border col-span-full">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Datastream
        </header>
        <div class="h-96 p-4">
            <header class="flex justify-between text-sm text-slate-600">
                <small>`)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.E().S(p.Device.Code)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.N().S(` - `)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.E().S(p.Sensor.Code)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.N().S(` - `)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.E().S(p.Datastream.ObservedProperty)
//line services/dashboard/views/datastream.qtpl:48
	qw422016.N().S(`</small>
                <small>`)
//line services/dashboard/views/datastream.qtpl:49
	qw422016.E().S(p.Datastream.Description)
//line services/dashboard/views/datastream.qtpl:49
	qw422016.N().S(`</small>
                <small>`)
//line services/dashboard/views/datastream.qtpl:50
	qw422016.E().S(p.Datastream.ID.String())
//line services/dashboard/views/datastream.qtpl:50
	qw422016.N().S(`</small>
            </header>
            `)
//line services/dashboard/views/datastream.qtpl:52
	streamrenderDataStream(qw422016, p.Datastream, p.Start, p.End)
//line services/dashboard/views/datastream.qtpl:52
	qw422016.N().S(`
        </div>
    </div>
    <div class="bg-white rounded-md border" id="map">
        `)
//line services/dashboard/views/datastream.qtpl:56
	streamrenderDeviceMap(qw422016, p.Device)
//line services/dashboard/views/datastream.qtpl:56
	qw422016.N().S(`
    </div>
    <div class="bg-white rounded-md border" id="device">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Device details
        </header>
        <div class="p-4">
            `)
//line services/dashboard/views/datastream.qtpl:63
	StreamDeviceDetailBlock(qw422016, p.Device)
//line services/dashboard/views/datastream.qtpl:63
	qw422016.N().S(`
        </div>
    </div>
    <div class="bg-white rounded-md border" id="sensor">
        <header class="border-b py-2 px-4 text-sm text-slate-700">
            Sensor details
        </header>
        <div class="p-4">
            `)
//line services/dashboard/views/datastream.qtpl:71
	StreamSensorDetailBlock(qw422016, p.Sensor)
//line services/dashboard/views/datastream.qtpl:71
	qw422016.N().S(`
        </div>
    </div>
</div>
`)
//line services/dashboard/views/datastream.qtpl:75
}

//line services/dashboard/views/datastream.qtpl:75
func (p *DatastreamPage) WriteBody(qq422016 qtio422016.Writer) {
//line services/dashboard/views/datastream.qtpl:75
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services/dashboard/views/datastream.qtpl:75
	p.StreamBody(qw422016)
//line services/dashboard/views/datastream.qtpl:75
	qt422016.ReleaseWriter(qw422016)
//line services/dashboard/views/datastream.qtpl:75
}

//line services/dashboard/views/datastream.qtpl:75
func (p *DatastreamPage) Body() string {
//line services/dashboard/views/datastream.qtpl:75
	qb422016 := qt422016.AcquireByteBuffer()
//line services/dashboard/views/datastream.qtpl:75
	p.WriteBody(qb422016)
//line services/dashboard/views/datastream.qtpl:75
	qs422016 := string(qb422016.B)
//line services/dashboard/views/datastream.qtpl:75
	qt422016.ReleaseByteBuffer(qb422016)
//line services/dashboard/views/datastream.qtpl:75
	return qs422016
//line services/dashboard/views/datastream.qtpl:75
}

//line services/dashboard/views/datastream.qtpl:77
func streamrenderDataStream(qw422016 *qt422016.Writer, ds measurements.Datastream, start, end time.Time) {
//line services/dashboard/views/datastream.qtpl:77
	qw422016.N().S(`
    <div id="chart" class="w-full h-full">
    </div>
    <script type="text/javascript">
    {
        function getWebSocketURL(path) {
            const loc = window.location;
            let newUri;

            if (loc.protocol === "https:") {
                newUri = "wss:";
            } else {
                newUri = "ws:";
            }
            
            newUri += "//" + loc.host + path;
            
            return newUri;
        }
        let plot;
        function updateDatastream() {
            let x = [];
            let y = [];
            let start = document.querySelector('input[name="start"').value
            let end = document.querySelector('input[name="end"').value
            plot.setScale('x', {min: start, max: end});
            const ws = new WebSocket(getWebSocketURL(`)
//line services/dashboard/views/datastream.qtpl:77
	qw422016.N().S("`")
//line services/dashboard/views/datastream.qtpl:77
	qw422016.N().S(`/overview/datastreams/`)
//line services/dashboard/views/datastream.qtpl:103
	qw422016.E().S(ds.ID.String())
//line services/dashboard/views/datastream.qtpl:103
	qw422016.N().S(`/stream?start=${start}&end=${end}`)
//line services/dashboard/views/datastream.qtpl:103
	qw422016.N().S("`")
//line services/dashboard/views/datastream.qtpl:103
	qw422016.N().S(`))
            ws.onmessage = (event) => {
                const reader = new FileReader();
                reader.onload = function() {
                    const buffer = this.result;
                    const view = new DataView(buffer);

                    // Get the timestamp and value
                    const ts = Number(view.getBigUint64(0, false))/1000; // get timestamp from the first 8 bytes
                    const val = view.getFloat64(8, false);  // get float64 value from the next 8 bytes

                    // Prepend to the existing arrays
                    x.unshift(ts);
                    y.unshift(val);

                    plot.setData([x, y]);
                };
                reader.readAsArrayBuffer(event.data);
            }
        }
        function init() {
            const target = htmx.find("#chart")
            const x = [];
            const y = [];

            const opts = {
                width: target.clientWidth,
                height: target.clientHeight - 60,
                scales: {
                    x: {
                        time: true,
                        min: `)
//line services/dashboard/views/datastream.qtpl:134
	qw422016.N().DL(start.Unix())
//line services/dashboard/views/datastream.qtpl:134
	qw422016.N().S(`,
                        max: `)
//line services/dashboard/views/datastream.qtpl:135
	qw422016.N().DL(end.Unix())
//line services/dashboard/views/datastream.qtpl:135
	qw422016.N().S(`,
                    },
                    y: {
                    }
                },
                series: [
                    {},
                    {
                        stroke: "red",
                        label: "`)
//line services/dashboard/views/datastream.qtpl:144
	qw422016.E().S(ds.ObservedProperty)
//line services/dashboard/views/datastream.qtpl:144
	qw422016.N().S(` (`)
//line services/dashboard/views/datastream.qtpl:144
	qw422016.E().S(ds.UnitOfMeasurement)
//line services/dashboard/views/datastream.qtpl:144
	qw422016.N().S(`)"
                    }
                ]
            };

            if (plot == undefined) {
                plot = new uPlot(opts, [x,y], target)
                target.plot = plot;
            }
            htmx.on(document.body, "updateDatastream", () => updateDatastream())
            updateDatastream()
        }
        (() => init())()
    }
    </script>
`)
//line services/dashboard/views/datastream.qtpl:159
}

//line services/dashboard/views/datastream.qtpl:159
func writerenderDataStream(qq422016 qtio422016.Writer, ds measurements.Datastream, start, end time.Time) {
//line services/dashboard/views/datastream.qtpl:159
	qw422016 := qt422016.AcquireWriter(qq422016)
//line services/dashboard/views/datastream.qtpl:159
	streamrenderDataStream(qw422016, ds, start, end)
//line services/dashboard/views/datastream.qtpl:159
	qt422016.ReleaseWriter(qw422016)
//line services/dashboard/views/datastream.qtpl:159
}

//line services/dashboard/views/datastream.qtpl:159
func renderDataStream(ds measurements.Datastream, start, end time.Time) string {
//line services/dashboard/views/datastream.qtpl:159
	qb422016 := qt422016.AcquireByteBuffer()
//line services/dashboard/views/datastream.qtpl:159
	writerenderDataStream(qb422016, ds, start, end)
//line services/dashboard/views/datastream.qtpl:159
	qs422016 := string(qb422016.B)
//line services/dashboard/views/datastream.qtpl:159
	qt422016.ReleaseByteBuffer(qb422016)
//line services/dashboard/views/datastream.qtpl:159
	return qs422016
//line services/dashboard/views/datastream.qtpl:159
}

//line services/dashboard/views/datastream.qtpl:162
type DatastreamPage struct {
	BasePage
	Device     devices.Device
	Sensor     devices.Sensor
	Datastream measurements.Datastream
	Start      time.Time
	End        time.Time
}
