// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package coretransport_test

import (
	"context"
	"github.com/google/uuid"
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/services/core/measurements"
	"sensorbucket.nl/sensorbucket/services/core/transport"
	"sync"
)

// Ensure, that MeasurementServiceMock does implement coretransport.MeasurementService.
// If this is not the case, regenerate this file with moq.
var _ coretransport.MeasurementService = &MeasurementServiceMock{}

// MeasurementServiceMock is a mock implementation of coretransport.MeasurementService.
//
//	func TestSomethingThatUsesMeasurementService(t *testing.T) {
//
//		// make and configure a mocked coretransport.MeasurementService
//		mockedMeasurementService := &MeasurementServiceMock{
//			GetDatastreamFunc: func(contextMoqParam context.Context, uUID uuid.UUID) (*measurements.Datastream, error) {
//				panic("mock out the GetDatastream method")
//			},
//			ListDatastreamsFunc: func(contextMoqParam context.Context, datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error) {
//				panic("mock out the ListDatastreams method")
//			},
//			QueryMeasurementsFunc: func(contextMoqParam context.Context, filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error) {
//				panic("mock out the QueryMeasurements method")
//			},
//		}
//
//		// use mockedMeasurementService in code that requires coretransport.MeasurementService
//		// and then make assertions.
//
//	}
type MeasurementServiceMock struct {
	// GetDatastreamFunc mocks the GetDatastream method.
	GetDatastreamFunc func(contextMoqParam context.Context, uUID uuid.UUID) (*measurements.Datastream, error)

	// ListDatastreamsFunc mocks the ListDatastreams method.
	ListDatastreamsFunc func(contextMoqParam context.Context, datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error)

	// QueryMeasurementsFunc mocks the QueryMeasurements method.
	QueryMeasurementsFunc func(contextMoqParam context.Context, filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDatastream holds details about calls to the GetDatastream method.
		GetDatastream []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UUID is the uUID argument value.
			UUID uuid.UUID
		}
		// ListDatastreams holds details about calls to the ListDatastreams method.
		ListDatastreams []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DatastreamFilter is the datastreamFilter argument value.
			DatastreamFilter measurements.DatastreamFilter
			// Request is the request argument value.
			Request pagination.Request
		}
		// QueryMeasurements holds details about calls to the QueryMeasurements method.
		QueryMeasurements []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Filter is the filter argument value.
			Filter measurements.Filter
			// Request is the request argument value.
			Request pagination.Request
		}
	}
	lockGetDatastream     sync.RWMutex
	lockListDatastreams   sync.RWMutex
	lockQueryMeasurements sync.RWMutex
}

// GetDatastream calls GetDatastreamFunc.
func (mock *MeasurementServiceMock) GetDatastream(contextMoqParam context.Context, uUID uuid.UUID) (*measurements.Datastream, error) {
	if mock.GetDatastreamFunc == nil {
		panic("MeasurementServiceMock.GetDatastreamFunc: method is nil but MeasurementService.GetDatastream was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UUID            uuid.UUID
	}{
		ContextMoqParam: contextMoqParam,
		UUID:            uUID,
	}
	mock.lockGetDatastream.Lock()
	mock.calls.GetDatastream = append(mock.calls.GetDatastream, callInfo)
	mock.lockGetDatastream.Unlock()
	return mock.GetDatastreamFunc(contextMoqParam, uUID)
}

// GetDatastreamCalls gets all the calls that were made to GetDatastream.
// Check the length with:
//
//	len(mockedMeasurementService.GetDatastreamCalls())
func (mock *MeasurementServiceMock) GetDatastreamCalls() []struct {
	ContextMoqParam context.Context
	UUID            uuid.UUID
} {
	var calls []struct {
		ContextMoqParam context.Context
		UUID            uuid.UUID
	}
	mock.lockGetDatastream.RLock()
	calls = mock.calls.GetDatastream
	mock.lockGetDatastream.RUnlock()
	return calls
}

// ListDatastreams calls ListDatastreamsFunc.
func (mock *MeasurementServiceMock) ListDatastreams(contextMoqParam context.Context, datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error) {
	if mock.ListDatastreamsFunc == nil {
		panic("MeasurementServiceMock.ListDatastreamsFunc: method is nil but MeasurementService.ListDatastreams was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		DatastreamFilter measurements.DatastreamFilter
		Request          pagination.Request
	}{
		ContextMoqParam:  contextMoqParam,
		DatastreamFilter: datastreamFilter,
		Request:          request,
	}
	mock.lockListDatastreams.Lock()
	mock.calls.ListDatastreams = append(mock.calls.ListDatastreams, callInfo)
	mock.lockListDatastreams.Unlock()
	return mock.ListDatastreamsFunc(contextMoqParam, datastreamFilter, request)
}

// ListDatastreamsCalls gets all the calls that were made to ListDatastreams.
// Check the length with:
//
//	len(mockedMeasurementService.ListDatastreamsCalls())
func (mock *MeasurementServiceMock) ListDatastreamsCalls() []struct {
	ContextMoqParam  context.Context
	DatastreamFilter measurements.DatastreamFilter
	Request          pagination.Request
} {
	var calls []struct {
		ContextMoqParam  context.Context
		DatastreamFilter measurements.DatastreamFilter
		Request          pagination.Request
	}
	mock.lockListDatastreams.RLock()
	calls = mock.calls.ListDatastreams
	mock.lockListDatastreams.RUnlock()
	return calls
}

// QueryMeasurements calls QueryMeasurementsFunc.
func (mock *MeasurementServiceMock) QueryMeasurements(contextMoqParam context.Context, filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error) {
	if mock.QueryMeasurementsFunc == nil {
		panic("MeasurementServiceMock.QueryMeasurementsFunc: method is nil but MeasurementService.QueryMeasurements was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Filter          measurements.Filter
		Request         pagination.Request
	}{
		ContextMoqParam: contextMoqParam,
		Filter:          filter,
		Request:         request,
	}
	mock.lockQueryMeasurements.Lock()
	mock.calls.QueryMeasurements = append(mock.calls.QueryMeasurements, callInfo)
	mock.lockQueryMeasurements.Unlock()
	return mock.QueryMeasurementsFunc(contextMoqParam, filter, request)
}

// QueryMeasurementsCalls gets all the calls that were made to QueryMeasurements.
// Check the length with:
//
//	len(mockedMeasurementService.QueryMeasurementsCalls())
func (mock *MeasurementServiceMock) QueryMeasurementsCalls() []struct {
	ContextMoqParam context.Context
	Filter          measurements.Filter
	Request         pagination.Request
} {
	var calls []struct {
		ContextMoqParam context.Context
		Filter          measurements.Filter
		Request         pagination.Request
	}
	mock.lockQueryMeasurements.RLock()
	calls = mock.calls.QueryMeasurements
	mock.lockQueryMeasurements.RUnlock()
	return calls
}
