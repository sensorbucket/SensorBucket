// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package devices_test

import (
	"context"
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/services/core/devices"
	"sync"
)

// Ensure, that DeviceStoreMock does implement devices.DeviceStore.
// If this is not the case, regenerate this file with moq.
var _ devices.DeviceStore = &DeviceStoreMock{}

// DeviceStoreMock is a mock implementation of devices.DeviceStore.
//
//	func TestSomethingThatUsesDeviceStore(t *testing.T) {
//
//		// make and configure a mocked devices.DeviceStore
//		mockedDeviceStore := &DeviceStoreMock{
//			DeleteFunc: func(ctx context.Context, dev *devices.Device) error {
//				panic("mock out the Delete method")
//			},
//			FindFunc: func(ctx context.Context, id int64) (*devices.Device, error) {
//				panic("mock out the Find method")
//			},
//			GetSensorFunc: func(ctx context.Context, id int64) (*devices.Sensor, error) {
//				panic("mock out the GetSensor method")
//			},
//			ListFunc: func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
//				panic("mock out the List method")
//			},
//			ListInBoundingBoxFunc: func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
//				panic("mock out the ListInBoundingBox method")
//			},
//			ListInRangeFunc: func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
//				panic("mock out the ListInRange method")
//			},
//			ListSensorsFunc: func(contextMoqParam context.Context, request pagination.Request) (*pagination.Page[devices.Sensor], error) {
//				panic("mock out the ListSensors method")
//			},
//			SaveFunc: func(ctx context.Context, dev *devices.Device) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedDeviceStore in code that requires devices.DeviceStore
//		// and then make assertions.
//
//	}
type DeviceStoreMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, dev *devices.Device) error

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, id int64) (*devices.Device, error)

	// GetSensorFunc mocks the GetSensor method.
	GetSensorFunc func(ctx context.Context, id int64) (*devices.Sensor, error)

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error)

	// ListInBoundingBoxFunc mocks the ListInBoundingBox method.
	ListInBoundingBoxFunc func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error)

	// ListInRangeFunc mocks the ListInRange method.
	ListInRangeFunc func(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error)

	// ListSensorsFunc mocks the ListSensors method.
	ListSensorsFunc func(contextMoqParam context.Context, request pagination.Request) (*pagination.Page[devices.Sensor], error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, dev *devices.Device) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dev is the dev argument value.
			Dev *devices.Device
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetSensor holds details about calls to the GetSensor method.
		GetSensor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeviceFilter is the deviceFilter argument value.
			DeviceFilter devices.DeviceFilter
			// Request is the request argument value.
			Request pagination.Request
		}
		// ListInBoundingBox holds details about calls to the ListInBoundingBox method.
		ListInBoundingBox []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeviceFilter is the deviceFilter argument value.
			DeviceFilter devices.DeviceFilter
			// Request is the request argument value.
			Request pagination.Request
		}
		// ListInRange holds details about calls to the ListInRange method.
		ListInRange []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeviceFilter is the deviceFilter argument value.
			DeviceFilter devices.DeviceFilter
			// Request is the request argument value.
			Request pagination.Request
		}
		// ListSensors holds details about calls to the ListSensors method.
		ListSensors []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request pagination.Request
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dev is the dev argument value.
			Dev *devices.Device
		}
	}
	lockDelete            sync.RWMutex
	lockFind              sync.RWMutex
	lockGetSensor         sync.RWMutex
	lockList              sync.RWMutex
	lockListInBoundingBox sync.RWMutex
	lockListInRange       sync.RWMutex
	lockListSensors       sync.RWMutex
	lockSave              sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *DeviceStoreMock) Delete(ctx context.Context, dev *devices.Device) error {
	if mock.DeleteFunc == nil {
		panic("DeviceStoreMock.DeleteFunc: method is nil but DeviceStore.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dev *devices.Device
	}{
		Ctx: ctx,
		Dev: dev,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, dev)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedDeviceStore.DeleteCalls())
func (mock *DeviceStoreMock) DeleteCalls() []struct {
	Ctx context.Context
	Dev *devices.Device
} {
	var calls []struct {
		Ctx context.Context
		Dev *devices.Device
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *DeviceStoreMock) Find(ctx context.Context, id int64) (*devices.Device, error) {
	if mock.FindFunc == nil {
		panic("DeviceStoreMock.FindFunc: method is nil but DeviceStore.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedDeviceStore.FindCalls())
func (mock *DeviceStoreMock) FindCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// GetSensor calls GetSensorFunc.
func (mock *DeviceStoreMock) GetSensor(ctx context.Context, id int64) (*devices.Sensor, error) {
	if mock.GetSensorFunc == nil {
		panic("DeviceStoreMock.GetSensorFunc: method is nil but DeviceStore.GetSensor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSensor.Lock()
	mock.calls.GetSensor = append(mock.calls.GetSensor, callInfo)
	mock.lockGetSensor.Unlock()
	return mock.GetSensorFunc(ctx, id)
}

// GetSensorCalls gets all the calls that were made to GetSensor.
// Check the length with:
//
//	len(mockedDeviceStore.GetSensorCalls())
func (mock *DeviceStoreMock) GetSensorCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetSensor.RLock()
	calls = mock.calls.GetSensor
	mock.lockGetSensor.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DeviceStoreMock) List(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
	if mock.ListFunc == nil {
		panic("DeviceStoreMock.ListFunc: method is nil but DeviceStore.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}{
		ContextMoqParam: contextMoqParam,
		DeviceFilter:    deviceFilter,
		Request:         request,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, deviceFilter, request)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedDeviceStore.ListCalls())
func (mock *DeviceStoreMock) ListCalls() []struct {
	ContextMoqParam context.Context
	DeviceFilter    devices.DeviceFilter
	Request         pagination.Request
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListInBoundingBox calls ListInBoundingBoxFunc.
func (mock *DeviceStoreMock) ListInBoundingBox(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
	if mock.ListInBoundingBoxFunc == nil {
		panic("DeviceStoreMock.ListInBoundingBoxFunc: method is nil but DeviceStore.ListInBoundingBox was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}{
		ContextMoqParam: contextMoqParam,
		DeviceFilter:    deviceFilter,
		Request:         request,
	}
	mock.lockListInBoundingBox.Lock()
	mock.calls.ListInBoundingBox = append(mock.calls.ListInBoundingBox, callInfo)
	mock.lockListInBoundingBox.Unlock()
	return mock.ListInBoundingBoxFunc(contextMoqParam, deviceFilter, request)
}

// ListInBoundingBoxCalls gets all the calls that were made to ListInBoundingBox.
// Check the length with:
//
//	len(mockedDeviceStore.ListInBoundingBoxCalls())
func (mock *DeviceStoreMock) ListInBoundingBoxCalls() []struct {
	ContextMoqParam context.Context
	DeviceFilter    devices.DeviceFilter
	Request         pagination.Request
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}
	mock.lockListInBoundingBox.RLock()
	calls = mock.calls.ListInBoundingBox
	mock.lockListInBoundingBox.RUnlock()
	return calls
}

// ListInRange calls ListInRangeFunc.
func (mock *DeviceStoreMock) ListInRange(contextMoqParam context.Context, deviceFilter devices.DeviceFilter, request pagination.Request) (*pagination.Page[devices.Device], error) {
	if mock.ListInRangeFunc == nil {
		panic("DeviceStoreMock.ListInRangeFunc: method is nil but DeviceStore.ListInRange was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}{
		ContextMoqParam: contextMoqParam,
		DeviceFilter:    deviceFilter,
		Request:         request,
	}
	mock.lockListInRange.Lock()
	mock.calls.ListInRange = append(mock.calls.ListInRange, callInfo)
	mock.lockListInRange.Unlock()
	return mock.ListInRangeFunc(contextMoqParam, deviceFilter, request)
}

// ListInRangeCalls gets all the calls that were made to ListInRange.
// Check the length with:
//
//	len(mockedDeviceStore.ListInRangeCalls())
func (mock *DeviceStoreMock) ListInRangeCalls() []struct {
	ContextMoqParam context.Context
	DeviceFilter    devices.DeviceFilter
	Request         pagination.Request
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeviceFilter    devices.DeviceFilter
		Request         pagination.Request
	}
	mock.lockListInRange.RLock()
	calls = mock.calls.ListInRange
	mock.lockListInRange.RUnlock()
	return calls
}

// ListSensors calls ListSensorsFunc.
func (mock *DeviceStoreMock) ListSensors(contextMoqParam context.Context, request pagination.Request) (*pagination.Page[devices.Sensor], error) {
	if mock.ListSensorsFunc == nil {
		panic("DeviceStoreMock.ListSensorsFunc: method is nil but DeviceStore.ListSensors was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         pagination.Request
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockListSensors.Lock()
	mock.calls.ListSensors = append(mock.calls.ListSensors, callInfo)
	mock.lockListSensors.Unlock()
	return mock.ListSensorsFunc(contextMoqParam, request)
}

// ListSensorsCalls gets all the calls that were made to ListSensors.
// Check the length with:
//
//	len(mockedDeviceStore.ListSensorsCalls())
func (mock *DeviceStoreMock) ListSensorsCalls() []struct {
	ContextMoqParam context.Context
	Request         pagination.Request
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         pagination.Request
	}
	mock.lockListSensors.RLock()
	calls = mock.calls.ListSensors
	mock.lockListSensors.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *DeviceStoreMock) Save(ctx context.Context, dev *devices.Device) error {
	if mock.SaveFunc == nil {
		panic("DeviceStoreMock.SaveFunc: method is nil but DeviceStore.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dev *devices.Device
	}{
		Ctx: ctx,
		Dev: dev,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, dev)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedDeviceStore.SaveCalls())
func (mock *DeviceStoreMock) SaveCalls() []struct {
	Ctx context.Context
	Dev *devices.Device
} {
	var calls []struct {
		Ctx context.Context
		Dev *devices.Device
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Ensure, that SensorGroupStoreMock does implement devices.SensorGroupStore.
// If this is not the case, regenerate this file with moq.
var _ devices.SensorGroupStore = &SensorGroupStoreMock{}

// SensorGroupStoreMock is a mock implementation of devices.SensorGroupStore.
//
//	func TestSomethingThatUsesSensorGroupStore(t *testing.T) {
//
//		// make and configure a mocked devices.SensorGroupStore
//		mockedSensorGroupStore := &SensorGroupStoreMock{
//			DeleteFunc: func(id int64) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(id int64, tenantID int64) (*devices.SensorGroup, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(tenantID int64, p pagination.Request) (*pagination.Page[devices.SensorGroup], error) {
//				panic("mock out the List method")
//			},
//			SaveFunc: func(group *devices.SensorGroup) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedSensorGroupStore in code that requires devices.SensorGroupStore
//		// and then make assertions.
//
//	}
type SensorGroupStoreMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id int64) error

	// GetFunc mocks the Get method.
	GetFunc func(id int64, tenantID int64) (*devices.SensorGroup, error)

	// ListFunc mocks the List method.
	ListFunc func(tenantID int64, p pagination.Request) (*pagination.Page[devices.SensorGroup], error)

	// SaveFunc mocks the Save method.
	SaveFunc func(group *devices.SensorGroup) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID int64
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID int64
			// TenantID is the tenantID argument value.
			TenantID int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// TenantID is the tenantID argument value.
			TenantID int64
			// P is the p argument value.
			P pagination.Request
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Group is the group argument value.
			Group *devices.SensorGroup
		}
	}
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockSave   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *SensorGroupStoreMock) Delete(id int64) error {
	if mock.DeleteFunc == nil {
		panic("SensorGroupStoreMock.DeleteFunc: method is nil but SensorGroupStore.Delete was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedSensorGroupStore.DeleteCalls())
func (mock *SensorGroupStoreMock) DeleteCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SensorGroupStoreMock) Get(id int64, tenantID int64) (*devices.SensorGroup, error) {
	if mock.GetFunc == nil {
		panic("SensorGroupStoreMock.GetFunc: method is nil but SensorGroupStore.Get was just called")
	}
	callInfo := struct {
		ID       int64
		TenantID int64
	}{
		ID:       id,
		TenantID: tenantID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(id, tenantID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSensorGroupStore.GetCalls())
func (mock *SensorGroupStoreMock) GetCalls() []struct {
	ID       int64
	TenantID int64
} {
	var calls []struct {
		ID       int64
		TenantID int64
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SensorGroupStoreMock) List(tenantID int64, p pagination.Request) (*pagination.Page[devices.SensorGroup], error) {
	if mock.ListFunc == nil {
		panic("SensorGroupStoreMock.ListFunc: method is nil but SensorGroupStore.List was just called")
	}
	callInfo := struct {
		TenantID int64
		P        pagination.Request
	}{
		TenantID: tenantID,
		P:        p,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(tenantID, p)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedSensorGroupStore.ListCalls())
func (mock *SensorGroupStoreMock) ListCalls() []struct {
	TenantID int64
	P        pagination.Request
} {
	var calls []struct {
		TenantID int64
		P        pagination.Request
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *SensorGroupStoreMock) Save(group *devices.SensorGroup) error {
	if mock.SaveFunc == nil {
		panic("SensorGroupStoreMock.SaveFunc: method is nil but SensorGroupStore.Save was just called")
	}
	callInfo := struct {
		Group *devices.SensorGroup
	}{
		Group: group,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(group)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedSensorGroupStore.SaveCalls())
func (mock *SensorGroupStoreMock) SaveCalls() []struct {
	Group *devices.SensorGroup
} {
	var calls []struct {
		Group *devices.SensorGroup
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
