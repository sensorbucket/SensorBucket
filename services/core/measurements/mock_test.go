// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package measurements_test

import (
	"github.com/google/uuid"
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/services/core/measurements"
	"sync"
)

// Ensure, that StoreMock does implement measurements.Store.
// If this is not the case, regenerate this file with moq.
var _ measurements.Store = &StoreMock{}

// StoreMock is a mock implementation of measurements.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked measurements.Store
//		mockedStore := &StoreMock{
//			GetDatastreamFunc: func(id uuid.UUID, filter measurements.DatastreamFilter) (*measurements.Datastream, error) {
//				panic("mock out the GetDatastream method")
//			},
//			ListDatastreamsFunc: func(datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error) {
//				panic("mock out the ListDatastreams method")
//			},
//			QueryFunc: func(filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error) {
//				panic("mock out the Query method")
//			},
//		}
//
//		// use mockedStore in code that requires measurements.Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// GetDatastreamFunc mocks the GetDatastream method.
	GetDatastreamFunc func(id uuid.UUID, filter measurements.DatastreamFilter) (*measurements.Datastream, error)

	// ListDatastreamsFunc mocks the ListDatastreams method.
	ListDatastreamsFunc func(datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error)

	// QueryFunc mocks the Query method.
	QueryFunc func(filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDatastream holds details about calls to the GetDatastream method.
		GetDatastream []struct {
			// ID is the id argument value.
			ID uuid.UUID
			// Filter is the filter argument value.
			Filter measurements.DatastreamFilter
		}
		// ListDatastreams holds details about calls to the ListDatastreams method.
		ListDatastreams []struct {
			// DatastreamFilter is the datastreamFilter argument value.
			DatastreamFilter measurements.DatastreamFilter
			// Request is the request argument value.
			Request pagination.Request
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Filter is the filter argument value.
			Filter measurements.Filter
			// Request is the request argument value.
			Request pagination.Request
		}
	}
	lockGetDatastream   sync.RWMutex
	lockListDatastreams sync.RWMutex
	lockQuery           sync.RWMutex
}

// GetDatastream calls GetDatastreamFunc.
func (mock *StoreMock) GetDatastream(id uuid.UUID, filter measurements.DatastreamFilter) (*measurements.Datastream, error) {
	if mock.GetDatastreamFunc == nil {
		panic("StoreMock.GetDatastreamFunc: method is nil but Store.GetDatastream was just called")
	}
	callInfo := struct {
		ID     uuid.UUID
		Filter measurements.DatastreamFilter
	}{
		ID:     id,
		Filter: filter,
	}
	mock.lockGetDatastream.Lock()
	mock.calls.GetDatastream = append(mock.calls.GetDatastream, callInfo)
	mock.lockGetDatastream.Unlock()
	return mock.GetDatastreamFunc(id, filter)
}

// GetDatastreamCalls gets all the calls that were made to GetDatastream.
// Check the length with:
//
//	len(mockedStore.GetDatastreamCalls())
func (mock *StoreMock) GetDatastreamCalls() []struct {
	ID     uuid.UUID
	Filter measurements.DatastreamFilter
} {
	var calls []struct {
		ID     uuid.UUID
		Filter measurements.DatastreamFilter
	}
	mock.lockGetDatastream.RLock()
	calls = mock.calls.GetDatastream
	mock.lockGetDatastream.RUnlock()
	return calls
}

// ListDatastreams calls ListDatastreamsFunc.
func (mock *StoreMock) ListDatastreams(datastreamFilter measurements.DatastreamFilter, request pagination.Request) (*pagination.Page[measurements.Datastream], error) {
	if mock.ListDatastreamsFunc == nil {
		panic("StoreMock.ListDatastreamsFunc: method is nil but Store.ListDatastreams was just called")
	}
	callInfo := struct {
		DatastreamFilter measurements.DatastreamFilter
		Request          pagination.Request
	}{
		DatastreamFilter: datastreamFilter,
		Request:          request,
	}
	mock.lockListDatastreams.Lock()
	mock.calls.ListDatastreams = append(mock.calls.ListDatastreams, callInfo)
	mock.lockListDatastreams.Unlock()
	return mock.ListDatastreamsFunc(datastreamFilter, request)
}

// ListDatastreamsCalls gets all the calls that were made to ListDatastreams.
// Check the length with:
//
//	len(mockedStore.ListDatastreamsCalls())
func (mock *StoreMock) ListDatastreamsCalls() []struct {
	DatastreamFilter measurements.DatastreamFilter
	Request          pagination.Request
} {
	var calls []struct {
		DatastreamFilter measurements.DatastreamFilter
		Request          pagination.Request
	}
	mock.lockListDatastreams.RLock()
	calls = mock.calls.ListDatastreams
	mock.lockListDatastreams.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *StoreMock) Query(filter measurements.Filter, request pagination.Request) (*pagination.Page[measurements.Measurement], error) {
	if mock.QueryFunc == nil {
		panic("StoreMock.QueryFunc: method is nil but Store.Query was just called")
	}
	callInfo := struct {
		Filter  measurements.Filter
		Request pagination.Request
	}{
		Filter:  filter,
		Request: request,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(filter, request)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedStore.QueryCalls())
func (mock *StoreMock) QueryCalls() []struct {
	Filter  measurements.Filter
	Request pagination.Request
} {
	var calls []struct {
		Filter  measurements.Filter
		Request pagination.Request
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// Ensure, that MeasurementStoreBuilderMock does implement measurements.MeasurementStoreBuilder.
// If this is not the case, regenerate this file with moq.
var _ measurements.MeasurementStoreBuilder = &MeasurementStoreBuilderMock{}

// MeasurementStoreBuilderMock is a mock implementation of measurements.MeasurementStoreBuilder.
//
//	func TestSomethingThatUsesMeasurementStoreBuilder(t *testing.T) {
//
//		// make and configure a mocked measurements.MeasurementStoreBuilder
//		mockedMeasurementStoreBuilder := &MeasurementStoreBuilderMock{
//			BeginFunc: func() (measurements.MeasurementStorer, error) {
//				panic("mock out the Begin method")
//			},
//		}
//
//		// use mockedMeasurementStoreBuilder in code that requires measurements.MeasurementStoreBuilder
//		// and then make assertions.
//
//	}
type MeasurementStoreBuilderMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() (measurements.MeasurementStorer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
	}
	lockBegin sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *MeasurementStoreBuilderMock) Begin() (measurements.MeasurementStorer, error) {
	if mock.BeginFunc == nil {
		panic("MeasurementStoreBuilderMock.BeginFunc: method is nil but MeasurementStoreBuilder.Begin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedMeasurementStoreBuilder.BeginCalls())
func (mock *MeasurementStoreBuilderMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Ensure, that MeasurementStorerMock does implement measurements.MeasurementStorer.
// If this is not the case, regenerate this file with moq.
var _ measurements.MeasurementStorer = &MeasurementStorerMock{}

// MeasurementStorerMock is a mock implementation of measurements.MeasurementStorer.
//
//	func TestSomethingThatUsesMeasurementStorer(t *testing.T) {
//
//		// make and configure a mocked measurements.MeasurementStorer
//		mockedMeasurementStorer := &MeasurementStorerMock{
//			AddMeasurementsFunc: func(measurementsMoqParam []measurements.Measurement) error {
//				panic("mock out the AddMeasurements method")
//			},
//			FinishFunc: func() error {
//				panic("mock out the Finish method")
//			},
//			GetDatastreamFunc: func(tenantID int64, sensorID int64, observedProperty string, unitOfMeasurement string) (*measurements.Datastream, error) {
//				panic("mock out the GetDatastream method")
//			},
//		}
//
//		// use mockedMeasurementStorer in code that requires measurements.MeasurementStorer
//		// and then make assertions.
//
//	}
type MeasurementStorerMock struct {
	// AddMeasurementsFunc mocks the AddMeasurements method.
	AddMeasurementsFunc func(measurementsMoqParam []measurements.Measurement) error

	// FinishFunc mocks the Finish method.
	FinishFunc func() error

	// GetDatastreamFunc mocks the GetDatastream method.
	GetDatastreamFunc func(tenantID int64, sensorID int64, observedProperty string, unitOfMeasurement string) (*measurements.Datastream, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddMeasurements holds details about calls to the AddMeasurements method.
		AddMeasurements []struct {
			// MeasurementsMoqParam is the measurementsMoqParam argument value.
			MeasurementsMoqParam []measurements.Measurement
		}
		// Finish holds details about calls to the Finish method.
		Finish []struct {
		}
		// GetDatastream holds details about calls to the GetDatastream method.
		GetDatastream []struct {
			// TenantID is the tenantID argument value.
			TenantID int64
			// SensorID is the sensorID argument value.
			SensorID int64
			// ObservedProperty is the observedProperty argument value.
			ObservedProperty string
			// UnitOfMeasurement is the unitOfMeasurement argument value.
			UnitOfMeasurement string
		}
	}
	lockAddMeasurements sync.RWMutex
	lockFinish          sync.RWMutex
	lockGetDatastream   sync.RWMutex
}

// AddMeasurements calls AddMeasurementsFunc.
func (mock *MeasurementStorerMock) AddMeasurements(measurementsMoqParam []measurements.Measurement) error {
	if mock.AddMeasurementsFunc == nil {
		panic("MeasurementStorerMock.AddMeasurementsFunc: method is nil but MeasurementStorer.AddMeasurements was just called")
	}
	callInfo := struct {
		MeasurementsMoqParam []measurements.Measurement
	}{
		MeasurementsMoqParam: measurementsMoqParam,
	}
	mock.lockAddMeasurements.Lock()
	mock.calls.AddMeasurements = append(mock.calls.AddMeasurements, callInfo)
	mock.lockAddMeasurements.Unlock()
	return mock.AddMeasurementsFunc(measurementsMoqParam)
}

// AddMeasurementsCalls gets all the calls that were made to AddMeasurements.
// Check the length with:
//
//	len(mockedMeasurementStorer.AddMeasurementsCalls())
func (mock *MeasurementStorerMock) AddMeasurementsCalls() []struct {
	MeasurementsMoqParam []measurements.Measurement
} {
	var calls []struct {
		MeasurementsMoqParam []measurements.Measurement
	}
	mock.lockAddMeasurements.RLock()
	calls = mock.calls.AddMeasurements
	mock.lockAddMeasurements.RUnlock()
	return calls
}

// Finish calls FinishFunc.
func (mock *MeasurementStorerMock) Finish() error {
	if mock.FinishFunc == nil {
		panic("MeasurementStorerMock.FinishFunc: method is nil but MeasurementStorer.Finish was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFinish.Lock()
	mock.calls.Finish = append(mock.calls.Finish, callInfo)
	mock.lockFinish.Unlock()
	return mock.FinishFunc()
}

// FinishCalls gets all the calls that were made to Finish.
// Check the length with:
//
//	len(mockedMeasurementStorer.FinishCalls())
func (mock *MeasurementStorerMock) FinishCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFinish.RLock()
	calls = mock.calls.Finish
	mock.lockFinish.RUnlock()
	return calls
}

// GetDatastream calls GetDatastreamFunc.
func (mock *MeasurementStorerMock) GetDatastream(tenantID int64, sensorID int64, observedProperty string, unitOfMeasurement string) (*measurements.Datastream, error) {
	if mock.GetDatastreamFunc == nil {
		panic("MeasurementStorerMock.GetDatastreamFunc: method is nil but MeasurementStorer.GetDatastream was just called")
	}
	callInfo := struct {
		TenantID          int64
		SensorID          int64
		ObservedProperty  string
		UnitOfMeasurement string
	}{
		TenantID:          tenantID,
		SensorID:          sensorID,
		ObservedProperty:  observedProperty,
		UnitOfMeasurement: unitOfMeasurement,
	}
	mock.lockGetDatastream.Lock()
	mock.calls.GetDatastream = append(mock.calls.GetDatastream, callInfo)
	mock.lockGetDatastream.Unlock()
	return mock.GetDatastreamFunc(tenantID, sensorID, observedProperty, unitOfMeasurement)
}

// GetDatastreamCalls gets all the calls that were made to GetDatastream.
// Check the length with:
//
//	len(mockedMeasurementStorer.GetDatastreamCalls())
func (mock *MeasurementStorerMock) GetDatastreamCalls() []struct {
	TenantID          int64
	SensorID          int64
	ObservedProperty  string
	UnitOfMeasurement string
} {
	var calls []struct {
		TenantID          int64
		SensorID          int64
		ObservedProperty  string
		UnitOfMeasurement string
	}
	mock.lockGetDatastream.RLock()
	calls = mock.calls.GetDatastream
	mock.lockGetDatastream.RUnlock()
	return calls
}
