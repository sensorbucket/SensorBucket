// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pipeline "sensorbucket.nl/sensorbucket/pkg/pipeline"
	service "sensorbucket.nl/sensorbucket/services/pipeline/service"
)

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMessageQueue) Publish(arg0 *pipeline.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageQueueMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageQueue)(nil).Publish), arg0)
}

// MockPipelineService is a mock of PipelineService interface.
type MockPipelineService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceMockRecorder
}

// MockPipelineServiceMockRecorder is the mock recorder for MockPipelineService.
type MockPipelineServiceMockRecorder struct {
	mock *MockPipelineService
}

// NewMockPipelineService creates a new mock instance.
func NewMockPipelineService(ctrl *gomock.Controller) *MockPipelineService {
	mock := &MockPipelineService{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineService) EXPECT() *MockPipelineServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPipelineService) Get(arg0 string) (*service.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*service.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPipelineServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipelineService)(nil).Get), arg0)
}
