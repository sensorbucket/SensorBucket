// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"sensorbucket.nl/sensorbucket/pkg/pipeline"
	"sensorbucket.nl/sensorbucket/services/core/processing"
	"sensorbucket.nl/sensorbucket/services/httpimporter/service"
	"sync"
)

// Ensure, that MessageQueueMock does implement service.MessageQueue.
// If this is not the case, regenerate this file with moq.
var _ service.MessageQueue = &MessageQueueMock{}

// MessageQueueMock is a mock implementation of service.MessageQueue.
//
//	func TestSomethingThatUsesMessageQueue(t *testing.T) {
//
//		// make and configure a mocked service.MessageQueue
//		mockedMessageQueue := &MessageQueueMock{
//			PublishFunc: func(message *pipeline.Message) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedMessageQueue in code that requires service.MessageQueue
//		// and then make assertions.
//
//	}
type MessageQueueMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(message *pipeline.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Message is the message argument value.
			Message *pipeline.Message
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *MessageQueueMock) Publish(message *pipeline.Message) error {
	if mock.PublishFunc == nil {
		panic("MessageQueueMock.PublishFunc: method is nil but MessageQueue.Publish was just called")
	}
	callInfo := struct {
		Message *pipeline.Message
	}{
		Message: message,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(message)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedMessageQueue.PublishCalls())
func (mock *MessageQueueMock) PublishCalls() []struct {
	Message *pipeline.Message
} {
	var calls []struct {
		Message *pipeline.Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Ensure, that PipelineServiceMock does implement service.PipelineService.
// If this is not the case, regenerate this file with moq.
var _ service.PipelineService = &PipelineServiceMock{}

// PipelineServiceMock is a mock implementation of service.PipelineService.
//
//	func TestSomethingThatUsesPipelineService(t *testing.T) {
//
//		// make and configure a mocked service.PipelineService
//		mockedPipelineService := &PipelineServiceMock{
//			GetFunc: func(s string) (*processing.Pipeline, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedPipelineService in code that requires service.PipelineService
//		// and then make assertions.
//
//	}
type PipelineServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(s string) (*processing.Pipeline, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *PipelineServiceMock) Get(s string) (*processing.Pipeline, error) {
	if mock.GetFunc == nil {
		panic("PipelineServiceMock.GetFunc: method is nil but PipelineService.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedPipelineService.GetCalls())
func (mock *PipelineServiceMock) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
