// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tenantstransports_test

import (
	"context"
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/pkg/auth"
	"sensorbucket.nl/sensorbucket/services/tenants/apikeys"
	"sensorbucket.nl/sensorbucket/services/tenants/tenants"
	"sensorbucket.nl/sensorbucket/services/tenants/transports"
	"sync"
	"time"
)

// Ensure, that ApiKeyServiceMock does implement tenantstransports.ApiKeyService.
// If this is not the case, regenerate this file with moq.
var _ tenantstransports.ApiKeyService = &ApiKeyServiceMock{}

// ApiKeyServiceMock is a mock implementation of tenantstransports.ApiKeyService.
//
//	func TestSomethingThatUsesApiKeyService(t *testing.T) {
//
//		// make and configure a mocked tenantstransports.ApiKeyService
//		mockedApiKeyService := &ApiKeyServiceMock{
//			AuthenticateApiKeyFunc: func(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error) {
//				panic("mock out the AuthenticateApiKey method")
//			},
//			GenerateNewApiKeyFunc: func(name string, tenantId int64, permissions auth.Permissions, expiry *time.Time) (string, error) {
//				panic("mock out the GenerateNewApiKey method")
//			},
//			ListAPIKeysFunc: func(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
//				panic("mock out the ListAPIKeys method")
//			},
//			RevokeApiKeyFunc: func(id int64) error {
//				panic("mock out the RevokeApiKey method")
//			},
//		}
//
//		// use mockedApiKeyService in code that requires tenantstransports.ApiKeyService
//		// and then make assertions.
//
//	}
type ApiKeyServiceMock struct {
	// AuthenticateApiKeyFunc mocks the AuthenticateApiKey method.
	AuthenticateApiKeyFunc func(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error)

	// GenerateNewApiKeyFunc mocks the GenerateNewApiKey method.
	GenerateNewApiKeyFunc func(name string, tenantId int64, permissions auth.Permissions, expiry *time.Time) (string, error)

	// ListAPIKeysFunc mocks the ListAPIKeys method.
	ListAPIKeysFunc func(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error)

	// RevokeApiKeyFunc mocks the RevokeApiKey method.
	RevokeApiKeyFunc func(id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// AuthenticateApiKey holds details about calls to the AuthenticateApiKey method.
		AuthenticateApiKey []struct {
			// Base64IdAndKeyCombination is the base64IdAndKeyCombination argument value.
			Base64IdAndKeyCombination string
		}
		// GenerateNewApiKey holds details about calls to the GenerateNewApiKey method.
		GenerateNewApiKey []struct {
			// Name is the name argument value.
			Name string
			// TenantId is the tenantId argument value.
			TenantId int64
			// Permissions is the permissions argument value.
			Permissions auth.Permissions
			// Expiry is the expiry argument value.
			Expiry *time.Time
		}
		// ListAPIKeys holds details about calls to the ListAPIKeys method.
		ListAPIKeys []struct {
			// Filter is the filter argument value.
			Filter apikeys.Filter
			// P is the p argument value.
			P pagination.Request
		}
		// RevokeApiKey holds details about calls to the RevokeApiKey method.
		RevokeApiKey []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockAuthenticateApiKey sync.RWMutex
	lockGenerateNewApiKey  sync.RWMutex
	lockListAPIKeys        sync.RWMutex
	lockRevokeApiKey       sync.RWMutex
}

// AuthenticateApiKey calls AuthenticateApiKeyFunc.
func (mock *ApiKeyServiceMock) AuthenticateApiKey(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error) {
	if mock.AuthenticateApiKeyFunc == nil {
		panic("ApiKeyServiceMock.AuthenticateApiKeyFunc: method is nil but ApiKeyService.AuthenticateApiKey was just called")
	}
	callInfo := struct {
		Base64IdAndKeyCombination string
	}{
		Base64IdAndKeyCombination: base64IdAndKeyCombination,
	}
	mock.lockAuthenticateApiKey.Lock()
	mock.calls.AuthenticateApiKey = append(mock.calls.AuthenticateApiKey, callInfo)
	mock.lockAuthenticateApiKey.Unlock()
	return mock.AuthenticateApiKeyFunc(base64IdAndKeyCombination)
}

// AuthenticateApiKeyCalls gets all the calls that were made to AuthenticateApiKey.
// Check the length with:
//
//	len(mockedApiKeyService.AuthenticateApiKeyCalls())
func (mock *ApiKeyServiceMock) AuthenticateApiKeyCalls() []struct {
	Base64IdAndKeyCombination string
} {
	var calls []struct {
		Base64IdAndKeyCombination string
	}
	mock.lockAuthenticateApiKey.RLock()
	calls = mock.calls.AuthenticateApiKey
	mock.lockAuthenticateApiKey.RUnlock()
	return calls
}

// GenerateNewApiKey calls GenerateNewApiKeyFunc.
func (mock *ApiKeyServiceMock) GenerateNewApiKey(name string, tenantId int64, permissions auth.Permissions, expiry *time.Time) (string, error) {
	if mock.GenerateNewApiKeyFunc == nil {
		panic("ApiKeyServiceMock.GenerateNewApiKeyFunc: method is nil but ApiKeyService.GenerateNewApiKey was just called")
	}
	callInfo := struct {
		Name        string
		TenantId    int64
		Permissions auth.Permissions
		Expiry      *time.Time
	}{
		Name:        name,
		TenantId:    tenantId,
		Permissions: permissions,
		Expiry:      expiry,
	}
	mock.lockGenerateNewApiKey.Lock()
	mock.calls.GenerateNewApiKey = append(mock.calls.GenerateNewApiKey, callInfo)
	mock.lockGenerateNewApiKey.Unlock()
	return mock.GenerateNewApiKeyFunc(name, tenantId, permissions, expiry)
}

// GenerateNewApiKeyCalls gets all the calls that were made to GenerateNewApiKey.
// Check the length with:
//
//	len(mockedApiKeyService.GenerateNewApiKeyCalls())
func (mock *ApiKeyServiceMock) GenerateNewApiKeyCalls() []struct {
	Name        string
	TenantId    int64
	Permissions auth.Permissions
	Expiry      *time.Time
} {
	var calls []struct {
		Name        string
		TenantId    int64
		Permissions auth.Permissions
		Expiry      *time.Time
	}
	mock.lockGenerateNewApiKey.RLock()
	calls = mock.calls.GenerateNewApiKey
	mock.lockGenerateNewApiKey.RUnlock()
	return calls
}

// ListAPIKeys calls ListAPIKeysFunc.
func (mock *ApiKeyServiceMock) ListAPIKeys(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
	if mock.ListAPIKeysFunc == nil {
		panic("ApiKeyServiceMock.ListAPIKeysFunc: method is nil but ApiKeyService.ListAPIKeys was just called")
	}
	callInfo := struct {
		Filter apikeys.Filter
		P      pagination.Request
	}{
		Filter: filter,
		P:      p,
	}
	mock.lockListAPIKeys.Lock()
	mock.calls.ListAPIKeys = append(mock.calls.ListAPIKeys, callInfo)
	mock.lockListAPIKeys.Unlock()
	return mock.ListAPIKeysFunc(filter, p)
}

// ListAPIKeysCalls gets all the calls that were made to ListAPIKeys.
// Check the length with:
//
//	len(mockedApiKeyService.ListAPIKeysCalls())
func (mock *ApiKeyServiceMock) ListAPIKeysCalls() []struct {
	Filter apikeys.Filter
	P      pagination.Request
} {
	var calls []struct {
		Filter apikeys.Filter
		P      pagination.Request
	}
	mock.lockListAPIKeys.RLock()
	calls = mock.calls.ListAPIKeys
	mock.lockListAPIKeys.RUnlock()
	return calls
}

// RevokeApiKey calls RevokeApiKeyFunc.
func (mock *ApiKeyServiceMock) RevokeApiKey(id int64) error {
	if mock.RevokeApiKeyFunc == nil {
		panic("ApiKeyServiceMock.RevokeApiKeyFunc: method is nil but ApiKeyService.RevokeApiKey was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockRevokeApiKey.Lock()
	mock.calls.RevokeApiKey = append(mock.calls.RevokeApiKey, callInfo)
	mock.lockRevokeApiKey.Unlock()
	return mock.RevokeApiKeyFunc(id)
}

// RevokeApiKeyCalls gets all the calls that were made to RevokeApiKey.
// Check the length with:
//
//	len(mockedApiKeyService.RevokeApiKeyCalls())
func (mock *ApiKeyServiceMock) RevokeApiKeyCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockRevokeApiKey.RLock()
	calls = mock.calls.RevokeApiKey
	mock.lockRevokeApiKey.RUnlock()
	return calls
}

// Ensure, that TenantServiceMock does implement tenantstransports.TenantService.
// If this is not the case, regenerate this file with moq.
var _ tenantstransports.TenantService = &TenantServiceMock{}

// TenantServiceMock is a mock implementation of tenantstransports.TenantService.
//
//	func TestSomethingThatUsesTenantService(t *testing.T) {
//
//		// make and configure a mocked tenantstransports.TenantService
//		mockedTenantService := &TenantServiceMock{
//			AddTenantMemberFunc: func(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error {
//				panic("mock out the AddTenantMember method")
//			},
//			ArchiveTenantFunc: func(ctx context.Context, tenantID int64) error {
//				panic("mock out the ArchiveTenant method")
//			},
//			CreateNewTenantFunc: func(ctx context.Context, tenant tenants.CreateTenantDTO) (tenants.CreateTenantDTO, error) {
//				panic("mock out the CreateNewTenant method")
//			},
//			ListTenantsFunc: func(ctx context.Context, filter tenants.Filter, p pagination.Request) (*pagination.Page[tenants.CreateTenantDTO], error) {
//				panic("mock out the ListTenants method")
//			},
//			RemoveTenantMemberFunc: func(ctx context.Context, tenantID int64, userID string) error {
//				panic("mock out the RemoveTenantMember method")
//			},
//			UpdateTenantMemberFunc: func(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error {
//				panic("mock out the UpdateTenantMember method")
//			},
//		}
//
//		// use mockedTenantService in code that requires tenantstransports.TenantService
//		// and then make assertions.
//
//	}
type TenantServiceMock struct {
	// AddTenantMemberFunc mocks the AddTenantMember method.
	AddTenantMemberFunc func(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error

	// ArchiveTenantFunc mocks the ArchiveTenant method.
	ArchiveTenantFunc func(ctx context.Context, tenantID int64) error

	// CreateNewTenantFunc mocks the CreateNewTenant method.
	CreateNewTenantFunc func(ctx context.Context, tenant tenants.CreateTenantDTO) (tenants.CreateTenantDTO, error)

	// ListTenantsFunc mocks the ListTenants method.
	ListTenantsFunc func(ctx context.Context, filter tenants.Filter, p pagination.Request) (*pagination.Page[tenants.CreateTenantDTO], error)

	// RemoveTenantMemberFunc mocks the RemoveTenantMember method.
	RemoveTenantMemberFunc func(ctx context.Context, tenantID int64, userID string) error

	// UpdateTenantMemberFunc mocks the UpdateTenantMember method.
	UpdateTenantMemberFunc func(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTenantMember holds details about calls to the AddTenantMember method.
		AddTenantMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TenantID is the tenantID argument value.
			TenantID int64
			// UserID is the userID argument value.
			UserID string
			// Permissions is the permissions argument value.
			Permissions auth.Permissions
		}
		// ArchiveTenant holds details about calls to the ArchiveTenant method.
		ArchiveTenant []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TenantID is the tenantID argument value.
			TenantID int64
		}
		// CreateNewTenant holds details about calls to the CreateNewTenant method.
		CreateNewTenant []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tenant is the tenant argument value.
			Tenant tenants.CreateTenantDTO
		}
		// ListTenants holds details about calls to the ListTenants method.
		ListTenants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter tenants.Filter
			// P is the p argument value.
			P pagination.Request
		}
		// RemoveTenantMember holds details about calls to the RemoveTenantMember method.
		RemoveTenantMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TenantID is the tenantID argument value.
			TenantID int64
			// UserID is the userID argument value.
			UserID string
		}
		// UpdateTenantMember holds details about calls to the UpdateTenantMember method.
		UpdateTenantMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TenantID is the tenantID argument value.
			TenantID int64
			// UserID is the userID argument value.
			UserID string
			// Permissions is the permissions argument value.
			Permissions auth.Permissions
		}
	}
	lockAddTenantMember    sync.RWMutex
	lockArchiveTenant      sync.RWMutex
	lockCreateNewTenant    sync.RWMutex
	lockListTenants        sync.RWMutex
	lockRemoveTenantMember sync.RWMutex
	lockUpdateTenantMember sync.RWMutex
}

// AddTenantMember calls AddTenantMemberFunc.
func (mock *TenantServiceMock) AddTenantMember(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error {
	if mock.AddTenantMemberFunc == nil {
		panic("TenantServiceMock.AddTenantMemberFunc: method is nil but TenantService.AddTenantMember was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		TenantID    int64
		UserID      string
		Permissions auth.Permissions
	}{
		Ctx:         ctx,
		TenantID:    tenantID,
		UserID:      userID,
		Permissions: permissions,
	}
	mock.lockAddTenantMember.Lock()
	mock.calls.AddTenantMember = append(mock.calls.AddTenantMember, callInfo)
	mock.lockAddTenantMember.Unlock()
	return mock.AddTenantMemberFunc(ctx, tenantID, userID, permissions)
}

// AddTenantMemberCalls gets all the calls that were made to AddTenantMember.
// Check the length with:
//
//	len(mockedTenantService.AddTenantMemberCalls())
func (mock *TenantServiceMock) AddTenantMemberCalls() []struct {
	Ctx         context.Context
	TenantID    int64
	UserID      string
	Permissions auth.Permissions
} {
	var calls []struct {
		Ctx         context.Context
		TenantID    int64
		UserID      string
		Permissions auth.Permissions
	}
	mock.lockAddTenantMember.RLock()
	calls = mock.calls.AddTenantMember
	mock.lockAddTenantMember.RUnlock()
	return calls
}

// ArchiveTenant calls ArchiveTenantFunc.
func (mock *TenantServiceMock) ArchiveTenant(ctx context.Context, tenantID int64) error {
	if mock.ArchiveTenantFunc == nil {
		panic("TenantServiceMock.ArchiveTenantFunc: method is nil but TenantService.ArchiveTenant was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		TenantID int64
	}{
		Ctx:      ctx,
		TenantID: tenantID,
	}
	mock.lockArchiveTenant.Lock()
	mock.calls.ArchiveTenant = append(mock.calls.ArchiveTenant, callInfo)
	mock.lockArchiveTenant.Unlock()
	return mock.ArchiveTenantFunc(ctx, tenantID)
}

// ArchiveTenantCalls gets all the calls that were made to ArchiveTenant.
// Check the length with:
//
//	len(mockedTenantService.ArchiveTenantCalls())
func (mock *TenantServiceMock) ArchiveTenantCalls() []struct {
	Ctx      context.Context
	TenantID int64
} {
	var calls []struct {
		Ctx      context.Context
		TenantID int64
	}
	mock.lockArchiveTenant.RLock()
	calls = mock.calls.ArchiveTenant
	mock.lockArchiveTenant.RUnlock()
	return calls
}

// CreateNewTenant calls CreateNewTenantFunc.
func (mock *TenantServiceMock) CreateNewTenant(ctx context.Context, tenant tenants.CreateTenantDTO) (tenants.CreateTenantDTO, error) {
	if mock.CreateNewTenantFunc == nil {
		panic("TenantServiceMock.CreateNewTenantFunc: method is nil but TenantService.CreateNewTenant was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Tenant tenants.CreateTenantDTO
	}{
		Ctx:    ctx,
		Tenant: tenant,
	}
	mock.lockCreateNewTenant.Lock()
	mock.calls.CreateNewTenant = append(mock.calls.CreateNewTenant, callInfo)
	mock.lockCreateNewTenant.Unlock()
	return mock.CreateNewTenantFunc(ctx, tenant)
}

// CreateNewTenantCalls gets all the calls that were made to CreateNewTenant.
// Check the length with:
//
//	len(mockedTenantService.CreateNewTenantCalls())
func (mock *TenantServiceMock) CreateNewTenantCalls() []struct {
	Ctx    context.Context
	Tenant tenants.CreateTenantDTO
} {
	var calls []struct {
		Ctx    context.Context
		Tenant tenants.CreateTenantDTO
	}
	mock.lockCreateNewTenant.RLock()
	calls = mock.calls.CreateNewTenant
	mock.lockCreateNewTenant.RUnlock()
	return calls
}

// ListTenants calls ListTenantsFunc.
func (mock *TenantServiceMock) ListTenants(ctx context.Context, filter tenants.Filter, p pagination.Request) (*pagination.Page[tenants.CreateTenantDTO], error) {
	if mock.ListTenantsFunc == nil {
		panic("TenantServiceMock.ListTenantsFunc: method is nil but TenantService.ListTenants was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter tenants.Filter
		P      pagination.Request
	}{
		Ctx:    ctx,
		Filter: filter,
		P:      p,
	}
	mock.lockListTenants.Lock()
	mock.calls.ListTenants = append(mock.calls.ListTenants, callInfo)
	mock.lockListTenants.Unlock()
	return mock.ListTenantsFunc(ctx, filter, p)
}

// ListTenantsCalls gets all the calls that were made to ListTenants.
// Check the length with:
//
//	len(mockedTenantService.ListTenantsCalls())
func (mock *TenantServiceMock) ListTenantsCalls() []struct {
	Ctx    context.Context
	Filter tenants.Filter
	P      pagination.Request
} {
	var calls []struct {
		Ctx    context.Context
		Filter tenants.Filter
		P      pagination.Request
	}
	mock.lockListTenants.RLock()
	calls = mock.calls.ListTenants
	mock.lockListTenants.RUnlock()
	return calls
}

// RemoveTenantMember calls RemoveTenantMemberFunc.
func (mock *TenantServiceMock) RemoveTenantMember(ctx context.Context, tenantID int64, userID string) error {
	if mock.RemoveTenantMemberFunc == nil {
		panic("TenantServiceMock.RemoveTenantMemberFunc: method is nil but TenantService.RemoveTenantMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		TenantID int64
		UserID   string
	}{
		Ctx:      ctx,
		TenantID: tenantID,
		UserID:   userID,
	}
	mock.lockRemoveTenantMember.Lock()
	mock.calls.RemoveTenantMember = append(mock.calls.RemoveTenantMember, callInfo)
	mock.lockRemoveTenantMember.Unlock()
	return mock.RemoveTenantMemberFunc(ctx, tenantID, userID)
}

// RemoveTenantMemberCalls gets all the calls that were made to RemoveTenantMember.
// Check the length with:
//
//	len(mockedTenantService.RemoveTenantMemberCalls())
func (mock *TenantServiceMock) RemoveTenantMemberCalls() []struct {
	Ctx      context.Context
	TenantID int64
	UserID   string
} {
	var calls []struct {
		Ctx      context.Context
		TenantID int64
		UserID   string
	}
	mock.lockRemoveTenantMember.RLock()
	calls = mock.calls.RemoveTenantMember
	mock.lockRemoveTenantMember.RUnlock()
	return calls
}

// UpdateTenantMember calls UpdateTenantMemberFunc.
func (mock *TenantServiceMock) UpdateTenantMember(ctx context.Context, tenantID int64, userID string, permissions auth.Permissions) error {
	if mock.UpdateTenantMemberFunc == nil {
		panic("TenantServiceMock.UpdateTenantMemberFunc: method is nil but TenantService.UpdateTenantMember was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		TenantID    int64
		UserID      string
		Permissions auth.Permissions
	}{
		Ctx:         ctx,
		TenantID:    tenantID,
		UserID:      userID,
		Permissions: permissions,
	}
	mock.lockUpdateTenantMember.Lock()
	mock.calls.UpdateTenantMember = append(mock.calls.UpdateTenantMember, callInfo)
	mock.lockUpdateTenantMember.Unlock()
	return mock.UpdateTenantMemberFunc(ctx, tenantID, userID, permissions)
}

// UpdateTenantMemberCalls gets all the calls that were made to UpdateTenantMember.
// Check the length with:
//
//	len(mockedTenantService.UpdateTenantMemberCalls())
func (mock *TenantServiceMock) UpdateTenantMemberCalls() []struct {
	Ctx         context.Context
	TenantID    int64
	UserID      string
	Permissions auth.Permissions
} {
	var calls []struct {
		Ctx         context.Context
		TenantID    int64
		UserID      string
		Permissions auth.Permissions
	}
	mock.lockUpdateTenantMember.RLock()
	calls = mock.calls.UpdateTenantMember
	mock.lockUpdateTenantMember.RUnlock()
	return calls
}
