// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tenantstransports

import (
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/services/tenants/apikeys"
	"sync"
	"time"
)

// Ensure, that apiKeyServiceMock does implement apiKeyService.
// If this is not the case, regenerate this file with moq.
var _ apiKeyService = &apiKeyServiceMock{}

// apiKeyServiceMock is a mock implementation of apiKeyService.
//
//	func TestSomethingThatUsesapiKeyService(t *testing.T) {
//
//		// make and configure a mocked apiKeyService
//		mockedapiKeyService := &apiKeyServiceMock{
//			AuthenticateApiKeyFunc: func(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error) {
//				panic("mock out the AuthenticateApiKey method")
//			},
//			GenerateNewApiKeyFunc: func(name string, tenantId int64, permissions []string, expiry *time.Time) (string, error) {
//				panic("mock out the GenerateNewApiKey method")
//			},
//			ListAPIKeysFunc: func(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
//				panic("mock out the ListAPIKeys method")
//			},
//			RevokeApiKeyFunc: func(id int64) error {
//				panic("mock out the RevokeApiKey method")
//			},
//		}
//
//		// use mockedapiKeyService in code that requires apiKeyService
//		// and then make assertions.
//
//	}
type apiKeyServiceMock struct {
	// AuthenticateApiKeyFunc mocks the AuthenticateApiKey method.
	AuthenticateApiKeyFunc func(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error)

	// GenerateNewApiKeyFunc mocks the GenerateNewApiKey method.
	GenerateNewApiKeyFunc func(name string, tenantId int64, permissions []string, expiry *time.Time) (string, error)

	// ListAPIKeysFunc mocks the ListAPIKeys method.
	ListAPIKeysFunc func(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error)

	// RevokeApiKeyFunc mocks the RevokeApiKey method.
	RevokeApiKeyFunc func(id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// AuthenticateApiKey holds details about calls to the AuthenticateApiKey method.
		AuthenticateApiKey []struct {
			// Base64IdAndKeyCombination is the base64IdAndKeyCombination argument value.
			Base64IdAndKeyCombination string
		}
		// GenerateNewApiKey holds details about calls to the GenerateNewApiKey method.
		GenerateNewApiKey []struct {
			// Name is the name argument value.
			Name string
			// TenantId is the tenantId argument value.
			TenantId int64
			// Permissions is the permissions argument value.
			Permissions []string
			// Expiry is the expiry argument value.
			Expiry *time.Time
		}
		// ListAPIKeys holds details about calls to the ListAPIKeys method.
		ListAPIKeys []struct {
			// Filter is the filter argument value.
			Filter apikeys.Filter
			// P is the p argument value.
			P pagination.Request
		}
		// RevokeApiKey holds details about calls to the RevokeApiKey method.
		RevokeApiKey []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockAuthenticateApiKey sync.RWMutex
	lockGenerateNewApiKey  sync.RWMutex
	lockListAPIKeys        sync.RWMutex
	lockRevokeApiKey       sync.RWMutex
}

// AuthenticateApiKey calls AuthenticateApiKeyFunc.
func (mock *apiKeyServiceMock) AuthenticateApiKey(base64IdAndKeyCombination string) (apikeys.ApiKeyAuthenticationDTO, error) {
	if mock.AuthenticateApiKeyFunc == nil {
		panic("apiKeyServiceMock.AuthenticateApiKeyFunc: method is nil but apiKeyService.AuthenticateApiKey was just called")
	}
	callInfo := struct {
		Base64IdAndKeyCombination string
	}{
		Base64IdAndKeyCombination: base64IdAndKeyCombination,
	}
	mock.lockAuthenticateApiKey.Lock()
	mock.calls.AuthenticateApiKey = append(mock.calls.AuthenticateApiKey, callInfo)
	mock.lockAuthenticateApiKey.Unlock()
	return mock.AuthenticateApiKeyFunc(base64IdAndKeyCombination)
}

// AuthenticateApiKeyCalls gets all the calls that were made to AuthenticateApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.AuthenticateApiKeyCalls())
func (mock *apiKeyServiceMock) AuthenticateApiKeyCalls() []struct {
	Base64IdAndKeyCombination string
} {
	var calls []struct {
		Base64IdAndKeyCombination string
	}
	mock.lockAuthenticateApiKey.RLock()
	calls = mock.calls.AuthenticateApiKey
	mock.lockAuthenticateApiKey.RUnlock()
	return calls
}

// GenerateNewApiKey calls GenerateNewApiKeyFunc.
func (mock *apiKeyServiceMock) GenerateNewApiKey(name string, tenantId int64, permissions []string, expiry *time.Time) (string, error) {
	if mock.GenerateNewApiKeyFunc == nil {
		panic("apiKeyServiceMock.GenerateNewApiKeyFunc: method is nil but apiKeyService.GenerateNewApiKey was just called")
	}
	callInfo := struct {
		Name        string
		TenantId    int64
		Permissions []string
		Expiry      *time.Time
	}{
		Name:        name,
		TenantId:    tenantId,
		Permissions: permissions,
		Expiry:      expiry,
	}
	mock.lockGenerateNewApiKey.Lock()
	mock.calls.GenerateNewApiKey = append(mock.calls.GenerateNewApiKey, callInfo)
	mock.lockGenerateNewApiKey.Unlock()
	return mock.GenerateNewApiKeyFunc(name, tenantId, permissions, expiry)
}

// GenerateNewApiKeyCalls gets all the calls that were made to GenerateNewApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.GenerateNewApiKeyCalls())
func (mock *apiKeyServiceMock) GenerateNewApiKeyCalls() []struct {
	Name        string
	TenantId    int64
	Permissions []string
	Expiry      *time.Time
} {
	var calls []struct {
		Name        string
		TenantId    int64
		Permissions []string
		Expiry      *time.Time
	}
	mock.lockGenerateNewApiKey.RLock()
	calls = mock.calls.GenerateNewApiKey
	mock.lockGenerateNewApiKey.RUnlock()
	return calls
}

// ListAPIKeys calls ListAPIKeysFunc.
func (mock *apiKeyServiceMock) ListAPIKeys(filter apikeys.Filter, p pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
	if mock.ListAPIKeysFunc == nil {
		panic("apiKeyServiceMock.ListAPIKeysFunc: method is nil but apiKeyService.ListAPIKeys was just called")
	}
	callInfo := struct {
		Filter apikeys.Filter
		P      pagination.Request
	}{
		Filter: filter,
		P:      p,
	}
	mock.lockListAPIKeys.Lock()
	mock.calls.ListAPIKeys = append(mock.calls.ListAPIKeys, callInfo)
	mock.lockListAPIKeys.Unlock()
	return mock.ListAPIKeysFunc(filter, p)
}

// ListAPIKeysCalls gets all the calls that were made to ListAPIKeys.
// Check the length with:
//
//	len(mockedapiKeyService.ListAPIKeysCalls())
func (mock *apiKeyServiceMock) ListAPIKeysCalls() []struct {
	Filter apikeys.Filter
	P      pagination.Request
} {
	var calls []struct {
		Filter apikeys.Filter
		P      pagination.Request
	}
	mock.lockListAPIKeys.RLock()
	calls = mock.calls.ListAPIKeys
	mock.lockListAPIKeys.RUnlock()
	return calls
}

// RevokeApiKey calls RevokeApiKeyFunc.
func (mock *apiKeyServiceMock) RevokeApiKey(id int64) error {
	if mock.RevokeApiKeyFunc == nil {
		panic("apiKeyServiceMock.RevokeApiKeyFunc: method is nil but apiKeyService.RevokeApiKey was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockRevokeApiKey.Lock()
	mock.calls.RevokeApiKey = append(mock.calls.RevokeApiKey, callInfo)
	mock.lockRevokeApiKey.Unlock()
	return mock.RevokeApiKeyFunc(id)
}

// RevokeApiKeyCalls gets all the calls that were made to RevokeApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.RevokeApiKeyCalls())
func (mock *apiKeyServiceMock) RevokeApiKeyCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockRevokeApiKey.RLock()
	calls = mock.calls.RevokeApiKey
	mock.lockRevokeApiKey.RUnlock()
	return calls
}
