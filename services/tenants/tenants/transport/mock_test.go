// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tenantstransport

import (
	"sensorbucket.nl/sensorbucket/services/tenants/tenants"
	"sync"
	"time"
)

// Ensure, that serviceMock does implement service.
// If this is not the case, regenerate this file with moq.
var _ service = &serviceMock{}

// serviceMock is a mock implementation of service.
//
//	func TestSomethingThatUsesservice(t *testing.T) {
//
//		// make and configure a mocked service
//		mockedservice := &serviceMock{
//			GenerateNewApiKeyFunc: func(owner tenants.Tenant, expiry *time.Time) (string, error) {
//				panic("mock out the GenerateNewApiKey method")
//			},
//			GetHashedApiKeyByIdFunc: func(id int64) (tenants.ApiKey, error) {
//				panic("mock out the GetHashedApiKeyById method")
//			},
//			GetTenantByIdFunc: func(id int64) (tenants.Tenant, error) {
//				panic("mock out the GetTenantById method")
//			},
//		}
//
//		// use mockedservice in code that requires service
//		// and then make assertions.
//
//	}
type serviceMock struct {
	// GenerateNewApiKeyFunc mocks the GenerateNewApiKey method.
	GenerateNewApiKeyFunc func(owner tenants.Tenant, expiry *time.Time) (string, error)

	// GetHashedApiKeyByIdFunc mocks the GetHashedApiKeyById method.
	GetHashedApiKeyByIdFunc func(id int64) (tenants.ApiKey, error)

	// GetTenantByIdFunc mocks the GetTenantById method.
	GetTenantByIdFunc func(id int64) (tenants.Tenant, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateNewApiKey holds details about calls to the GenerateNewApiKey method.
		GenerateNewApiKey []struct {
			// Owner is the owner argument value.
			Owner tenants.Tenant
			// Expiry is the expiry argument value.
			Expiry *time.Time
		}
		// GetHashedApiKeyById holds details about calls to the GetHashedApiKeyById method.
		GetHashedApiKeyById []struct {
			// ID is the id argument value.
			ID int64
		}
		// GetTenantById holds details about calls to the GetTenantById method.
		GetTenantById []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockGenerateNewApiKey   sync.RWMutex
	lockGetHashedApiKeyById sync.RWMutex
	lockGetTenantById       sync.RWMutex
}

// GenerateNewApiKey calls GenerateNewApiKeyFunc.
func (mock *serviceMock) GenerateNewApiKey(owner tenants.Tenant, expiry *time.Time) (string, error) {
	if mock.GenerateNewApiKeyFunc == nil {
		panic("serviceMock.GenerateNewApiKeyFunc: method is nil but service.GenerateNewApiKey was just called")
	}
	callInfo := struct {
		Owner  tenants.Tenant
		Expiry *time.Time
	}{
		Owner:  owner,
		Expiry: expiry,
	}
	mock.lockGenerateNewApiKey.Lock()
	mock.calls.GenerateNewApiKey = append(mock.calls.GenerateNewApiKey, callInfo)
	mock.lockGenerateNewApiKey.Unlock()
	return mock.GenerateNewApiKeyFunc(owner, expiry)
}

// GenerateNewApiKeyCalls gets all the calls that were made to GenerateNewApiKey.
// Check the length with:
//
//	len(mockedservice.GenerateNewApiKeyCalls())
func (mock *serviceMock) GenerateNewApiKeyCalls() []struct {
	Owner  tenants.Tenant
	Expiry *time.Time
} {
	var calls []struct {
		Owner  tenants.Tenant
		Expiry *time.Time
	}
	mock.lockGenerateNewApiKey.RLock()
	calls = mock.calls.GenerateNewApiKey
	mock.lockGenerateNewApiKey.RUnlock()
	return calls
}

// GetHashedApiKeyById calls GetHashedApiKeyByIdFunc.
func (mock *serviceMock) GetHashedApiKeyById(id int64) (tenants.ApiKey, error) {
	if mock.GetHashedApiKeyByIdFunc == nil {
		panic("serviceMock.GetHashedApiKeyByIdFunc: method is nil but service.GetHashedApiKeyById was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetHashedApiKeyById.Lock()
	mock.calls.GetHashedApiKeyById = append(mock.calls.GetHashedApiKeyById, callInfo)
	mock.lockGetHashedApiKeyById.Unlock()
	return mock.GetHashedApiKeyByIdFunc(id)
}

// GetHashedApiKeyByIdCalls gets all the calls that were made to GetHashedApiKeyById.
// Check the length with:
//
//	len(mockedservice.GetHashedApiKeyByIdCalls())
func (mock *serviceMock) GetHashedApiKeyByIdCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetHashedApiKeyById.RLock()
	calls = mock.calls.GetHashedApiKeyById
	mock.lockGetHashedApiKeyById.RUnlock()
	return calls
}

// GetTenantById calls GetTenantByIdFunc.
func (mock *serviceMock) GetTenantById(id int64) (tenants.Tenant, error) {
	if mock.GetTenantByIdFunc == nil {
		panic("serviceMock.GetTenantByIdFunc: method is nil but service.GetTenantById was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetTenantById.Lock()
	mock.calls.GetTenantById = append(mock.calls.GetTenantById, callInfo)
	mock.lockGetTenantById.Unlock()
	return mock.GetTenantByIdFunc(id)
}

// GetTenantByIdCalls gets all the calls that were made to GetTenantById.
// Check the length with:
//
//	len(mockedservice.GetTenantByIdCalls())
func (mock *serviceMock) GetTenantByIdCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetTenantById.RLock()
	calls = mock.calls.GetTenantById
	mock.lockGetTenantById.RUnlock()
	return calls
}
