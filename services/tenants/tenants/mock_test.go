// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tenants

import (
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sync"
)

// Ensure, that tenantStoreMock does implement tenantStore.
// If this is not the case, regenerate this file with moq.
var _ tenantStore = &tenantStoreMock{}

// tenantStoreMock is a mock implementation of tenantStore.
//
//	func TestSomethingThatUsestenantStore(t *testing.T) {
//
//		// make and configure a mocked tenantStore
//		mockedtenantStore := &tenantStoreMock{
//			CreateFunc: func(tenant Tenant) error {
//				panic("mock out the Create method")
//			},
//			GetTenantByIdFunc: func(id int64) (Tenant, error) {
//				panic("mock out the GetTenantById method")
//			},
//			ListFunc: func(filter Filter, request pagination.Request) (*pagination.Page[TenantDTO], error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(tenant Tenant) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedtenantStore in code that requires tenantStore
//		// and then make assertions.
//
//	}
type tenantStoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(tenant Tenant) error

	// GetTenantByIdFunc mocks the GetTenantById method.
	GetTenantByIdFunc func(id int64) (Tenant, error)

	// ListFunc mocks the List method.
	ListFunc func(filter Filter, request pagination.Request) (*pagination.Page[TenantDTO], error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(tenant Tenant) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Tenant is the tenant argument value.
			Tenant Tenant
		}
		// GetTenantById holds details about calls to the GetTenantById method.
		GetTenantById []struct {
			// ID is the id argument value.
			ID int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// Filter is the filter argument value.
			Filter Filter
			// Request is the request argument value.
			Request pagination.Request
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Tenant is the tenant argument value.
			Tenant Tenant
		}
	}
	lockCreate        sync.RWMutex
	lockGetTenantById sync.RWMutex
	lockList          sync.RWMutex
	lockUpdate        sync.RWMutex
}

// Create calls CreateFunc.
func (mock *tenantStoreMock) Create(tenant Tenant) error {
	if mock.CreateFunc == nil {
		panic("tenantStoreMock.CreateFunc: method is nil but tenantStore.Create was just called")
	}
	callInfo := struct {
		Tenant Tenant
	}{
		Tenant: tenant,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(tenant)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedtenantStore.CreateCalls())
func (mock *tenantStoreMock) CreateCalls() []struct {
	Tenant Tenant
} {
	var calls []struct {
		Tenant Tenant
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetTenantById calls GetTenantByIdFunc.
func (mock *tenantStoreMock) GetTenantById(id int64) (Tenant, error) {
	if mock.GetTenantByIdFunc == nil {
		panic("tenantStoreMock.GetTenantByIdFunc: method is nil but tenantStore.GetTenantById was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetTenantById.Lock()
	mock.calls.GetTenantById = append(mock.calls.GetTenantById, callInfo)
	mock.lockGetTenantById.Unlock()
	return mock.GetTenantByIdFunc(id)
}

// GetTenantByIdCalls gets all the calls that were made to GetTenantById.
// Check the length with:
//
//	len(mockedtenantStore.GetTenantByIdCalls())
func (mock *tenantStoreMock) GetTenantByIdCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetTenantById.RLock()
	calls = mock.calls.GetTenantById
	mock.lockGetTenantById.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *tenantStoreMock) List(filter Filter, request pagination.Request) (*pagination.Page[TenantDTO], error) {
	if mock.ListFunc == nil {
		panic("tenantStoreMock.ListFunc: method is nil but tenantStore.List was just called")
	}
	callInfo := struct {
		Filter  Filter
		Request pagination.Request
	}{
		Filter:  filter,
		Request: request,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(filter, request)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedtenantStore.ListCalls())
func (mock *tenantStoreMock) ListCalls() []struct {
	Filter  Filter
	Request pagination.Request
} {
	var calls []struct {
		Filter  Filter
		Request pagination.Request
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *tenantStoreMock) Update(tenant Tenant) error {
	if mock.UpdateFunc == nil {
		panic("tenantStoreMock.UpdateFunc: method is nil but tenantStore.Update was just called")
	}
	callInfo := struct {
		Tenant Tenant
	}{
		Tenant: tenant,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(tenant)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedtenantStore.UpdateCalls())
func (mock *tenantStoreMock) UpdateCalls() []struct {
	Tenant Tenant
} {
	var calls []struct {
		Tenant Tenant
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
