package tenantsinfra

import (
	sq "github.com/Masterminds/squirrel"
	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/jmoiron/sqlx"
	"sensorbucket.nl/sensorbucket/services/tenants/apikeys"
)

func NewAPIKeyStorePSQL(db *sqlx.DB) *apiKeyStore {
	return &apiKeyStore{
		db: db,
	}
}

func (as *apiKeyStore) AddApiKey(tenantID int64, hashedKey apikeys.HashedApiKey) error {
	// TODO: id should probably be generated by infra layer
	q := sq.Insert("api_keys").
		Columns("id", "value", "expiration_date").
		Values(
			hashedKey.ID,
			hashedKey.Value,
			hashedKey.ExpirationDate)
	_, err := q.PlaceholderFormat(sq.Dollar).RunWith(as.db).Exec()
	return err
}

func (as *apiKeyStore) DeleteApiKey(id int64) (bool, error) {
	q := sq.Delete("").From("api_keys").Where("id=?", id)
	rows, err := q.PlaceholderFormat(sq.Dollar).RunWith(as.db).Exec()
	if err != nil {
		return false, err
	}
	deleted, err := rows.RowsAffected()
	if err != nil {
		return false, err
	}
	return deleted == 1, err
}

func (as *apiKeyStore) GetHashedApiKeyById(id int64) (apikeys.HashedApiKey, error) {
	q := sq.Select("id, value, expiration_date").From("api_keys").Where("id=?", id)
	rows, err := q.PlaceholderFormat(sq.Dollar).RunWith(as.db).Query()
	if err != nil {
		return apikeys.HashedApiKey{}, err
	}
	k := apikeys.HashedApiKey{}
	for rows.Next() {
		err = rows.Scan(
			&k.ID,
			&k.Value,
			&k.ExpirationDate)
		if err != nil {
			return apikeys.HashedApiKey{}, err
		}
	}
	return k, nil
}

type apiKeyStore struct {
	db *sqlx.DB
}
