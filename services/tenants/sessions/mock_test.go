// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sessions_test

import (
	"sensorbucket.nl/sensorbucket/services/tenants/sessions"
	"sync"
)

// Ensure, that UserPreferenceStoreMock does implement sessions.UserPreferenceStore.
// If this is not the case, regenerate this file with moq.
var _ sessions.UserPreferenceStore = &UserPreferenceStoreMock{}

// UserPreferenceStoreMock is a mock implementation of sessions.UserPreferenceStore.
//
//	func TestSomethingThatUsesUserPreferenceStore(t *testing.T) {
//
//		// make and configure a mocked sessions.UserPreferenceStore
//		mockedUserPreferenceStore := &UserPreferenceStoreMock{
//			ActiveTenantIDFunc: func(userID string) (int64, error) {
//				panic("mock out the ActiveTenantID method")
//			},
//			IsUserTenantMemberFunc: func(userID string, tenantID int64) (bool, error) {
//				panic("mock out the IsUserTenantMember method")
//			},
//			SetActiveTenantIDFunc: func(userID string, tenantID int64) error {
//				panic("mock out the SetActiveTenantID method")
//			},
//		}
//
//		// use mockedUserPreferenceStore in code that requires sessions.UserPreferenceStore
//		// and then make assertions.
//
//	}
type UserPreferenceStoreMock struct {
	// ActiveTenantIDFunc mocks the ActiveTenantID method.
	ActiveTenantIDFunc func(userID string) (int64, error)

	// IsUserTenantMemberFunc mocks the IsUserTenantMember method.
	IsUserTenantMemberFunc func(userID string, tenantID int64) (bool, error)

	// SetActiveTenantIDFunc mocks the SetActiveTenantID method.
	SetActiveTenantIDFunc func(userID string, tenantID int64) error

	// calls tracks calls to the methods.
	calls struct {
		// ActiveTenantID holds details about calls to the ActiveTenantID method.
		ActiveTenantID []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// IsUserTenantMember holds details about calls to the IsUserTenantMember method.
		IsUserTenantMember []struct {
			// UserID is the userID argument value.
			UserID string
			// TenantID is the tenantID argument value.
			TenantID int64
		}
		// SetActiveTenantID holds details about calls to the SetActiveTenantID method.
		SetActiveTenantID []struct {
			// UserID is the userID argument value.
			UserID string
			// TenantID is the tenantID argument value.
			TenantID int64
		}
	}
	lockActiveTenantID     sync.RWMutex
	lockIsUserTenantMember sync.RWMutex
	lockSetActiveTenantID  sync.RWMutex
}

// ActiveTenantID calls ActiveTenantIDFunc.
func (mock *UserPreferenceStoreMock) ActiveTenantID(userID string) (int64, error) {
	if mock.ActiveTenantIDFunc == nil {
		panic("UserPreferenceStoreMock.ActiveTenantIDFunc: method is nil but UserPreferenceStore.ActiveTenantID was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	mock.lockActiveTenantID.Lock()
	mock.calls.ActiveTenantID = append(mock.calls.ActiveTenantID, callInfo)
	mock.lockActiveTenantID.Unlock()
	return mock.ActiveTenantIDFunc(userID)
}

// ActiveTenantIDCalls gets all the calls that were made to ActiveTenantID.
// Check the length with:
//
//	len(mockedUserPreferenceStore.ActiveTenantIDCalls())
func (mock *UserPreferenceStoreMock) ActiveTenantIDCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	mock.lockActiveTenantID.RLock()
	calls = mock.calls.ActiveTenantID
	mock.lockActiveTenantID.RUnlock()
	return calls
}

// IsUserTenantMember calls IsUserTenantMemberFunc.
func (mock *UserPreferenceStoreMock) IsUserTenantMember(userID string, tenantID int64) (bool, error) {
	if mock.IsUserTenantMemberFunc == nil {
		panic("UserPreferenceStoreMock.IsUserTenantMemberFunc: method is nil but UserPreferenceStore.IsUserTenantMember was just called")
	}
	callInfo := struct {
		UserID   string
		TenantID int64
	}{
		UserID:   userID,
		TenantID: tenantID,
	}
	mock.lockIsUserTenantMember.Lock()
	mock.calls.IsUserTenantMember = append(mock.calls.IsUserTenantMember, callInfo)
	mock.lockIsUserTenantMember.Unlock()
	return mock.IsUserTenantMemberFunc(userID, tenantID)
}

// IsUserTenantMemberCalls gets all the calls that were made to IsUserTenantMember.
// Check the length with:
//
//	len(mockedUserPreferenceStore.IsUserTenantMemberCalls())
func (mock *UserPreferenceStoreMock) IsUserTenantMemberCalls() []struct {
	UserID   string
	TenantID int64
} {
	var calls []struct {
		UserID   string
		TenantID int64
	}
	mock.lockIsUserTenantMember.RLock()
	calls = mock.calls.IsUserTenantMember
	mock.lockIsUserTenantMember.RUnlock()
	return calls
}

// SetActiveTenantID calls SetActiveTenantIDFunc.
func (mock *UserPreferenceStoreMock) SetActiveTenantID(userID string, tenantID int64) error {
	if mock.SetActiveTenantIDFunc == nil {
		panic("UserPreferenceStoreMock.SetActiveTenantIDFunc: method is nil but UserPreferenceStore.SetActiveTenantID was just called")
	}
	callInfo := struct {
		UserID   string
		TenantID int64
	}{
		UserID:   userID,
		TenantID: tenantID,
	}
	mock.lockSetActiveTenantID.Lock()
	mock.calls.SetActiveTenantID = append(mock.calls.SetActiveTenantID, callInfo)
	mock.lockSetActiveTenantID.Unlock()
	return mock.SetActiveTenantIDFunc(userID, tenantID)
}

// SetActiveTenantIDCalls gets all the calls that were made to SetActiveTenantID.
// Check the length with:
//
//	len(mockedUserPreferenceStore.SetActiveTenantIDCalls())
func (mock *UserPreferenceStoreMock) SetActiveTenantIDCalls() []struct {
	UserID   string
	TenantID int64
} {
	var calls []struct {
		UserID   string
		TenantID int64
	}
	mock.lockSetActiveTenantID.RLock()
	calls = mock.calls.SetActiveTenantID
	mock.lockSetActiveTenantID.RUnlock()
	return calls
}
