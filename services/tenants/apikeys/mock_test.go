// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apikeys_test

import (
	"context"
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/pkg/auth"
	"sensorbucket.nl/sensorbucket/services/tenants/apikeys"
	"sensorbucket.nl/sensorbucket/services/tenants/tenants"
	"sync"
)

// Ensure, that ApiKeyStoreMock does implement apikeys.ApiKeyStore.
// If this is not the case, regenerate this file with moq.
var _ apikeys.ApiKeyStore = &ApiKeyStoreMock{}

// ApiKeyStoreMock is a mock implementation of apikeys.ApiKeyStore.
//
//	func TestSomethingThatUsesApiKeyStore(t *testing.T) {
//
//		// make and configure a mocked apikeys.ApiKeyStore
//		mockedApiKeyStore := &ApiKeyStoreMock{
//			AddApiKeyFunc: func(ctx context.Context, tenantID int64, permissions auth.Permissions, hashedApiKey apikeys.HashedApiKey) error {
//				panic("mock out the AddApiKey method")
//			},
//			DeleteApiKeyFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteApiKey method")
//			},
//			GetHashedAPIKeyByNameAndTenantIDFunc: func(ctx context.Context, name string, tenantID int64) (apikeys.HashedApiKey, error) {
//				panic("mock out the GetHashedAPIKeyByNameAndTenantID method")
//			},
//			GetHashedApiKeyByIdFunc: func(ctx context.Context, id int64, filter apikeys.APIKeyFilter) (apikeys.HashedApiKey, error) {
//				panic("mock out the GetHashedApiKeyById method")
//			},
//			ListFunc: func(ctx context.Context, filter apikeys.APIKeyFilter, req pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedApiKeyStore in code that requires apikeys.ApiKeyStore
//		// and then make assertions.
//
//	}
type ApiKeyStoreMock struct {
	// AddApiKeyFunc mocks the AddApiKey method.
	AddApiKeyFunc func(ctx context.Context, tenantID int64, permissions auth.Permissions, hashedApiKey apikeys.HashedApiKey) error

	// DeleteApiKeyFunc mocks the DeleteApiKey method.
	DeleteApiKeyFunc func(ctx context.Context, id int64) error

	// GetHashedAPIKeyByNameAndTenantIDFunc mocks the GetHashedAPIKeyByNameAndTenantID method.
	GetHashedAPIKeyByNameAndTenantIDFunc func(ctx context.Context, name string, tenantID int64) (apikeys.HashedApiKey, error)

	// GetHashedApiKeyByIdFunc mocks the GetHashedApiKeyById method.
	GetHashedApiKeyByIdFunc func(ctx context.Context, id int64, filter apikeys.APIKeyFilter) (apikeys.HashedApiKey, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, filter apikeys.APIKeyFilter, req pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error)

	// calls tracks calls to the methods.
	calls struct {
		// AddApiKey holds details about calls to the AddApiKey method.
		AddApiKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TenantID is the tenantID argument value.
			TenantID int64
			// Permissions is the permissions argument value.
			Permissions auth.Permissions
			// HashedApiKey is the hashedApiKey argument value.
			HashedApiKey apikeys.HashedApiKey
		}
		// DeleteApiKey holds details about calls to the DeleteApiKey method.
		DeleteApiKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetHashedAPIKeyByNameAndTenantID holds details about calls to the GetHashedAPIKeyByNameAndTenantID method.
		GetHashedAPIKeyByNameAndTenantID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// TenantID is the tenantID argument value.
			TenantID int64
		}
		// GetHashedApiKeyById holds details about calls to the GetHashedApiKeyById method.
		GetHashedApiKeyById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Filter is the filter argument value.
			Filter apikeys.APIKeyFilter
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter apikeys.APIKeyFilter
			// Req is the req argument value.
			Req pagination.Request
		}
	}
	lockAddApiKey                        sync.RWMutex
	lockDeleteApiKey                     sync.RWMutex
	lockGetHashedAPIKeyByNameAndTenantID sync.RWMutex
	lockGetHashedApiKeyById              sync.RWMutex
	lockList                             sync.RWMutex
}

// AddApiKey calls AddApiKeyFunc.
func (mock *ApiKeyStoreMock) AddApiKey(ctx context.Context, tenantID int64, permissions auth.Permissions, hashedApiKey apikeys.HashedApiKey) error {
	if mock.AddApiKeyFunc == nil {
		panic("ApiKeyStoreMock.AddApiKeyFunc: method is nil but ApiKeyStore.AddApiKey was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		TenantID     int64
		Permissions  auth.Permissions
		HashedApiKey apikeys.HashedApiKey
	}{
		Ctx:          ctx,
		TenantID:     tenantID,
		Permissions:  permissions,
		HashedApiKey: hashedApiKey,
	}
	mock.lockAddApiKey.Lock()
	mock.calls.AddApiKey = append(mock.calls.AddApiKey, callInfo)
	mock.lockAddApiKey.Unlock()
	return mock.AddApiKeyFunc(ctx, tenantID, permissions, hashedApiKey)
}

// AddApiKeyCalls gets all the calls that were made to AddApiKey.
// Check the length with:
//
//	len(mockedApiKeyStore.AddApiKeyCalls())
func (mock *ApiKeyStoreMock) AddApiKeyCalls() []struct {
	Ctx          context.Context
	TenantID     int64
	Permissions  auth.Permissions
	HashedApiKey apikeys.HashedApiKey
} {
	var calls []struct {
		Ctx          context.Context
		TenantID     int64
		Permissions  auth.Permissions
		HashedApiKey apikeys.HashedApiKey
	}
	mock.lockAddApiKey.RLock()
	calls = mock.calls.AddApiKey
	mock.lockAddApiKey.RUnlock()
	return calls
}

// DeleteApiKey calls DeleteApiKeyFunc.
func (mock *ApiKeyStoreMock) DeleteApiKey(ctx context.Context, id int64) error {
	if mock.DeleteApiKeyFunc == nil {
		panic("ApiKeyStoreMock.DeleteApiKeyFunc: method is nil but ApiKeyStore.DeleteApiKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteApiKey.Lock()
	mock.calls.DeleteApiKey = append(mock.calls.DeleteApiKey, callInfo)
	mock.lockDeleteApiKey.Unlock()
	return mock.DeleteApiKeyFunc(ctx, id)
}

// DeleteApiKeyCalls gets all the calls that were made to DeleteApiKey.
// Check the length with:
//
//	len(mockedApiKeyStore.DeleteApiKeyCalls())
func (mock *ApiKeyStoreMock) DeleteApiKeyCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteApiKey.RLock()
	calls = mock.calls.DeleteApiKey
	mock.lockDeleteApiKey.RUnlock()
	return calls
}

// GetHashedAPIKeyByNameAndTenantID calls GetHashedAPIKeyByNameAndTenantIDFunc.
func (mock *ApiKeyStoreMock) GetHashedAPIKeyByNameAndTenantID(ctx context.Context, name string, tenantID int64) (apikeys.HashedApiKey, error) {
	if mock.GetHashedAPIKeyByNameAndTenantIDFunc == nil {
		panic("ApiKeyStoreMock.GetHashedAPIKeyByNameAndTenantIDFunc: method is nil but ApiKeyStore.GetHashedAPIKeyByNameAndTenantID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Name     string
		TenantID int64
	}{
		Ctx:      ctx,
		Name:     name,
		TenantID: tenantID,
	}
	mock.lockGetHashedAPIKeyByNameAndTenantID.Lock()
	mock.calls.GetHashedAPIKeyByNameAndTenantID = append(mock.calls.GetHashedAPIKeyByNameAndTenantID, callInfo)
	mock.lockGetHashedAPIKeyByNameAndTenantID.Unlock()
	return mock.GetHashedAPIKeyByNameAndTenantIDFunc(ctx, name, tenantID)
}

// GetHashedAPIKeyByNameAndTenantIDCalls gets all the calls that were made to GetHashedAPIKeyByNameAndTenantID.
// Check the length with:
//
//	len(mockedApiKeyStore.GetHashedAPIKeyByNameAndTenantIDCalls())
func (mock *ApiKeyStoreMock) GetHashedAPIKeyByNameAndTenantIDCalls() []struct {
	Ctx      context.Context
	Name     string
	TenantID int64
} {
	var calls []struct {
		Ctx      context.Context
		Name     string
		TenantID int64
	}
	mock.lockGetHashedAPIKeyByNameAndTenantID.RLock()
	calls = mock.calls.GetHashedAPIKeyByNameAndTenantID
	mock.lockGetHashedAPIKeyByNameAndTenantID.RUnlock()
	return calls
}

// GetHashedApiKeyById calls GetHashedApiKeyByIdFunc.
func (mock *ApiKeyStoreMock) GetHashedApiKeyById(ctx context.Context, id int64, filter apikeys.APIKeyFilter) (apikeys.HashedApiKey, error) {
	if mock.GetHashedApiKeyByIdFunc == nil {
		panic("ApiKeyStoreMock.GetHashedApiKeyByIdFunc: method is nil but ApiKeyStore.GetHashedApiKeyById was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     int64
		Filter apikeys.APIKeyFilter
	}{
		Ctx:    ctx,
		ID:     id,
		Filter: filter,
	}
	mock.lockGetHashedApiKeyById.Lock()
	mock.calls.GetHashedApiKeyById = append(mock.calls.GetHashedApiKeyById, callInfo)
	mock.lockGetHashedApiKeyById.Unlock()
	return mock.GetHashedApiKeyByIdFunc(ctx, id, filter)
}

// GetHashedApiKeyByIdCalls gets all the calls that were made to GetHashedApiKeyById.
// Check the length with:
//
//	len(mockedApiKeyStore.GetHashedApiKeyByIdCalls())
func (mock *ApiKeyStoreMock) GetHashedApiKeyByIdCalls() []struct {
	Ctx    context.Context
	ID     int64
	Filter apikeys.APIKeyFilter
} {
	var calls []struct {
		Ctx    context.Context
		ID     int64
		Filter apikeys.APIKeyFilter
	}
	mock.lockGetHashedApiKeyById.RLock()
	calls = mock.calls.GetHashedApiKeyById
	mock.lockGetHashedApiKeyById.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ApiKeyStoreMock) List(ctx context.Context, filter apikeys.APIKeyFilter, req pagination.Request) (*pagination.Page[apikeys.ApiKeyDTO], error) {
	if mock.ListFunc == nil {
		panic("ApiKeyStoreMock.ListFunc: method is nil but ApiKeyStore.List was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter apikeys.APIKeyFilter
		Req    pagination.Request
	}{
		Ctx:    ctx,
		Filter: filter,
		Req:    req,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, filter, req)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedApiKeyStore.ListCalls())
func (mock *ApiKeyStoreMock) ListCalls() []struct {
	Ctx    context.Context
	Filter apikeys.APIKeyFilter
	Req    pagination.Request
} {
	var calls []struct {
		Ctx    context.Context
		Filter apikeys.APIKeyFilter
		Req    pagination.Request
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Ensure, that TenantStoreMock does implement apikeys.TenantStore.
// If this is not the case, regenerate this file with moq.
var _ apikeys.TenantStore = &TenantStoreMock{}

// TenantStoreMock is a mock implementation of apikeys.TenantStore.
//
//	func TestSomethingThatUsesTenantStore(t *testing.T) {
//
//		// make and configure a mocked apikeys.TenantStore
//		mockedTenantStore := &TenantStoreMock{
//			GetTenantByIDFunc: func(ctx context.Context, id int64) (*tenants.Tenant, error) {
//				panic("mock out the GetTenantByID method")
//			},
//		}
//
//		// use mockedTenantStore in code that requires apikeys.TenantStore
//		// and then make assertions.
//
//	}
type TenantStoreMock struct {
	// GetTenantByIDFunc mocks the GetTenantByID method.
	GetTenantByIDFunc func(ctx context.Context, id int64) (*tenants.Tenant, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTenantByID holds details about calls to the GetTenantByID method.
		GetTenantByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockGetTenantByID sync.RWMutex
}

// GetTenantByID calls GetTenantByIDFunc.
func (mock *TenantStoreMock) GetTenantByID(ctx context.Context, id int64) (*tenants.Tenant, error) {
	if mock.GetTenantByIDFunc == nil {
		panic("TenantStoreMock.GetTenantByIDFunc: method is nil but TenantStore.GetTenantByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTenantByID.Lock()
	mock.calls.GetTenantByID = append(mock.calls.GetTenantByID, callInfo)
	mock.lockGetTenantByID.Unlock()
	return mock.GetTenantByIDFunc(ctx, id)
}

// GetTenantByIDCalls gets all the calls that were made to GetTenantByID.
// Check the length with:
//
//	len(mockedTenantStore.GetTenantByIDCalls())
func (mock *TenantStoreMock) GetTenantByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetTenantByID.RLock()
	calls = mock.calls.GetTenantByID
	mock.lockGetTenantByID.RUnlock()
	return calls
}
