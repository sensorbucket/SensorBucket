// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apikeys

import (
	"sensorbucket.nl/sensorbucket/internal/pagination"
	"sensorbucket.nl/sensorbucket/services/tenants/tenants"
	"sync"
)

// Ensure, that tenantStoreMock does implement tenantStore.
// If this is not the case, regenerate this file with moq.
var _ tenantStore = &tenantStoreMock{}

// tenantStoreMock is a mock implementation of tenantStore.
//
//	func TestSomethingThatUsestenantStore(t *testing.T) {
//
//		// make and configure a mocked tenantStore
//		mockedtenantStore := &tenantStoreMock{
//			GetTenantByIdFunc: func(id int64) (tenants.Tenant, error) {
//				panic("mock out the GetTenantById method")
//			},
//		}
//
//		// use mockedtenantStore in code that requires tenantStore
//		// and then make assertions.
//
//	}
type tenantStoreMock struct {
	// GetTenantByIdFunc mocks the GetTenantById method.
	GetTenantByIdFunc func(id int64) (tenants.Tenant, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTenantById holds details about calls to the GetTenantById method.
		GetTenantById []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockGetTenantById sync.RWMutex
}

// GetTenantById calls GetTenantByIdFunc.
func (mock *tenantStoreMock) GetTenantById(id int64) (tenants.Tenant, error) {
	if mock.GetTenantByIdFunc == nil {
		panic("tenantStoreMock.GetTenantByIdFunc: method is nil but tenantStore.GetTenantById was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetTenantById.Lock()
	mock.calls.GetTenantById = append(mock.calls.GetTenantById, callInfo)
	mock.lockGetTenantById.Unlock()
	return mock.GetTenantByIdFunc(id)
}

// GetTenantByIdCalls gets all the calls that were made to GetTenantById.
// Check the length with:
//
//	len(mockedtenantStore.GetTenantByIdCalls())
func (mock *tenantStoreMock) GetTenantByIdCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetTenantById.RLock()
	calls = mock.calls.GetTenantById
	mock.lockGetTenantById.RUnlock()
	return calls
}

// Ensure, that apiKeyStoreMock does implement apiKeyStore.
// If this is not the case, regenerate this file with moq.
var _ apiKeyStore = &apiKeyStoreMock{}

// apiKeyStoreMock is a mock implementation of apiKeyStore.
//
//	func TestSomethingThatUsesapiKeyStore(t *testing.T) {
//
//		// make and configure a mocked apiKeyStore
//		mockedapiKeyStore := &apiKeyStoreMock{
//			AddApiKeyFunc: func(tenantID int64, hashedApiKey HashedApiKey) error {
//				panic("mock out the AddApiKey method")
//			},
//			DeleteApiKeyFunc: func(id int64) error {
//				panic("mock out the DeleteApiKey method")
//			},
//			GetHashedAPIKeyByNameAndTenantIDFunc: func(name string, tenantID int64) (HashedApiKey, error) {
//				panic("mock out the GetHashedAPIKeyByNameAndTenantID method")
//			},
//			GetHashedApiKeyByIdFunc: func(id int64, stateFilter []tenants.State) (HashedApiKey, error) {
//				panic("mock out the GetHashedApiKeyById method")
//			},
//			ListFunc: func(filter Filter, request pagination.Request) (*pagination.Page[ApiKeyDTO], error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedapiKeyStore in code that requires apiKeyStore
//		// and then make assertions.
//
//	}
type apiKeyStoreMock struct {
	// AddApiKeyFunc mocks the AddApiKey method.
	AddApiKeyFunc func(tenantID int64, hashedApiKey HashedApiKey) error

	// DeleteApiKeyFunc mocks the DeleteApiKey method.
	DeleteApiKeyFunc func(id int64) error

	// GetHashedAPIKeyByNameAndTenantIDFunc mocks the GetHashedAPIKeyByNameAndTenantID method.
	GetHashedAPIKeyByNameAndTenantIDFunc func(name string, tenantID int64) (HashedApiKey, error)

	// GetHashedApiKeyByIdFunc mocks the GetHashedApiKeyById method.
	GetHashedApiKeyByIdFunc func(id int64, stateFilter []tenants.State) (HashedApiKey, error)

	// ListFunc mocks the List method.
	ListFunc func(filter Filter, request pagination.Request) (*pagination.Page[ApiKeyDTO], error)

	// calls tracks calls to the methods.
	calls struct {
		// AddApiKey holds details about calls to the AddApiKey method.
		AddApiKey []struct {
			// TenantID is the tenantID argument value.
			TenantID int64
			// HashedApiKey is the hashedApiKey argument value.
			HashedApiKey HashedApiKey
		}
		// DeleteApiKey holds details about calls to the DeleteApiKey method.
		DeleteApiKey []struct {
			// ID is the id argument value.
			ID int64
		}
		// GetHashedAPIKeyByNameAndTenantID holds details about calls to the GetHashedAPIKeyByNameAndTenantID method.
		GetHashedAPIKeyByNameAndTenantID []struct {
			// Name is the name argument value.
			Name string
			// TenantID is the tenantID argument value.
			TenantID int64
		}
		// GetHashedApiKeyById holds details about calls to the GetHashedApiKeyById method.
		GetHashedApiKeyById []struct {
			// ID is the id argument value.
			ID int64
			// StateFilter is the stateFilter argument value.
			StateFilter []tenants.State
		}
		// List holds details about calls to the List method.
		List []struct {
			// Filter is the filter argument value.
			Filter Filter
			// Request is the request argument value.
			Request pagination.Request
		}
	}
	lockAddApiKey                        sync.RWMutex
	lockDeleteApiKey                     sync.RWMutex
	lockGetHashedAPIKeyByNameAndTenantID sync.RWMutex
	lockGetHashedApiKeyById              sync.RWMutex
	lockList                             sync.RWMutex
}

// AddApiKey calls AddApiKeyFunc.
func (mock *apiKeyStoreMock) AddApiKey(tenantID int64, hashedApiKey HashedApiKey) error {
	if mock.AddApiKeyFunc == nil {
		panic("apiKeyStoreMock.AddApiKeyFunc: method is nil but apiKeyStore.AddApiKey was just called")
	}
	callInfo := struct {
		TenantID     int64
		HashedApiKey HashedApiKey
	}{
		TenantID:     tenantID,
		HashedApiKey: hashedApiKey,
	}
	mock.lockAddApiKey.Lock()
	mock.calls.AddApiKey = append(mock.calls.AddApiKey, callInfo)
	mock.lockAddApiKey.Unlock()
	return mock.AddApiKeyFunc(tenantID, hashedApiKey)
}

// AddApiKeyCalls gets all the calls that were made to AddApiKey.
// Check the length with:
//
//	len(mockedapiKeyStore.AddApiKeyCalls())
func (mock *apiKeyStoreMock) AddApiKeyCalls() []struct {
	TenantID     int64
	HashedApiKey HashedApiKey
} {
	var calls []struct {
		TenantID     int64
		HashedApiKey HashedApiKey
	}
	mock.lockAddApiKey.RLock()
	calls = mock.calls.AddApiKey
	mock.lockAddApiKey.RUnlock()
	return calls
}

// DeleteApiKey calls DeleteApiKeyFunc.
func (mock *apiKeyStoreMock) DeleteApiKey(id int64) error {
	if mock.DeleteApiKeyFunc == nil {
		panic("apiKeyStoreMock.DeleteApiKeyFunc: method is nil but apiKeyStore.DeleteApiKey was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockDeleteApiKey.Lock()
	mock.calls.DeleteApiKey = append(mock.calls.DeleteApiKey, callInfo)
	mock.lockDeleteApiKey.Unlock()
	return mock.DeleteApiKeyFunc(id)
}

// DeleteApiKeyCalls gets all the calls that were made to DeleteApiKey.
// Check the length with:
//
//	len(mockedapiKeyStore.DeleteApiKeyCalls())
func (mock *apiKeyStoreMock) DeleteApiKeyCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockDeleteApiKey.RLock()
	calls = mock.calls.DeleteApiKey
	mock.lockDeleteApiKey.RUnlock()
	return calls
}

// GetHashedAPIKeyByNameAndTenantID calls GetHashedAPIKeyByNameAndTenantIDFunc.
func (mock *apiKeyStoreMock) GetHashedAPIKeyByNameAndTenantID(name string, tenantID int64) (HashedApiKey, error) {
	if mock.GetHashedAPIKeyByNameAndTenantIDFunc == nil {
		panic("apiKeyStoreMock.GetHashedAPIKeyByNameAndTenantIDFunc: method is nil but apiKeyStore.GetHashedAPIKeyByNameAndTenantID was just called")
	}
	callInfo := struct {
		Name     string
		TenantID int64
	}{
		Name:     name,
		TenantID: tenantID,
	}
	mock.lockGetHashedAPIKeyByNameAndTenantID.Lock()
	mock.calls.GetHashedAPIKeyByNameAndTenantID = append(mock.calls.GetHashedAPIKeyByNameAndTenantID, callInfo)
	mock.lockGetHashedAPIKeyByNameAndTenantID.Unlock()
	return mock.GetHashedAPIKeyByNameAndTenantIDFunc(name, tenantID)
}

// GetHashedAPIKeyByNameAndTenantIDCalls gets all the calls that were made to GetHashedAPIKeyByNameAndTenantID.
// Check the length with:
//
//	len(mockedapiKeyStore.GetHashedAPIKeyByNameAndTenantIDCalls())
func (mock *apiKeyStoreMock) GetHashedAPIKeyByNameAndTenantIDCalls() []struct {
	Name     string
	TenantID int64
} {
	var calls []struct {
		Name     string
		TenantID int64
	}
	mock.lockGetHashedAPIKeyByNameAndTenantID.RLock()
	calls = mock.calls.GetHashedAPIKeyByNameAndTenantID
	mock.lockGetHashedAPIKeyByNameAndTenantID.RUnlock()
	return calls
}

// GetHashedApiKeyById calls GetHashedApiKeyByIdFunc.
func (mock *apiKeyStoreMock) GetHashedApiKeyById(id int64, stateFilter []tenants.State) (HashedApiKey, error) {
	if mock.GetHashedApiKeyByIdFunc == nil {
		panic("apiKeyStoreMock.GetHashedApiKeyByIdFunc: method is nil but apiKeyStore.GetHashedApiKeyById was just called")
	}
	callInfo := struct {
		ID          int64
		StateFilter []tenants.State
	}{
		ID:          id,
		StateFilter: stateFilter,
	}
	mock.lockGetHashedApiKeyById.Lock()
	mock.calls.GetHashedApiKeyById = append(mock.calls.GetHashedApiKeyById, callInfo)
	mock.lockGetHashedApiKeyById.Unlock()
	return mock.GetHashedApiKeyByIdFunc(id, stateFilter)
}

// GetHashedApiKeyByIdCalls gets all the calls that were made to GetHashedApiKeyById.
// Check the length with:
//
//	len(mockedapiKeyStore.GetHashedApiKeyByIdCalls())
func (mock *apiKeyStoreMock) GetHashedApiKeyByIdCalls() []struct {
	ID          int64
	StateFilter []tenants.State
} {
	var calls []struct {
		ID          int64
		StateFilter []tenants.State
	}
	mock.lockGetHashedApiKeyById.RLock()
	calls = mock.calls.GetHashedApiKeyById
	mock.lockGetHashedApiKeyById.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *apiKeyStoreMock) List(filter Filter, request pagination.Request) (*pagination.Page[ApiKeyDTO], error) {
	if mock.ListFunc == nil {
		panic("apiKeyStoreMock.ListFunc: method is nil but apiKeyStore.List was just called")
	}
	callInfo := struct {
		Filter  Filter
		Request pagination.Request
	}{
		Filter:  filter,
		Request: request,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(filter, request)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedapiKeyStore.ListCalls())
func (mock *apiKeyStoreMock) ListCalls() []struct {
	Filter  Filter
	Request pagination.Request
} {
	var calls []struct {
		Filter  Filter
		Request pagination.Request
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
