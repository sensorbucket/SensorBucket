// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apikeystransport

import (
	"sync"
	"time"
)

// Ensure, that apiKeyServiceMock does implement apiKeyService.
// If this is not the case, regenerate this file with moq.
var _ apiKeyService = &apiKeyServiceMock{}

// apiKeyServiceMock is a mock implementation of apiKeyService.
//
//	func TestSomethingThatUsesapiKeyService(t *testing.T) {
//
//		// make and configure a mocked apiKeyService
//		mockedapiKeyService := &apiKeyServiceMock{
//			GenerateNewApiKeyFunc: func(tenantId int64, expiry *time.Time) (int64, string, error) {
//				panic("mock out the GenerateNewApiKey method")
//			},
//			RevokeApiKeyFunc: func(apiKeyId int64) error {
//				panic("mock out the RevokeApiKey method")
//			},
//			ValidateApiKeyFunc: func(base64IdAndKeyCombination string) (bool, error) {
//				panic("mock out the ValidateApiKey method")
//			},
//		}
//
//		// use mockedapiKeyService in code that requires apiKeyService
//		// and then make assertions.
//
//	}
type apiKeyServiceMock struct {
	// GenerateNewApiKeyFunc mocks the GenerateNewApiKey method.
	GenerateNewApiKeyFunc func(tenantId int64, expiry *time.Time) (int64, string, error)

	// RevokeApiKeyFunc mocks the RevokeApiKey method.
	RevokeApiKeyFunc func(apiKeyId int64) error

	// ValidateApiKeyFunc mocks the ValidateApiKey method.
	ValidateApiKeyFunc func(base64IdAndKeyCombination string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateNewApiKey holds details about calls to the GenerateNewApiKey method.
		GenerateNewApiKey []struct {
			// TenantId is the tenantId argument value.
			TenantId int64
			// Expiry is the expiry argument value.
			Expiry *time.Time
		}
		// RevokeApiKey holds details about calls to the RevokeApiKey method.
		RevokeApiKey []struct {
			// ApiKeyId is the apiKeyId argument value.
			ApiKeyId int64
		}
		// ValidateApiKey holds details about calls to the ValidateApiKey method.
		ValidateApiKey []struct {
			// Base64IdAndKeyCombination is the base64IdAndKeyCombination argument value.
			Base64IdAndKeyCombination string
		}
	}
	lockGenerateNewApiKey sync.RWMutex
	lockRevokeApiKey      sync.RWMutex
	lockValidateApiKey    sync.RWMutex
}

// GenerateNewApiKey calls GenerateNewApiKeyFunc.
func (mock *apiKeyServiceMock) GenerateNewApiKey(tenantId int64, expiry *time.Time) (int64, string, error) {
	if mock.GenerateNewApiKeyFunc == nil {
		panic("apiKeyServiceMock.GenerateNewApiKeyFunc: method is nil but apiKeyService.GenerateNewApiKey was just called")
	}
	callInfo := struct {
		TenantId int64
		Expiry   *time.Time
	}{
		TenantId: tenantId,
		Expiry:   expiry,
	}
	mock.lockGenerateNewApiKey.Lock()
	mock.calls.GenerateNewApiKey = append(mock.calls.GenerateNewApiKey, callInfo)
	mock.lockGenerateNewApiKey.Unlock()
	return mock.GenerateNewApiKeyFunc(tenantId, expiry)
}

// GenerateNewApiKeyCalls gets all the calls that were made to GenerateNewApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.GenerateNewApiKeyCalls())
func (mock *apiKeyServiceMock) GenerateNewApiKeyCalls() []struct {
	TenantId int64
	Expiry   *time.Time
} {
	var calls []struct {
		TenantId int64
		Expiry   *time.Time
	}
	mock.lockGenerateNewApiKey.RLock()
	calls = mock.calls.GenerateNewApiKey
	mock.lockGenerateNewApiKey.RUnlock()
	return calls
}

// RevokeApiKey calls RevokeApiKeyFunc.
func (mock *apiKeyServiceMock) RevokeApiKey(apiKeyId int64) error {
	if mock.RevokeApiKeyFunc == nil {
		panic("apiKeyServiceMock.RevokeApiKeyFunc: method is nil but apiKeyService.RevokeApiKey was just called")
	}
	callInfo := struct {
		ApiKeyId int64
	}{
		ApiKeyId: apiKeyId,
	}
	mock.lockRevokeApiKey.Lock()
	mock.calls.RevokeApiKey = append(mock.calls.RevokeApiKey, callInfo)
	mock.lockRevokeApiKey.Unlock()
	return mock.RevokeApiKeyFunc(apiKeyId)
}

// RevokeApiKeyCalls gets all the calls that were made to RevokeApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.RevokeApiKeyCalls())
func (mock *apiKeyServiceMock) RevokeApiKeyCalls() []struct {
	ApiKeyId int64
} {
	var calls []struct {
		ApiKeyId int64
	}
	mock.lockRevokeApiKey.RLock()
	calls = mock.calls.RevokeApiKey
	mock.lockRevokeApiKey.RUnlock()
	return calls
}

// ValidateApiKey calls ValidateApiKeyFunc.
func (mock *apiKeyServiceMock) ValidateApiKey(base64IdAndKeyCombination string) (bool, error) {
	if mock.ValidateApiKeyFunc == nil {
		panic("apiKeyServiceMock.ValidateApiKeyFunc: method is nil but apiKeyService.ValidateApiKey was just called")
	}
	callInfo := struct {
		Base64IdAndKeyCombination string
	}{
		Base64IdAndKeyCombination: base64IdAndKeyCombination,
	}
	mock.lockValidateApiKey.Lock()
	mock.calls.ValidateApiKey = append(mock.calls.ValidateApiKey, callInfo)
	mock.lockValidateApiKey.Unlock()
	return mock.ValidateApiKeyFunc(base64IdAndKeyCombination)
}

// ValidateApiKeyCalls gets all the calls that were made to ValidateApiKey.
// Check the length with:
//
//	len(mockedapiKeyService.ValidateApiKeyCalls())
func (mock *apiKeyServiceMock) ValidateApiKeyCalls() []struct {
	Base64IdAndKeyCombination string
} {
	var calls []struct {
		Base64IdAndKeyCombination string
	}
	mock.lockValidateApiKey.RLock()
	calls = mock.calls.ValidateApiKey
	mock.lockValidateApiKey.RUnlock()
	return calls
}
