// This file is auto-generated by @hey-api/openapi-ts

export type PaginatedResponse = {
    links: {
        previous?: string;
        next?: string;
    };
    page_size: number;
    total_count: number;
    data: Array<unknown>;
};

export type FeatureOfInterest = {
    id: number;
    name: string;
    description: string;
    encoding_type?: string;
    feature?: {
        [key: string]: unknown;
    };
    properties?: {
        [key: string]: unknown;
    };
};

export type Sensor = {
    id: number;
    device_id: number;
    code: string;
    description: string;
    external_id: string;
    brand: string;
    archive_time?: number;
    properties: {
        [key: string]: unknown;
    };
    feature_of_interest?: FeatureOfInterest;
    created_at: string;
};

export type Device = {
    id: number;
    code: string;
    state: number;
    description: string;
    tenant_id: number;
    properties: {
        [key: string]: unknown;
    };
    altitude?: number;
    latitude?: number;
    longitude?: number;
    location_description?: string;
    sensors: Array<Sensor>;
    created_at: string;
};

export type ApiResponse = {
    message: string;
    data: {
        [key: string]: unknown;
    };
};

export type Measurement = {
    measurement_id: number;
    uplink_message_id: string;
    device_id: number;
    device_code: string;
    device_description?: string;
    device_latitude?: number;
    device_longitude?: number;
    device_altitude?: number;
    device_location_description?: string;
    device_properties?: {
        [key: string]: unknown;
    };
    device_state: number;
    sensor_id: number;
    sensor_code: string;
    sensor_description?: string;
    sensor_external_id: string;
    sensor_properties?: {
        [key: string]: unknown;
    };
    sensor_brand?: string;
    sensor_archive_time?: number;
    datastream_id: string;
    datastream_description?: string;
    datastream_observed_property: string;
    datastream_unit_of_measurement: string;
    measurement_timestamp: string;
    measurement_value: number;
    measurement_latitude?: number;
    measurement_longitude?: number;
    measurement_altitude?: number;
    measurement_properties?: {
        [key: string]: unknown;
    };
    measurement_expiration: string;
    feature_of_interest_id?: number;
    feature_of_interest_name?: string;
    feature_of_interest_description?: string;
    feature_of_interest_encoding_type?: string;
    feature_of_interest_feature?: {
        [key: string]: unknown;
    };
    feature_of_interest_properties?: {
        [key: string]: unknown;
    };
    created_at?: string;
};

export type Datastream = {
    id: string;
    description: string;
    sensor_id: number;
    observed_property: string;
    unit_of_measurement: string;
    created_at: string;
};

export type Pipeline = {
    id: string;
    description: string;
    steps: Array<string>;
    /**
     * either active or inactive
     */
    status: string;
    last_status_change: string;
    created_at?: string;
};

export type Trace = {
    id: string;
    pipeline_id: string;
    /**
     * id is 0 if not defined
     */
    device_id: number;
    start_time: string;
    workers: Array<string>;
    worker_times: Array<string>;
    error?: string;
    error_at?: string;
};

export type ApiError = {
    message?: string;
    code?: string;
    http_status?: number;
};

export type UserWorker = {
    id: string;
    name: string;
    description: string;
    state: 'enabled' | 'disabled';
    language: 'python';
    tenant_id?: number;
    revision: number;
    status: 'unknown' | 'ready' | 'error';
};

export type Tenant = {
    id: number;
    name: string;
    address: string;
    zip_code: string;
    city: string;
    chamber_of_commerce_id?: string;
    headquarter_id?: string;
};

export type ApiKey = {
    id: number;
    name: string;
    tenant_id: number;
    tenant_name: string;
    expiration_date?: string;
    created: string;
};

export type ListDevicesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Used to filter devices by its properties. This filters devices on whether their property contains the provided value. The value must be a JSON string and depending on your client should be URL Escaped
         */
        properties?: string;
        /**
         * Used to filter devices within a bounding box
         */
        north?: number;
        /**
         * Used to filter devices within a bounding box
         */
        west?: number;
        /**
         * Used to filter devices within a bounding box
         */
        east?: number;
        /**
         * Used to filter devices within a bounding box
         */
        south?: number;
        /**
         * Used to filter devices within a distance from a point
         */
        latitude?: number;
        /**
         * Used to filter devices within a distance from a point
         */
        longitude?: number;
        /**
         * Used to filter devices within a distance from a point.
         * The distance is given in meters.
         *
         */
        distance?: number;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
        /**
         * Filter by Device IDs
         *
         */
        id?: Array<number>;
        /**
         * Filter by device group
         *
         */
        sensor_group?: Array<number>;
    };
    url: '/devices';
};

export type ListDevicesErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListDevicesResponses = {
    /**
     * OK
     */
    200: PaginatedResponse & {
        data: Array<Device>;
    };
};

export type ListDevicesResponse = ListDevicesResponses[keyof ListDevicesResponses];

export type CreateDeviceData = {
    body?: {
        code: string;
        description?: string;
        latitude?: number;
        longitude?: number;
        location_description?: string;
        properties?: {
            [key: string]: unknown;
        };
    };
    path?: never;
    query?: never;
    url: '/devices';
};

export type CreateDeviceErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type CreateDeviceResponses = {
    /**
     * Created
     */
    201: {
        message: string;
        data: Device;
    };
};

export type CreateDeviceResponse = CreateDeviceResponses[keyof CreateDeviceResponses];

export type DeleteDeviceData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the device
         */
        id: number;
    };
    query?: never;
    url: '/devices/{id}';
};

export type DeleteDeviceErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type DeleteDeviceResponses = {
    /**
     * Device deleted successfully
     */
    200: {
        message: string;
    };
};

export type DeleteDeviceResponse = DeleteDeviceResponses[keyof DeleteDeviceResponses];

export type GetDeviceData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the device
         */
        id: number;
    };
    query?: never;
    url: '/devices/{id}';
};

export type GetDeviceErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetDeviceResponses = {
    /**
     * Fetched device
     */
    200: ApiResponse & {
        data: Device;
    };
};

export type GetDeviceResponse = GetDeviceResponses[keyof GetDeviceResponses];

export type UpdateDeviceData = {
    body?: {
        description?: string;
        latitude?: number;
        longitude?: number;
        location_description?: string;
        properties?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The numeric ID of the device
         */
        id: number;
    };
    query?: never;
    url: '/devices/{id}';
};

export type UpdateDeviceErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type UpdateDeviceResponses = {
    /**
     * Updated device properties
     */
    200: {
        message: string;
    };
};

export type UpdateDeviceResponse = UpdateDeviceResponses[keyof UpdateDeviceResponses];

export type ListDeviceSensorsData = {
    body?: never;
    path: {
        /**
         * The identifier of the device
         */
        device_id: number;
    };
    query?: {
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/devices/{device_id}/sensors';
};

export type ListDeviceSensorsErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type ListDeviceSensorsResponses = {
    /**
     * Listed device sensors
     */
    200: PaginatedResponse & {
        data: Array<Sensor>;
    };
};

export type ListDeviceSensorsResponse = ListDeviceSensorsResponses[keyof ListDeviceSensorsResponses];

export type CreateDeviceSensorData = {
    body?: {
        code: string;
        description?: string;
        external_id: string;
        brand?: string;
        properties?: {
            [key: string]: unknown;
        };
        feature_of_interest_id?: number;
        archive_time?: number;
    };
    path: {
        /**
         * The identifier of the device
         */
        device_id: number;
    };
    query?: never;
    url: '/devices/{device_id}/sensors';
};

export type CreateDeviceSensorErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type CreateDeviceSensorResponses = {
    /**
     * Created new sensor for device
     */
    201: {
        message: string;
    };
};

export type CreateDeviceSensorResponse = CreateDeviceSensorResponses[keyof CreateDeviceSensorResponses];

export type DeleteDeviceSensorData = {
    body?: never;
    path: {
        /**
         * The identifier of the device
         */
        device_id: number;
        /**
         * The code of the sensor
         */
        sensor_code: string;
    };
    query?: never;
    url: '/devices/{device_id}/sensors/{sensor_code}';
};

export type DeleteDeviceSensorErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type DeleteDeviceSensorResponses = {
    /**
     * Deleted sensor from device
     */
    200: {
        message: string;
    };
};

export type DeleteDeviceSensorResponse = DeleteDeviceSensorResponses[keyof DeleteDeviceSensorResponses];

export type GetSensorData = {
    body?: never;
    path: {
        /**
         * The identifier of the device
         */
        device_id: number;
        /**
         * The code of the sensor
         */
        sensor_code: string;
    };
    query?: never;
    url: '/devices/{device_id}/sensors/{sensor_code}';
};

export type GetSensorErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetSensorResponses = {
    /**
     * Fetched sensor
     */
    200: {
        message: string;
        data: Sensor;
    };
};

export type GetSensorResponse = GetSensorResponses[keyof GetSensorResponses];

export type UpdateSensorData = {
    body?: {
        description?: string;
        external_id?: string;
        brand?: string;
        properties?: {
            [key: string]: unknown;
        };
        /**
         * Set to 0 to unlink a Feature of Interest from a sensor
         */
        feature_of_interest_id?: number;
        archive_time?: number;
    };
    path: {
        /**
         * The identifier of the device
         */
        device_id: number;
        /**
         * The code of the sensor
         */
        sensor_code: string;
    };
    query?: never;
    url: '/devices/{device_id}/sensors/{sensor_code}';
};

export type UpdateSensorErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type UpdateSensorResponses = {
    /**
     * Updated sensor properties
     */
    200: {
        message: string;
    };
};

export type UpdateSensorResponse = UpdateSensorResponses[keyof UpdateSensorResponses];

export type ListSensorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/sensors';
};

export type ListSensorsErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListSensorsResponses = {
    /**
     * Fetched sensors
     */
    200: PaginatedResponse & {
        data: Array<Sensor>;
    };
};

export type ListSensorsResponse = ListSensorsResponses[keyof ListSensorsResponses];

export type ListFeaturesOfInterestData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/features-of-interest';
};

export type ListFeaturesOfInterestErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListFeaturesOfInterestResponses = {
    /**
     * OK
     */
    200: PaginatedResponse & {
        data: Array<FeatureOfInterest>;
    };
};

export type ListFeaturesOfInterestResponse = ListFeaturesOfInterestResponses[keyof ListFeaturesOfInterestResponses];

export type CreateFeatureOfInterestData = {
    body?: {
        name: string;
        description?: string;
        encoding_type?: string;
        feature?: {
            [key: string]: unknown;
        };
        properties?: {
            [key: string]: unknown;
        };
    };
    path?: never;
    query?: never;
    url: '/features-of-interest';
};

export type CreateFeatureOfInterestErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type CreateFeatureOfInterestResponses = {
    /**
     * Created
     */
    201: {
        message: string;
        data: FeatureOfInterest;
    };
};

export type CreateFeatureOfInterestResponse = CreateFeatureOfInterestResponses[keyof CreateFeatureOfInterestResponses];

export type DeleteFeatureOfInterestData = {
    body?: never;
    path: {
        /**
         * The ID of the Feature of Interest
         */
        id: number;
    };
    query?: never;
    url: '/features-of-interest/{id}';
};

export type DeleteFeatureOfInterestErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type DeleteFeatureOfInterestResponses = {
    /**
     * Deleted Feature of Interest
     */
    200: unknown;
};

export type GetFeatureOfInterestData = {
    body?: never;
    path: {
        /**
         * The ID of the Feature of Interest
         */
        id: number;
    };
    query?: never;
    url: '/features-of-interest/{id}';
};

export type GetFeatureOfInterestErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetFeatureOfInterestResponses = {
    /**
     * Fetched Feature of Interest
     */
    200: {
        message: string;
        data: FeatureOfInterest;
    };
};

export type GetFeatureOfInterestResponse = GetFeatureOfInterestResponses[keyof GetFeatureOfInterestResponses];

export type UpdateFeatureOfInterestData = {
    body?: {
        name?: string;
        description?: string;
        encoding_type?: string;
        feature?: {
            [key: string]: unknown;
        };
        properties?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The ID of the Feature of Interest
         */
        id: number;
    };
    query?: never;
    url: '/features-of-interest/{id}';
};

export type UpdateFeatureOfInterestErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type UpdateFeatureOfInterestResponses = {
    /**
     * Fetched Feature of Interest
     */
    200: {
        message: string;
        data: FeatureOfInterest;
    };
};

export type UpdateFeatureOfInterestResponse = UpdateFeatureOfInterestResponses[keyof UpdateFeatureOfInterestResponses];

export type QueryMeasurementsData = {
    body?: never;
    path?: never;
    query: {
        start: string;
        end: string;
        datastream?: string;
        observed_property?: string;
        feature_of_interest_id?: number;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/measurements';
};

export type QueryMeasurementsErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type QueryMeasurementsResponses = {
    /**
     * Fetched measurements
     */
    200: PaginatedResponse & {
        data: Array<Measurement>;
    };
};

export type QueryMeasurementsResponse = QueryMeasurementsResponses[keyof QueryMeasurementsResponses];

export type ListDatastreamsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * only return datastreams that are produced by the given sensor identifier
         */
        sensor?: Array<number>;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/datastreams';
};

export type ListDatastreamsErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListDatastreamsResponses = {
    /**
     * Fetched datastreams
     */
    200: PaginatedResponse & {
        data: Array<Datastream>;
    };
};

export type ListDatastreamsResponse = ListDatastreamsResponses[keyof ListDatastreamsResponses];

export type GetDatastreamData = {
    body?: never;
    path: {
        /**
         * The UUID of the datastream
         */
        id: string;
    };
    query?: never;
    url: '/datastreams/{id}';
};

export type GetDatastreamErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetDatastreamResponses = {
    /**
     * Fetched datastream
     */
    200: {
        message: string;
        data: {
            datastream: Datastream;
            device: Device;
            sensor: Sensor;
            latest_measurement_value?: number;
            latest_measurement_timestamp?: string;
        };
    };
};

export type GetDatastreamResponse = GetDatastreamResponses[keyof GetDatastreamResponses];

export type ListPipelinesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter on pipeline ID(s)
         */
        id?: Array<string>;
        /**
         * Only show inactive pipelines
         */
        inactive?: boolean;
        /**
         * Only show pipelines that include at least one of these steps
         */
        step?: Array<string>;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/pipelines';
};

export type ListPipelinesErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListPipelinesResponses = {
    /**
     * Fetched pipelines
     */
    200: PaginatedResponse & {
        data: Array<Pipeline>;
    };
};

export type ListPipelinesResponse = ListPipelinesResponses[keyof ListPipelinesResponses];

export type CreatePipelineData = {
    body?: {
        description?: string;
        steps?: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/pipelines';
};

export type CreatePipelineErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type CreatePipelineResponses = {
    /**
     * Created pipeline
     */
    200: {
        message: string;
        data: Pipeline;
    };
};

export type CreatePipelineResponse = CreatePipelineResponses[keyof CreatePipelineResponses];

export type DisablePipelineData = {
    body?: never;
    path: {
        /**
         * The UUID of the pipeline
         */
        id: string;
    };
    query?: never;
    url: '/pipelines/{id}';
};

export type DisablePipelineErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found or because the resource is disabled
     *
     */
    404: unknown;
    /**
     * The request failed because the request is invalid.
     *
     */
    405: unknown;
};

export type DisablePipelineResponses = {
    /**
     * pipeline disabled
     */
    200: {
        message: string;
    };
};

export type DisablePipelineResponse = DisablePipelineResponses[keyof DisablePipelineResponses];

export type GetPipelineData = {
    body?: never;
    path: {
        /**
         * The UUID of the pipeline
         */
        id: string;
    };
    query?: {
        /**
         * The status of the pipeline. Use `inactive` to view inactive pipelines instead of getting a 404 error
         *
         */
        status?: Array<string>;
    };
    url: '/pipelines/{id}';
};

export type GetPipelineErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found or because the resource is disabled
     *
     */
    404: unknown;
};

export type GetPipelineResponses = {
    /**
     * Fetched pipeline
     */
    200: {
        message: string;
        data: Pipeline;
    };
};

export type GetPipelineResponse = GetPipelineResponses[keyof GetPipelineResponses];

export type UpdatePipelineData = {
    body?: {
        description?: string;
        steps?: Array<string>;
        /**
         * Used to change a pipeline from inactive to active or vice-versa.
         * Moving from active to inactive can also be achieve by `DELETE`ing the pipeline resource.
         *
         */
        status?: string;
    };
    path: {
        /**
         * The UUID of the pipeline
         */
        id: string;
    };
    query?: never;
    url: '/pipelines/{id}';
};

export type UpdatePipelineErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found or because the resource is disabled
     *
     */
    404: unknown;
    /**
     * The request failed because the request is invalid.
     *
     */
    405: unknown;
};

export type UpdatePipelineResponses = {
    /**
     * Updated pipeline
     */
    200: {
        message: string;
        data: Pipeline;
    };
};

export type UpdatePipelineResponse = UpdatePipelineResponses[keyof UpdatePipelineResponses];

export type ProcessUplinkDataData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        /**
         * The UUID of the pipeline
         */
        pipeline_id: string;
    };
    query?: never;
    url: '/uplinks/{pipeline_id}';
};

export type ProcessUplinkDataErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found or is disabled.
     */
    404: unknown;
};

export type ProcessUplinkDataResponses = {
    /**
     * Accepted uplink
     */
    201: unknown;
};

export type ListTracesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
        pipeline?: Array<string>;
        device_id?: number;
    };
    url: '/traces';
};

export type ListTracesErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListTracesError = ListTracesErrors[keyof ListTracesErrors];

export type ListTracesResponses = {
    /**
     * Fetched traces
     */
    200: PaginatedResponse & {
        data?: Array<Trace>;
    };
};

export type ListTracesResponse = ListTracesResponses[keyof ListTracesResponses];

export type ListWorkersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
        /**
         * Filter by Pipeline IDs
         *
         */
        id?: Array<string>;
    };
    url: '/workers';
};

export type ListWorkersErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListWorkersError = ListWorkersErrors[keyof ListWorkersErrors];

export type ListWorkersResponses = {
    /**
     * Fetched workers
     */
    200: PaginatedResponse & {
        data?: Array<UserWorker>;
    };
};

export type ListWorkersResponse = ListWorkersResponses[keyof ListWorkersResponses];

export type CreateWorkerData = {
    body?: {
        name: string;
        description?: string;
        /**
         * base64 encoded user code
         */
        user_code: string;
        state?: 'enabled' | 'disabled';
    };
    path?: never;
    query?: never;
    url: '/workers';
};

export type CreateWorkerResponses = {
    /**
     * Created worker
     */
    201: {
        message?: string;
        data?: UserWorker;
    };
};

export type CreateWorkerResponse = CreateWorkerResponses[keyof CreateWorkerResponses];

export type GetWorkerData = {
    body?: never;
    path: {
        /**
         * The UUID of the worker
         */
        id: string;
    };
    query?: never;
    url: '/workers/{id}';
};

export type GetWorkerErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetWorkerResponses = {
    /**
     * Fetched worker
     */
    200: {
        message?: string;
        data?: UserWorker;
    };
};

export type GetWorkerResponse = GetWorkerResponses[keyof GetWorkerResponses];

export type UpdateWorkerData = {
    body?: {
        name?: string;
        description?: string;
        state?: 'enabled' | 'disabled';
        /**
         * base64 encoded user code
         */
        user_code?: string;
    };
    path: {
        /**
         * The UUID of the worker
         */
        id: string;
    };
    query?: never;
    url: '/workers/{id}';
};

export type UpdateWorkerErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type UpdateWorkerResponses = {
    /**
     * Updated worker properties
     */
    200: {
        message?: string;
    };
};

export type UpdateWorkerResponse = UpdateWorkerResponses[keyof UpdateWorkerResponses];

export type GetWorkerUserCodeData = {
    body?: never;
    path: {
        /**
         * The UUID of the worker
         */
        id: string;
    };
    query?: never;
    url: '/workers/{id}/usercode';
};

export type GetWorkerUserCodeErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type GetWorkerUserCodeResponses = {
    /**
     * Fetched worker user code
     */
    200: {
        message?: string;
        /**
         * The usercode base64 encoded
         */
        data?: string;
    };
};

export type GetWorkerUserCodeResponse = GetWorkerUserCodeResponses[keyof GetWorkerUserCodeResponses];

export type ListTenantsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter on specific name of a tenant
         */
        name?: number;
        /**
         * Filter on specific state of a tenant
         */
        state?: number;
        /**
         * Only show tenants that this user is a member of
         */
        is_member?: boolean;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/tenants';
};

export type ListTenantsErrors = {
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
};

export type ListTenantsResponses = {
    /**
     * Fetched Tenants
     */
    200: PaginatedResponse & {
        data?: Array<Tenant>;
    };
};

export type ListTenantsResponse = ListTenantsResponses[keyof ListTenantsResponses];

export type AddTenantMemberData = {
    body?: {
        user_id: string;
        permissions: Array<string>;
    };
    path: {
        /**
         * The identifier of the tenant
         */
        tenant_id: number;
    };
    query?: never;
    url: '/tenants/{tenant_id}/members';
};

export type AddTenantMemberErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because the requested resource could not be found
     */
    404: unknown;
};

export type AddTenantMemberError = AddTenantMemberErrors[keyof AddTenantMemberErrors];

export type AddTenantMemberResponses = {
    /**
     * User added to Tenant
     */
    201: {
        message?: string;
    };
};

export type AddTenantMemberResponse = AddTenantMemberResponses[keyof AddTenantMemberResponses];

export type RemoveTenantMemberData = {
    body?: never;
    path: {
        /**
         * The identifier of the tenant
         */
        tenant_id: number;
        /**
         * The identifier of the user
         */
        user_id: string;
    };
    query?: never;
    url: '/tenants/{tenant_id}/members/{user_id}';
};

export type RemoveTenantMemberErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type RemoveTenantMemberError = RemoveTenantMemberErrors[keyof RemoveTenantMemberErrors];

export type RemoveTenantMemberResponses = {
    200: {
        message?: string;
    };
};

export type RemoveTenantMemberResponse = RemoveTenantMemberResponses[keyof RemoveTenantMemberResponses];

export type UpdateTenantMemberData = {
    body?: {
        permissions: Array<string>;
    };
    path: {
        /**
         * The identifier of the tenant
         */
        tenant_id: number;
        /**
         * The identifier of the user
         */
        user_id: string;
    };
    query?: never;
    url: '/tenants/{tenant_id}/members/{user_id}';
};

export type UpdateTenantMemberErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type UpdateTenantMemberError = UpdateTenantMemberErrors[keyof UpdateTenantMemberErrors];

export type UpdateTenantMemberResponses = {
    200: {
        message?: string;
    };
};

export type UpdateTenantMemberResponse = UpdateTenantMemberResponses[keyof UpdateTenantMemberResponses];

export type ListApiKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The id of the tenant from which to retrieve API keys
         */
        tenant_id?: number;
        /**
         * The cursor for the current page
         */
        cursor?: string;
        /**
         * The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place.
         *
         */
        limit?: number;
    };
    url: '/api-keys';
};

export type ListApiKeysErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type ListApiKeysError = ListApiKeysErrors[keyof ListApiKeysErrors];

export type ListApiKeysResponses = {
    /**
     * Fetched API keys
     */
    200: PaginatedResponse & {
        data?: Array<ApiKey>;
    };
};

export type ListApiKeysResponse = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
    body?: {
        name: string;
        tenant_id: number;
        permissions?: Array<string>;
        expiration_date?: string;
    };
    path?: never;
    query?: never;
    url: '/api-keys';
};

export type CreateApiKeyErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type CreateApiKeyError = CreateApiKeyErrors[keyof CreateApiKeyErrors];

export type CreateApiKeyResponses = {
    /**
     * Created API key
     */
    201: {
        api_key: string;
    };
};

export type CreateApiKeyResponse = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type RevokeApiKeyData = {
    body?: never;
    path: {
        /**
         * The identifier of the API key
         */
        api_key_id: number;
    };
    query?: never;
    url: '/api-keys/{api_key_id}';
};

export type RevokeApiKeyErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type RevokeApiKeyError = RevokeApiKeyErrors[keyof RevokeApiKeyErrors];

export type RevokeApiKeyResponses = {
    /**
     * The request failed because of an unexpected server error
     */
    200: {
        message?: string;
    };
};

export type RevokeApiKeyResponse = RevokeApiKeyResponses[keyof RevokeApiKeyResponses];

export type GetApiKeyData = {
    body?: never;
    path: {
        /**
         * The identifier of the API key
         */
        api_key_id: number;
    };
    query?: never;
    url: '/api-keys/{api_key_id}';
};

export type GetApiKeyErrors = {
    /**
     * The request failed because of a malformed or invalid request
     */
    400: ApiError;
    /**
     * The request failed because the provided credentials are invalid or missing
     */
    401: unknown;
    /**
     * The request failed because the provided credentials do not have the required permissions to perform this action
     */
    403: unknown;
    /**
     * The request failed because of an unexpected server error
     */
    500: ApiError;
};

export type GetApiKeyError = GetApiKeyErrors[keyof GetApiKeyErrors];

export type GetApiKeyResponses = {
    /**
     * Fetched API key
     */
    200: ApiKey;
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type ClientOptions = {
    baseUrl: 'https://sensorbucket.nl/api' | 'http://localhost:3000/api' | (string & {});
};