// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"sensorbucket.nl/sensorbucket/services/measurements/service"
	"sync"
)

// Ensure, that StoreMock does implement service.Store.
// If this is not the case, regenerate this file with moq.
var _ service.Store = &StoreMock{}

// StoreMock is a mock implementation of service.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked service.Store
//		mockedStore := &StoreMock{
//			InsertFunc: func(measurement service.Measurement) error {
//				panic("mock out the Insert method")
//			},
//			QueryFunc: func(query service.Query, pagination service.Pagination) ([]service.Measurement, *service.Pagination, error) {
//				panic("mock out the Query method")
//			},
//		}
//
//		// use mockedStore in code that requires service.Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(measurement service.Measurement) error

	// QueryFunc mocks the Query method.
	QueryFunc func(query service.Query, pagination service.Pagination) ([]service.Measurement, *service.Pagination, error)

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Measurement is the measurement argument value.
			Measurement service.Measurement
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Query is the query argument value.
			Query service.Query
			// Pagination is the pagination argument value.
			Pagination service.Pagination
		}
	}
	lockInsert sync.RWMutex
	lockQuery  sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *StoreMock) Insert(measurement service.Measurement) error {
	if mock.InsertFunc == nil {
		panic("StoreMock.InsertFunc: method is nil but Store.Insert was just called")
	}
	callInfo := struct {
		Measurement service.Measurement
	}{
		Measurement: measurement,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(measurement)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedStore.InsertCalls())
func (mock *StoreMock) InsertCalls() []struct {
	Measurement service.Measurement
} {
	var calls []struct {
		Measurement service.Measurement
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *StoreMock) Query(query service.Query, pagination service.Pagination) ([]service.Measurement, *service.Pagination, error) {
	if mock.QueryFunc == nil {
		panic("StoreMock.QueryFunc: method is nil but Store.Query was just called")
	}
	callInfo := struct {
		Query      service.Query
		Pagination service.Pagination
	}{
		Query:      query,
		Pagination: pagination,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(query, pagination)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedStore.QueryCalls())
func (mock *StoreMock) QueryCalls() []struct {
	Query      service.Query
	Pagination service.Pagination
} {
	var calls []struct {
		Query      service.Query
		Pagination service.Pagination
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}
