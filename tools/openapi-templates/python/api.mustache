# coding: utf-8

{{>partial_header}}
import warnings
import urllib
from datetime import (
    datetime,
    date,
    timedelta,
)
import time
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Generator, Dict, List, Optional, Tuple, Union 
from typing_extensions import Annotated

{{#imports}}
{{import}}
{{/imports}}

from {{packageName}}.api_client import ApiClient, RequestSerialized
from {{packageName}}.api_response import ApiResponse
from {{packageName}}.rest import RESTResponseType


{{#operations}}
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client
{{#operation}}


    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}{{>partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
{{>partial_api}}
        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        {{#asyncio}}await {{/asyncio}}response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

{{#vendorExtensions.x-is-paginated}}
    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}_gen{{>partial_api_args}} -> Generator[{{{returnType}}}, None, None]{{^returnType}}None{{/returnType}}:
        result = self.{{operationId}}({{#allParams}}{{paramName}}={{paramName}},{{/allParams}})
        yield result
        while result.links.next != "":
            cursor = urllib.parse.parse_qs(urllib.parse.urlparse(result.links.next).query)['cursor'][0]
            result = self.{{operationId}}({{#allParams}}{{paramName}}={{paramName}},{{/allParams}})
            yield result
{{/vendorExtensions.x-is-paginated}}

    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}_with_http_info{{>partial_api_args}} -> ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]:
{{>partial_api}}
        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        {{#asyncio}}await {{/asyncio}}response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    {{#asyncio}}async {{/asyncio}}def {{operationId}}_without_preload_content{{>partial_api_args}} -> RESTResponseType:
{{>partial_api}}
        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _{{operationId}}_serialize(
        self,
        {{#allParams}}
        {{paramName}},
        {{/allParams}}
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        {{#servers.0}}
        _hosts = [{{#servers}}
            '{{{url}}}'{{^-last}},{{/-last}}{{/servers}}
        ]
        _host = _hosts[_host_index]
        {{/servers.0}}
        {{^servers.0}}
        _host = None
        {{/servers.0}}

        _collection_formats: Dict[str, str] = {
            {{#allParams}}
            {{#isArray}}
            '{{baseName}}': '{{collectionFormat}}',
            {{/isArray}}
            {{/allParams}}
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
{{#pathParams}}
        if {{paramName}} is not None:
            _path_params['{{baseName}}'] = {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}
{{/pathParams}}
        # process the query parameters
{{#queryParams}}
        if {{paramName}} is not None:
            {{#isDateTime}}
            if isinstance({{paramName}}, datetime):
                formatted_datetime = rfc3339format({{paramName}})
                _query_params.append(
                    (
                        '{{baseName}}',
                        formatted_datetime
                    )
                )
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDateTime}}
            {{#isDate}}
            if isinstance({{paramName}}, date):
                _query_params.append(
                    (
                        '{{baseName}}',
                        {{paramName}}.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('{{baseName}}', {{paramName}}))
            {{/isDate}}
            {{^isDateTime}}{{^isDate}}
            _query_params.append(('{{baseName}}', {{paramName}}{{#isEnumRef}}.value{{/isEnumRef}}))
            {{/isDate}}{{/isDateTime}}
{{/queryParams}}
        # process the header parameters
{{#headerParams}}
        if {{paramName}} is not None:
            _header_params['{{baseName}}'] = {{paramName}}
{{/headerParams}}
        # process the form parameters
{{#formParams}}
        if {{paramName}} is not None:
            {{#isFile}}
            _files['{{{baseName}}}'] = {{paramName}}
            {{/isFile}}
            {{^isFile}}
            _form_params.append(('{{{baseName}}}', {{paramName}}))
            {{/isFile}}
{{/formParams}}
        # process the body parameter
{{#bodyParam}}
        if {{paramName}} is not None:
            {{#isBinary}}
            # convert to byte array if the input is a file name (str)
            if isinstance({{paramName}}, str):
                with open({{paramName}}, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = {{paramName}}
            {{/isBinary}}
            {{^isBinary}}
            _body_params = {{paramName}}
            {{/isBinary}}
{{/bodyParam}}

        {{#constantParams}}
        {{#isQueryParam}}
        # Set client side default value of Query Param "{{baseName}}".
        _query_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
        {{/isQueryParam}}
        {{#isHeaderParam}}
        # Set client side default value of Header Param "{{baseName}}".
        _header_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
        {{/isHeaderParam}}
        {{/constantParams}}

        {{#hasProduces}}
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}
                '{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}
            ]
        )
        {{/hasProduces}}

        {{#hasConsumes}}
        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [{{#consumes}}
                        '{{{mediaType}}}'{{^-last}}, {{/-last}}{{/consumes}}
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type
        {{/hasConsumes}}

        # authentication setting
        _auth_settings: List[str] = [{{#authMethods}}
            '{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}
        ]

        return self.api_client.param_serialize(
            method='{{httpMethod}}',
            resource_path='{{{path}}}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


{{/operation}}
{{/operations}}



def _timezone(utc_offset):
    '''
    Return a string representing the timezone offset.

    >>> _timezone(0)
    '+00:00'
    >>> _timezone(3600)
    '+01:00'
    >>> _timezone(-28800)
    '-08:00'
    >>> _timezone(-8 * 60 * 60)
    '-08:00'
    >>> _timezone(-30 * 60)
    '-00:30'
    '''
    # Python's division uses floor(), not round() like in other languages:
    #   -1 / 2 == -1 and not -1 / 2 == 0
    # That's why we use abs(utc_offset).
    hours = abs(utc_offset) // 3600
    minutes = abs(utc_offset) % 3600 // 60
    sign = (utc_offset < 0 and '-') or '+'
    return '%c%02d:%02d' % (sign, hours, minutes)

def _timedelta_to_seconds(td):
    '''
    >>> _timedelta_to_seconds(timedelta(hours=3))
    10800
    >>> _timedelta_to_seconds(timedelta(hours=3, minutes=15))
    11700
    >>> _timedelta_to_seconds(timedelta(hours=-8))
    -28800
    '''
    return int((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6)

def _utc_offset(timestamp, use_system_timezone):
    '''
    Return the UTC offset of `timestamp`. If `timestamp` does not have any `tzinfo`, use
    the timezone informations stored locally on the system.

    >>> if time.localtime().tm_isdst:
    ...     system_timezone = -time.altzone
    ... else:
    ...     system_timezone = -time.timezone
    >>> _utc_offset(datetime.now(), True) == system_timezone
    True
    >>> _utc_offset(datetime.now(), False)
    0
    '''
    if (isinstance(timestamp, datetime) and
            timestamp.tzinfo is not None):
        return _timedelta_to_seconds(timestamp.utcoffset())
    elif use_system_timezone:
        if timestamp.year < 1970:
            # We use 1972 because 1970 doesn't have a leap day (feb 29)
            t = time.mktime(timestamp.replace(year=1972).timetuple())
        else:
            t = time.mktime(timestamp.timetuple())
        if time.localtime(t).tm_isdst: # pragma: no cover
            return -time.altzone
        else:
            return -time.timezone
    else:
        return 0

def _string(d, timezone):
    return ('%04d-%02d-%02dT%02d:%02d:%02d%s' %
            (d.year, d.month, d.day, d.hour, d.minute, d.second, timezone))

def _string_milliseconds(d, timezone):
    return ('%04d-%02d-%02dT%02d:%02d:%02d.%03d%s' %
            (d.year, d.month, d.day, d.hour, d.minute, d.second, d.microsecond / 1000, timezone))

def _string_microseconds(d, timezone):
    return ('%04d-%02d-%02dT%02d:%02d:%02d.%06d%s' %
            (d.year, d.month, d.day, d.hour, d.minute, d.second, d.microsecond, timezone))

def _format(timestamp, string_format, utc, use_system_timezone):
    # Try to convert timestamp to datetime
    try:
        if use_system_timezone:
            timestamp = datetime.fromtimestamp(timestamp)
        else:
            timestamp = datetime.utcfromtimestamp(timestamp)
    except TypeError:
        pass

    if not isinstance(timestamp, date):
        raise TypeError('Expected timestamp or date object. Got %r.' %
                        type(timestamp))

    if not isinstance(timestamp, datetime):
        timestamp = datetime(*timestamp.timetuple()[:3])
    utc_offset = _utc_offset(timestamp, use_system_timezone)
    if utc:
        # local time -> utc
        return string_format(timestamp - timedelta(seconds=utc_offset), 'Z')
    else:
        return string_format(timestamp , _timezone(utc_offset))

def rfc3339format(timestamp, utc=False, use_system_timezone=True):
    '''
    Return a string formatted according to the :RFC:`3339`. If called with
    `utc=True`, it normalizes `timestamp` to the UTC date. If `timestamp` does
    not have any timezone information, uses the local timezone::

        >>> d = datetime(2008, 4, 2, 20)
        >>> rfc3339(d, utc=True, use_system_timezone=False)
        '2008-04-02T20:00:00Z'
        >>> rfc3339(d) # doctest: +ELLIPSIS
        '2008-04-02T20:00:00...'

    If called with `use_system_timezone=False` don't use the local timezone if
    `timestamp` does not have timezone informations and consider the offset to UTC
    to be zero::

        >>> rfc3339(d, use_system_timezone=False)
        '2008-04-02T20:00:00+00:00'

    `timestamp` must be a `datetime`, `date` or a timestamp as
    returned by `time.time()`::

        >>> rfc3339(0, utc=True, use_system_timezone=False)
        '1970-01-01T00:00:00Z'
        >>> rfc3339(date(2008, 9, 6), utc=True,
        ...         use_system_timezone=False)
        '2008-09-06T00:00:00Z'
        >>> rfc3339(date(2008, 9, 6),
        ...         use_system_timezone=False)
        '2008-09-06T00:00:00+00:00'
        >>> rfc3339('foo bar') # doctest: +ELLIPSIS
        Traceback (most recent call last):
        ...
        TypeError: Expected timestamp or date object. Got <... 'str'>.

    For dates before January 1st 1970, the timezones will be the ones used in
    1970. It might not be accurate, but on most sytem there is no timezone
    information before 1970.
    '''
    return _format(timestamp, _string, utc, use_system_timezone)
