# Build stage
FROM --platform=$BUILDPLATFORM golang:alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy the source code
COPY . .

# Build the application
ARG APPNAME TARGETOS TARGETARCH GITVERSION
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    GITVERSION=${GITVERSION} GOVERSION=$(go version) BUILDDATE=$(date -Is) \
    go build \
    -ldflags="-w -s -extldflags \"-static\" \
    -X 'sensorbucket.nl/sensorbucket/internal/buildinfo.GitVersion=${GITVERSION}' \
    -X 'sensorbucket.nl/sensorbucket/internal/buildinfo.BuildTime=$(date -Is)' \
    -X 'sensorbucket.nl/sensorbucket/internal/buildinfo.Architecture=${TARGETARCH}' \
    -X 'sensorbucket.nl/sensorbucket/internal/buildinfo.GoVersion=$(go version)'" \
    -tags timetzdata \
    -o /${APPNAME} \
    services/${APPNAME}/main.go

# Final stage
FROM scratch AS production

WORKDIR /

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
# Copy the binary from the builder stage
ARG APPNAME
COPY --from=builder /${APPNAME} /app
# Set timezone environment variable
ENV TZ=Etc/UTC

# Run the binary
ENTRYPOINT ["/app"]
