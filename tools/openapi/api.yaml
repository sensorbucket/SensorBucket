openapi: 3.0.0
info:
  title: Sensorbucket API
  version: '1.1-rc1'
  license:
    name: EUPLv1.2
    url: 'https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt'
  description: |
    SensorBucket processes data from different sources and devices into a single standardized format. 
    An applications connected to SensorBucket, can use all devices SensorBucket supports.

    Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker
    that receives data from an AMQP source, process said data and output in the expected worker output format.

    Find out more at: https://developer.sensorbucket.nl/

    Developed and designed by Provincie Zeeland and Pollex'
  contact:
    name: Tim van Osch
    email: info@pollex.nl
    url: 'https://sensorbucket.nl'
servers:
  - description: Production
    url: 'https://sensorbucket.nl/api'
paths: 
  /devices:
    $ref: 'path-devices.yaml'
  /devices/{id}:
    $ref: 'path-devices-by-id.yaml'
  /devices/{device_id}/sensors:
    $ref: 'path-devices-by-sensors.yaml'
  /device/{device_id}/sensors/{sensor_code}:
    $ref: 'path-devices-by-sensors-id.yaml'
  /sensors:
    $ref: 'path-sensors.yaml'
  /sensor-groups:
    $ref: 'path-sensorgroups.yaml'
  /sensor-groups/{id}:
    $ref: 'path-sensorgroups-by-id.yaml'
  /sensor-groups/{id}/sensors:
    $ref: 'path-sensorgroups-by-sensors.yaml'
  /sensor-groups/{id}/sensors/{sensor_id}:
    $ref: 'path-sensorgroups-by-sensors-id.yaml'
  /measurements:
    $ref: 'path-measurements.yaml'
  /datastreams:
    $ref: 'path-datastreams.yaml'
  /datastreams/{id}:
    $ref: 'path-datastreams-by-id.yaml'
  /pipelines:
    $ref: 'path-pipelines.yaml'
  /pipelines/{id}:
    $ref: 'path-pipelines-by-id.yaml'
  /uplinks/{pipeline_id}:
    $ref: 'path-uplinks-by-pipeline.yaml'
  /tracing:
    $ref: 'path-tracing.yaml'
  /ingresses:
    $ref: 'path-ingresses.yaml'
  /workers:
    $ref: 'path-workers.yaml'
  /workers/{id}:
    $ref: 'path-workers-by-id.yaml'
  /workers/{id}/usercode:
    $ref: 'path-workers-usercode.yaml'
  /tenants:
    $ref: 'path-tenants.yaml'
  /tenants/{tenant_id}/members:
    $ref: 'path-tenants-members.yaml'
  /tenants/{tenant_id}/members/{user_id}:
    $ref: 'path-tenants-members-by-user.yaml'
  /api-keys:
    $ref: 'path-api-keys.yaml'
  /api-keys/{api_key_id}:
    $ref: 'path-api-keys-by-id.yaml'
components:
  securitySchemes:
    CookieSession:
      description: |
        When a user is logged in a session cookie will be set which authenticates the user.
      type: apiKey
      in: cookie
      name: SID
    APIKey:
      description: |
        An API Key given through the Authorization header will authenticate an organisation
      type: http
      scheme: Bearer
    # The type and scheme of Noop are irrelevant, this scheme is only used for 
    # Oathkeeper auth handler
    Noop:
      type: http
      scheme: Bearer
x-oathkeeper-mutators:
  - Hydrate
  - IDToken
security:
  - CookieSession: []
  - APIKey: []
  - Noop: []
tags:
  - name: Devices
  - name: Pipelines
  - name: Measurements
  - name: Uplink
  - name: Tracing
  - name: Tenants
  - name: Workers
  - name: APIKeys
