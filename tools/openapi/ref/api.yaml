openapi: 3.0.0
info:
  title: Sensorbucket API
  version: '1.0'
  license:
    name: EUPLv2
  description: ''
  contact:
    name: Provincie Zeeland
    url: 'https://zeeland.nl'
servers:
  - description: Local
    url: 'http://localhost:3000/api'
paths: 
  /sensortypes:
    get:
      operationId: ListSensorTypes
      summary: List available sensor types
      tags: ["Devices"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: listed sensor types
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/sensortype'
  /sensorgoals:
    get:
      operationId: ListSensorGoals
      summary: List available sensor goals
      tags: ["Devices"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: listed sensor goals
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/sensorgoal'
  /devices:
    get:
      operationId: ListDevices
      summary: Fetch list of devices
      description: |
        Fetch a list of devices.
        Location based filtering is either by bounding box or within radius from a position. 

        To filter on bounding box, supply the north,east,south,west coordinates of the bounding box as query parameters. To filter by radius supply the longitude,latitude and distance query parameters. If both are supplied the bounding box query is discarded. 
      tags: ["Devices"]
      parameters:
        - in: query
          name: configuration
          schema:
            type: object
        - in: query
          name: north
          schema:
            type: number
        - in: query
          name: west
          schema:
            type: number
        - in: query
          name: east
          schema:
            type: number
        - in: query
          name: south
          schema:
            type: number
        - in: query
          name: latitude
          schema:
            type: number
        - in: query
          name: longitude
          schema:
            type: number
        - in: query
          name: distance
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: listed devices
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/deviceDTO'
    post:
      operationId: CreateDevice
      summary: Create a new device
      tags: ["Devices"]
      requestBody: 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/createDeviceDTO'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: created device
                  data:
                    $ref: '#/components/schemas/deviceDTO'
  /devices/{id}:
    get:
      operationId: GetDevice
      summary: Get a device
      tags: ["Devices"]
      parameters: 
        - name: id
          description: The numeric ID of the device
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: Fetched device
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched device
                  data:
                    $ref: '#/components/schemas/deviceDTO'
        404:
          description: Device not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device not found
    patch:
      operationId: UpdateDevice
      summary: Update device properties
      tags: ["Devices"]
      parameters: 
        - name: id
          description: The numeric ID of the device
          in: path
          required: true
          schema:
            type: number
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateDeviceDTO'
      responses:
        200:
          description: Updated device properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated device properties
        404:
          description: Device not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device not found

  /devices/{device_id}/sensors:
    get:
      operationId: ListDeviceSensors
      summary: List sensors on a device
      tags: ["Devices"]
      parameters: 
        - name: device_id
          description: The numeric ID of the device
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: Listed device sensors
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Listed device sensors
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/sensorDTO'
        404:
          description: Device not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device not found
    post:
      operationId: CreateDeviceSensor
      summary: Create new sensor for device
      tags: ["Devices"]
      parameters: 
        - name: device_id
          description: The numeric ID of the device
          in: path
          required: true
          schema:
            type: number
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSensorDTO'
      responses:
        201:
          description: Created new sensor for device
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created new sensor for device
        404:
          description: Device not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device not found
  /device/{device_id}/sensors/{sensor_code}:
    delete:
      operationId: DeleteDeviceSensor
      summary: Delete a sensor from a device
      tags: ["Devices"]
      parameters: 
        - name: device_id
          description: The numeric ID of the device
          in: path
          required: true
          schema:
            type: number
        - name: sensor_code
          description: The code of the sensor
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted sensor from device
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deleted sensor from device
        404:
          description: Device or sensor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device not found

  /measurements:
    get:
      operationId: QueryMeasurements
      summary: query measurements
      tags: ["Measurements"]
      parameters:
        - in: query
          name: start
          required: true
          schema:
            type: string
            format: iso8601
            example: "2022-01-01T00:00:00Z"
        - in: query
          name: end
          required: true
          schema:
            type: string
            format: iso8601
            example: "2022-12-31T23:59:59Z"
        - in: query
          name: cursor
          required: false
          schema:
            type: string
        - in: query
          name: limit
          required: false
          schema:
            type: number
        - in: query
          name: device_id
          required: false
          schema:
            type: string
        - in: query
          name: measurement_type
          required: false
          schema:
            type: string
        - in: query
          name: sensor_code
          required: false
          schema:
            type: string
      responses:
        200:
          description: Fetched measurements
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched measurements
                  next:
                    type: string
                    example: "https://sensorbucket.nl/api/v1/measurements/?cursor=eyJMaW1pdCI6NSwiU2tpcCI6MywiVGltZXN0YW1wIjoiMjAyMi0xMS0zMFQyMzo1OTo0NFoifQ%3D%3D&end=2022-12-01T00%3A00%3A00Z&limit=5&start=2022-01-01T00%3A00%3A00Z"
                  count:
                    type: number
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/measurementDTO"

  /pipelines:
    get:
      operationId: ListPipelines
      summary: List existing pipelines
      tags: ["Pipelines"]
      parameters:
        - name: inactive
          description: Only show inactive pipelines
          in: query
          required: false
          schema:
              type: boolean
        - name: step
          description: Only show pipelines that include at least one of these steps
          in: query
          required: false
          schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: Fetched pipelines
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched pipelines
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/pipelineDTO'
    post:
      operationId: CreatePipeline
      summary: Create a new pipeline
      tags: ["Pipelines"]
      requestBody: 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/createPipelineDTO'
      responses:
        200:
          description: Created pipeline
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created pipeline
                  data:
                    $ref: '#/components/schemas/pipelineDTO'

  /pipelines/{id}:
    get:
      operationId: GetPipeline
      summary: Fetch pipeline by ID
      tags: ["Pipelines"]
      parameters:
        - name: id
          description: The UUID of the pipeline
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Fetched pipeline
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched pipeline
                  data:
                    $ref: '#/components/schemas/pipelineDTO'
        404:
          description: Pipeline not found or disabled
    patch:
      operationId: UpdatePipeline
      summary: Update a pipeline
      tags: ["Pipelines"]
      parameters:
        - name: id
          description: The UUID of the pipeline
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody: 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/updatePipelineDTO'
      responses:
        200:
          description: Updated pipeline
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Updated pipeline
                  data:
                    $ref: '#/components/schemas/pipelineDTO'
        404:
          description: Pipeline not found or disabled
    delete:
      operationId: DisablePipeline
      summary: Disable a pipeline
      tags: ['Pipelines']
      parameters:
        - name: id
          description: The UUID of the pipeline
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: pipeline disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Disabled pipeline
        404:
          description: Pipeline not found or disabled

  /uplinks/{pipeline_id}:
    post:
      tags: ['Uplink']
      operationId: pushUplink
      summary: Push an uplink message to the HTTP Importer
      parameters:
        - name: pipeline_id
          description: The UUID of the pipeline
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Accepted uplink
        404:
          description: Pipeline not found or disabled

components:
  schemas:
    sensortype:
      type: object
    sensorgoal:
      type: object
    createDeviceDTO:
      type: object
      properties:
        code:
          type: string
          example: mfm1000
        description:
          type: string
          example: Grasfield pipe 24
        organisation:
          type: string
          example: provincie_zeeland
        latitude:
          type: number
          example: 1.2345
        longitude:
          type: number
          example: 1.2345
        location_description:
          type: string
          example: "Description of location"
        configuration:
          type: object
          example:
            eui: "060708090A0B0C0D"
    updateDeviceDTO:
        type: object
        properties:
          description:
            type: number
            example: 1
          latitude:
            type: number
            example: 1.2345
          longitude:
            type: number
            example: 1.2345
          location_description:
            type: string
            example: "Description of location"
          configuration:
            type: object
            example:
              eui: "060708090A0B0C0D"
    deviceDTO:
      type: object
      properties:
        id:
          type: number
          example: 1
        code:
          type: string
          example: mfm1000
        description:
          type: string
          example: Grasfield pipe 24
        organisation:
          type: string
          example: provincie_zeeland
        configuration:
          type: object
          example:
            eui: "060708090A0B0C0D"
        latitude:
          type: number
          example: 1.2345
        longitude:
          type: number
          example: 1.2345
        location_description:
          type: string
          example: "Description of location"
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/sensorDTO'
    createSensorDTO:
      type: object
      properties:
        code:
          type: string
          example: S123
        description:
          type: string
          example: Pressure sensor at 5 meters depth
        external_id:
          type: string
          example: "5"
        brand:
          type: string
          example: "sensor brand ABC"
        configuration:
          type: object
        archive_time:
          type: number
          example: 7
        goal_id:
          type: number
          example: 1
          description: The id of the goal on which this sensor is observing (such as waterlevel, air)
        type_id:
          type: number
          example: 1
          description: The id of the type of sensor (such as ultrasonic, pressure)
    sensorDTO:
      type: object
      properties:
        id:
          type: number
          example: 1
        code:
          type: string
          example: S123
        description:
          type: string
          example: Pressure sensor at 5 meters depth
        external_id:
          type: string
          example: "5"
        measurement_type:
          type: string
          example: pressure
    measurementDTO:
      type: object
      properties:
        uplink_message_id:
          type: string
          example: ca29e28e-eeb6-4662-922c-6cf6a36ccb6e
        timestamp:
          type: number
          example: 
        device_id:
          type: number
          example: 5
        device_code:
          type: string
          example: mfm1000
        device_description:
          type: string
          example: Grasfield pipe 24
        device_configuration:
          type: object
          example:
            eui: "060708090A0B0C0D"
        latitude:
          type: number
          example: 50.123456
        longitude:
          type: number
          example: 3.12345
        location_name:
          type: string
          example: Bridgeton Waters
        location_latitude:
          type: number
          example: 50.12345678
        location_longitude:
          type: number
          example: 3.12345678
        measurement_type:
          type: string
          example: pressure
        measurement_type_unit:
          type: string
          example: hPa
        sensor_code:
          type: string
          example: S123
        sensor_description:
          type: string
          example: Pressure sensor at 5 meters depth
        sensor_external_id:
          type: string
          example: "5"
        sensor_configuration:
          type: object
          example: {}
        value:
          type: number
          example: 3.44
    pipelineDTO:
      type: object
      properties:
        id:
          type: string
          example: 9d4a0944-c11d-42ef-880f-a97c9619c5c0
        description:
          type: string
          example: Pipeline for Multiflexmeter Groundwater devices
        steps:
          type: array
          items:
            type: string
          example:
            - "TTN@1.0.0"
            - "MFMGroundwater@1.0.0"
    createPipelineDTO:
      type: object
      properties:
        description:
          type: string
          example: Pipeline for Multiflexmeter Groundwater devices
        steps:
          type: array
          items:
            type: string
          example:
            - "TTN@1.0.0"
            - "MFMGroundwater@1.0.0"
    updatePipelineDTO:
      type: object
      properties:
        description:
          type: string
          example: Pipeline for Multiflexmeter Groundwater devices
        steps:
          type: array
          items:
            type: string
          example:
            - "TTN@1.0.0"
            - "MFMGroundwater@1.0.0"
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
security:
  - Authorization: []
tags:
  - name: Devices
  - name: Pipelines
