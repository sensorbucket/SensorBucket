openapi: 3.0.0
info:
  title: Sensorbucket API
  version: '1.0'
  license:
    name: TBD
  description: ''
  contact:
    name: Provincie Zeeland
    url: 'https://zeeland.nl'
servers:
  - description: Local
    url: 'http://localhost:3000'
paths: 
  /hello-world:
    get:
      description: Hello world!
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Hello world!"
  
  /asset-definitions:
    get:
      description: List asset definitions for this AM service
      tags: ["Asset Management"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /assets:
    post:
      description: Create an asset
      tags: ["Asset Management"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [asset_definition, content]
              properties:
                asset_definition:
                  type: string
                  example: srn:asset:mfm-waterlevel:sensor
                content:
                  type: object
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetResponse"
    get:
      parameters:
        - in: query
          name: assetDefinition
          schema:
            type: string
            example: srn:asset:mfm-waterlevel:sensor
        - in: query
          name: filter
          schema:
            type: array
            items:
              type: string
      description: List and filter assets
      tags: ["Asset Management"]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/assetResponse"

  
  /assets/{assetURN}:
    parameters:
      - name: assetURN
        in: path
        required: true
        schema:
          type: string
    get:
      description: Retrieve an asset
      tags: ["Asset Management"]
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetResponse"
    put:
      description: Replace an asset definition
      tags: ["Asset Management"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: object
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assetResponse"

  /measurements/{start}/{end}:
    parameters:
      - in: path
        name: start
        required: true
        schema:
          type: string
          format: iso8601
          example: "2022-01-01T00:00:00Z"
      - in: path
        name: end
        required: true
        schema:
          type: string
          format: iso8601
          example: "2022-12-31T23:59:59Z"
    get:
      description: query measurements
      tags: ["Measurements"]
      parameters:
        - in: query
          name: cursor
          required: false
          schema:
            type: string
        - in: query
          name: limit
          required: false
          schema:
            type: number
        - in: query
          name: thing_urn
          required: false
          schema:
            type: string
        - in: query
          name: location_id
          required: false
          schema:
            type: number
        - in: query
          name: measurement_type
          required: false
          schema:
            type: string
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/measurementResponse"

  /locations:
    post:
      description: Create a location
      tags: ["locations"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Harborside 3A
                lat:
                  type: number
                  example: 5.123123
                lng:
                  type: number
                  example: 51.23123
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/locationResponse"
    get:
      description: List all locations
      tags: ["locations"]
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/locationResponse"
  /locations/{id}:
    parameters:
      - in: path
        required: true
        name: id
        schema:
          type: number
    delete:
      description: Delete a location
      tags: ["locations"]
      responses:
        200:
          description: ok
  /locations/things:
    put:
      description: Set thing location
      tags: ["locations"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setThingLocationRequest"
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thingLocationResponse"
  /locations/things/{thingURN}:
    parameters:
      - in: path
        required: true
        name: thingURN
        schema:
          type: string
          example: "srn:asset:mfm-waterlevel:sensor:AABBCCDDEEFFGGHH"
    get:
      description: get the location of a thing
      tags: ["locations"]
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thingLocationResponse"
        404:
          description: thing does not have a location
    delete:
      description: remove thing from a location
      tags: ["locations"]
      responses:
        200:
          description: ok

components:
  schemas: 
    assetResponse:
      type: object
      properties:
        urn:
          type: string
          example: "srn:asset:mfm-waterlevel:sensor:12345678"
        content:
          type: object
    measurementResponse:
      type: object
      properties:
        thing_urn:
          type: string
          example: "srn:asset:mfm-waterlevel:sensor:12345678"
        timestamp:
          type: string
          example: "2022-02-01T12:14:00+02:00"
        value:
          type: number
          example: 21.325
        measurement_type:
          type: string
          example: air_temperature
        measurement_type_unit:
          type: string
          example: degrees celsius
        location_id:
          type: number
          example: 12
        coordinates:
          type: array
          items: 
            type: number
          example: [5.47, 51.46]
        metadata:
          type: object
    locationResponse:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Harborside 3A
        lat:
          type: number
          example: 5.123123
        lng:
          type: number
          example: 51.23123
    thingLocationResponse:
      type: object
      properties:
        thing_urn:
          type: string
          example: "srn:asset:mfm-waterlevel:sensor:AABBCCDDEEFFGGHH"
        location_id:
          type: number
        location_name:
          type: string
          example: Harborside 3A
        location_lat:
          type: number
          example: 5.123123
        location_lng:
          type: number
          example: 51.23123
    setThingLocationRequest:
      type: object
      properties:
        thing_urn:
          type: string
          example: "srn:asset:mfm-waterlevel:sensor:AABBCCDDEEFFGGHH"
        location_id:
          type: number
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
security:
  - Authorization: []
tags:
  - name: Asset Management
